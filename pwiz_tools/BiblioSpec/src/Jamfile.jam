#
# $Id$
#
#
# Original author: Barbara Frewen <frewen .at. u.washington.edu>,
#                  MacCoss Lab, Department of Genome Sciences, UW
#
# Copyright 2012 University of Washington - Seattle, WA
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 

# why is this not inherited from the root?
.os = [ modules.peek : OS ] ; # NT, LINUX, MACOSX

using expat : 2.0.1 : $(EXPAT_SOURCE) ;

# use a rule to return <define>__LINUX__ based on the value of OS
rule define-os ( properties * )
{
  if ( [ MATCH (LINUX) : $(.os) ] )
  {
    return <define>__LINUX__ ;
  }
}

rule mascot-define ( properties * )
{
    local result ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        result += <define>USE_MASCOT_PARSER ;
    }
    return $(result) ;
}

rule mascot-api-requirements ( properties * )
{
    local result = [ mascot-define $(properties) ] ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        result += <source>MascotResultsReader.cpp ;
    }
    else
    {
        result += <source>MascotResultsReader_dummy.cpp ;
    }
    return $(result) [ mascot-api-usage-requirements $(properties) ] ;
}

rule mascot-api-usage-requirements ( properties * )
{
    local result ;
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        result += <library>$(PWIZ_ROOT_PATH)//msparser ;
        result += <dependency>unimod_2.xsd ;
        result += <dependency>quantitation_1.xsd ;
        result += <dependency>quantitation_2.xsd ;
    }

    return $(result) ;
}

path-constant WATERS_API_PATH : $(PWIZ_ROOT_PATH)/pwiz_aux/msrc/utility/vendor_api/Waters ;

rule waters-define ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ project-exists $(WATERS_API_PATH) ] &&
       [ masslynxraw-dll-location $(WATERS_API_PATH) : $(properties) ]  &&
       ! [ without-binary-msdata $(properties) ] &&
       ! <vendor-api-support>off in $(properties)
    {
        result += <define>USE_WATERS_READER ;
    }
    return $(result) ;
}

rule waters-api-usage-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ project-exists $(WATERS_API_PATH) ] &&
       [ masslynxraw-dll-location $(WATERS_API_PATH) : $(properties) ]  &&
       ! [ without-binary-msdata $(properties) ] &&
       ! <vendor-api-support>off in $(properties)
    {
        result += <library>$(WATERS_API_PATH)//pwiz_vendor_api_waters ;
    }
    return $(result) ;
}


# some properties for all
project 
  : requirements
      [ define-os ]
      <link>static
      <include>$(PWIZ_ROOT_PATH)/libraries/SQLite
      <include>$(PWIZ_ROOT_PATH)/libraries/expat-2.0.1/lib
      <toolset>msvc:<define>VENDOR_READERS
      <toolset>msvc:<library>$(PWIZ_ROOT_PATH)/pwiz/data/vendor_readers
;


# the main BiblioSpec library
lib blibbuild
  : # sources
    BlibBuilder.cpp
    BuildParser.cpp
    IdpXMLreader.cpp
    MzIdentMLReader.cpp
    PepXMLreader.cpp
    PercolatorXmlReader.cpp
    PrideXmlReader.cpp
    ProxlXmlReader.cpp
    MaxQuantModReader.cpp
    MaxQuantReader.cpp
    MSFReader.cpp
    MSFSpecReader.cpp
    mzTabReader.cpp
    OSWReader.cpp
    ProteinPilotReader.cpp
    saxhandler.cpp
    ShimadzuMLBReader.cpp
    SQTreader.cpp
    SQTversion.cpp
    SslReader.cpp
    TandemNativeParser.cpp
    TSVReader.cpp
    UnimodParser.cpp
    WatersMseReader.cpp
  : # requirements
    <link>static
    <conditional>@mascot-api-requirements
    <conditional>@waters-define
    <library>$(PWIZ_ROOT_PATH)/libraries/SQLite//sqlite3
    <dependency>modifications.xml # required file for running BlibBuild with MaxQuant support
    <dependency>unimod.xml # required file for running BlibBuild with OpenSWATH support
  : # default-build
  : # usage-requirements
    <conditional>@mascot-api-usage-requirements
    <conditional>@waters-api-usage-requirements
    <library>$(PWIZ_ROOT_PATH)/libraries/SQLite//sqlite3
    <dependency>unimod.xml
    <dependency>modifications.xml
 ;

lib blib
  : # sources
    AminoAcidMasses.cpp
    BlibMaker.cpp
    BlibUtils.cpp
    CommandLine.cpp
    DotProduct.cpp
    LibReader.cpp
    Match.cpp
    mzxmlParser.cpp
    Options.cpp
    PeakProcess.cpp
    PsmFile.cpp
    PwizReader.cpp
    RefSpectrum.cpp
    Reportfile.cpp
    SearchLibrary.cpp
    Spectrum.cpp
    SqliteRoutine.cpp
    Verbosity.cpp
    WeibullPvalue.cpp
  : # requirements
    <link>static
    <library>$(PWIZ_ROOT_PATH)/libraries/SQLite//sqlite3
    <library>pwiz-boost-libraries
  : # default-build
  : # usage-requirements
    <library>$(PWIZ_ROOT_PATH)/libraries/SQLite//sqlite3
    <library>pwiz-boost-libraries
 ;

# all the pwiz and boost libraries required
alias pwiz-boost-libraries 
  : /ext/boost//program_options
    /ext/boost//filesystem
    /ext/boost//thread
    /ext/boost//iostreams
    /ext/boost//system
    /ext/expat//expat
    $(PWIZ_ROOT_PATH)/pwiz/data/msdata//pwiz_data_msdata
    $(PWIZ_ROOT_PATH)/pwiz/data/identdata//pwiz_data_identdata
    $(PWIZ_ROOT_PATH)/pwiz/utility/minimxml//pwiz_utility_minimxml
    $(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc
;


 
# the main BiblioSpec tools
exe BlibBuild
  : # sources
    BlibBuild.cpp
    blib
    blibbuild
  : # requirements
    <link>static
    <conditional>@mascot-define
    <conditional>@waters-define
  : # default-build
  : # usage-requirements
    <conditional>@mascot-api-usage-requirements
    <conditional>@waters-api-usage-requirements
;

exe BlibFilter
  : # sources
    BlibFilter.cpp
    blib
    pwiz-boost-libraries
  : # requirements
    <link>static  
;

exe BlibSearch
  : # sources
    BlibSearch.cpp
    blib
    pwiz-boost-libraries
  : # requirements
    <link>static  
;

exe BlibToMs2
  : # sources
    BlibToMs2.cpp
    blib
    pwiz-boost-libraries
  : # requirements
    <link>static  
;

# code from BiblioSpec version 1 for converter
lib blib_v_1 
  : # sources
    original-LibIterator.cpp
    original-Library.cpp
    original-Modifications.cpp
    original-Ms2file.cpp
    original-ProcessedPeaks.cpp
    original-RefFile.cpp
    original-RefSpectrum.cpp
    original-Spectrum.cpp
  : # requirements
    <link>static
   ;

# converter for version 1 libraries to sqlite libraries
exe LibToSqlite3
  : # sources
    LibToSqlite3.cpp
    $(PWIZ_ROOT_PATH)/libraries/SQLite//sqlite3
  : # requirements
    <link>static
    <threading>multi
    <library>/ext/zlib//z
    <library>blib_v_1
 ;

# for make targets below, <relevant> features make <location> be calculated properly

alias all-relevant : : <relevant>cxxstd <relevant>cxxstd-dialect <relevant>target-os <relevant>toolset <relevant>variant <relevant>debug-symbols <relevant>runtime-link <relevant>link <relevant>address-model <relevant>architecture <relevant>asynch-exceptions <relevant>threading <relevant>debug-store <relevant>embed-manifest <relevant>exception-handling <relevant>extern-c-nothrow <relevant>inlining <relevant>instruction-set <relevant>optimization <relevant>pch <relevant>rtti <relevant>runtime-debugging <relevant>threading <relevant>warnings <relevant>warnings-as-errors <relevant>windows-api ;

# required files for running BlibBuild with Mascot support
make unimod_2.xsd : ./unimod_2.xsd : @common.copy : <use>all-relevant ;
make quantitation_1.xsd : ./quantitation_1.xsd : @common.copy : <use>all-relevant ;
make quantitation_2.xsd : ./quantitation_2.xsd : @common.copy : <use>all-relevant ;

# required file for running BlibBuild with MaxQuant support
make modifications.xml : ./modifications.xml : @common.copy : <use>all-relevant ;

# required file for running BlibBuild with OpenSWATH support
make unimod.xml : ./unimod.xml : @common.copy : <use>all-relevant ;

install install
    : BlibBuild BlibFilter BlibSearch BlibToMs2
    : <conditional>@install-type
      <conditional>@install-location
      <conditional>@install-vendor-api-dependencies
      <conditional>@install-identdata-dependencies
      <conditional>@gcc-install-dll-path
    ;

rule install-msparser-requirements ( properties * )
{
    local msparser_path = [ msparser-path $(properties) ] ;
    if $(msparser_path)
    {
        local result = <source>./unimod_2.xsd
            <source>./quantitation_1.xsd
            <source>./quantitation_2.xsd
            <source>./modifications.xml
            <source>./unimod.xml ;

        if <toolset>msvc in $(properties)
        {
            if <runtime-debugging>on in $(properties)
            {
                result += <source>$(msparser_path)/lib/msparserD.dll ;
            }
            else
            {
                result += <source>$(msparser_path)/lib/msparser.dll ;
            }
        }
        return $(result) ;
    }
}

install install_msparser
    : : <conditional>@install-msparser-requirements
    ;

explicit install_msparser ;
