#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers42@gmail.com>
#
# Copyright 2015 Vanderbilt University
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#
# Contributor(s): Mike Kochen
#

# Usage:
#
#   bjam [options] [install]
#
#   Builds and installs Whatever This Thing Is Called.
#
# Targets and Related Options:
#
#   build                   Build Bumbershoot libraries and applications
#   =====
#
#
#
#   install                 Install executable files to certain locations
#   =======
#
#   --prefix=<PREFIX>       Install architecture independent files here.
#                           Default: "C:\Program Files\Bumbershoot" for Windows
#                           Default: "/usr/local/bumbershoot" for Linux
#
#   --exec-prefix=<EPREFIX> Install architecture dependent files here.
#                           Default: <PREFIX>
#

import os ;
import modules ;
import common ;
import package ;
import errors : error ;
import feature ;
import path ;

local application-name = "Greazy" ;

constant MAJOR : 0 ;
constant MINOR : 1 ;

path-constant GREAZY_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Bumbershoot/greazy ;


# set version info (used for tarball filenames)
import generate-version ;
local version-file = $(application-name:L)Version.cpp ;
generate-version.cpp $(GREAZY_PATH)/$(version-file) : freicore $(application-name:L) : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV) : $(PWIZ_GIT_BRANCH) ;

# revision-info is a sequence: <max revision> <max year> <max month> <max day> <number of modified files in working copy>

import modules ;
if [ modules.peek : NT ]
{
    import path feature svnrev sequence ;
    path-constant GUI_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Bumbershoot/Greazy/GUI ;

    # generate GreazyGUI version header
    generate-version.AssemblyInfo.cs $(GUI_PATH)/Properties/AssemblyInfo.cs : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV)
        : "GreazyGUI" "A tool for identifying lipid mass spectrometry data." "Vanderbilt University" "Greazy" ;


    rule do_greazy_build ( targets + : sources * : properties * )
    {
        if <variant>debug in $(properties) ||
           <debug-symbols>on in $(properties)
        {
            CONFIGURATION on $(<[1]) = "Debug" ;
        }
        else
        {
            CONFIGURATION on $(<[1]) = "Release" ;
        }

        if ! <location> in $(properties:G)
        {
            if <variant>debug in $(properties)
            {
                location = $(PWIZ_BUILD_PATH)/Greazy/bin/$(PLATFORM)/Debug ;
            }
            else
            {
                location = $(PWIZ_BUILD_PATH)/Greazy/bin/$(PLATFORM)/Release ;
            }
            return $(result) ;
        }
        else
        {
            location = [ path.make [ feature.get-values location : $(properties) ] ] ;
        }

        OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
        INTERMEDIATE_PATH on $(<[1]) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/obj/" ;
        JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
    }

    actions do_greazy_build
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        echo Building GreazyGUI in $(CONFIGURATION:L) configuration...
        msbuild $(GUI_PATH)/greazy.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);$(INTERMEDIATE_PATH);OutDir=$(OUTPUT_PATH) /nologo /verbosity:minimal
    }


    rule build-location ( properties * )
    {
        local result ;
        # don't override the location when it's already set
        if ! <location> in $(properties:G)
        {
            if <variant>debug in $(properties) ||
               <debug-symbols>on in $(properties)
            {
                result = <location>$(PWIZ_BUILD_PATH)/Greazy/bin/$(PLATFORM)/Debug ;
            }
            else
            {
                result = <location>$(PWIZ_BUILD_PATH)/Greazy/bin/$(PLATFORM)/Release ;
            }
            return $(result) ;
        }
        else
        {
            return $(properties) ;
        }
    }


    make GreazyGUI.exe
        : # sources
        : # actions
            @do_greazy_build
        : # requirements
            <conditional>@msvc-dotnet-requirement
            <conditional>@pwiz-bindings-dependency
            <conditional>@build-location
        ;
}

rule dotNET-dependencies ( properties * )
{
    if <toolset-msvc:version>12.0 in $(properties)
    {
        local location = [ install-location $(properties) ] ;
        return <dependency>GreazyGUI.exe/$(location) ;
    }
}

exe $(application-name:L)
  : # sources
    [ glob greazy*.cpp ]
  : # requirements
    <library>../freicore//freicore
    <library>$(PWIZ_LIBRARIES_PATH)/SQLite//sqlite3pp
  ;

exe lipidlama
  : # sources
    LipidLama.cpp
  : # requirements
  ;

install install
    : $(application-name:L) lipidlama
    : <conditional>@install-type
      <conditional>@install-location
      <conditional>@install-vendor-api-dependencies
      <conditional>@install-identdata-dependencies
      <conditional>@gcc-install-dll-path
      <conditional>@dotNET-dependencies
    ;
