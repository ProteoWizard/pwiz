//
// $Id$
//
// Licensed under the Apache License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions and 
// limitations under the License.
//
// The Original Code is the Bumbershoot core library.
//
// The Initial Developer of the Original Code is Matt Chambers.
//
// Copyright 2009 Vanderbilt University
//
// Contributor(s): Surendra Dasari
//

#ifndef _PEAKSPECTRUM_H
#define _PEAKSPECTRUM_H

#include "stdafx.h"
#include "shared_defs.h"
#include "BaseSpectrum.h"

#include <math.h>

#include "pwiz/data/msdata/MSDataFile.hpp"
#include "pwiz_tools/common/FullReaderList.hpp"
#include "pwiz/analysis/spectrum_processing/SpectrumListFactory.hpp"
#include <boost/interprocess/containers/flat_map.hpp>

namespace freicore
{
    using boost::shared_ptr;
    using boost::container::flat_map;

    class PeakPreData : public flat_map< double, float >
    {
    public:
        iterator findNear( double mz, const MZTolerance& tolerance, bool preferIntensity = false )
        {
            iterator cur, min, max, best;

            min = lower_bound( mz - tolerance );
            max = lower_bound( mz + tolerance );

            if( min == max )
                return end(); // no peaks

            best = min;

            double minDiff;
            float maxInten;

            switch( preferIntensity )
            {
                case true:
                    // find the peak with the highest intensity within the tolerance range
                    maxInten = best->second;
                    for( cur = min; cur != max; ++cur )
                    {
                        float curInten = cur->second;
                        if( curInten > maxInten )
                        {
                            maxInten = curInten;
                            best = cur;
                        }
                    }
                    break;

                case false:
                    // find the peak closest to the desired mz
                    minDiff = fabs( mz - best->first );
                    for( cur = min; cur != max; ++cur )
                    {
                        double curDiff = fabs( mz - cur->first );
                        if( curDiff < minDiff && cur->second > 0 )
                        {
                            minDiff = curDiff;
                            best = cur;
                        }
                    }
                    break;
            }

            return best;
        }

        template< class Archive >
        void serialize( Archive& ar, const unsigned int version )
        {
            ar & boost::serialization::base_object< flat_map< double, float > >( *this );
        }

        PeakPreData& operator= (const PeakPreData& rhs) { flat_map<double, float>::operator=(rhs); return *this; }
    };

    template< class T >
    struct BasePeakData : public flat_map< double, T >
    {
        typedef typename BasePeakData<T>::const_iterator    const_iterator;
        typedef typename BasePeakData<T>::iterator            iterator;

        iterator findNear( double mz, const MZTolerance& tolerance )
        {
            iterator cur, min, max, best;

            min = BasePeakData<T>::lower_bound( mz - tolerance );
            max = BasePeakData<T>::lower_bound( mz + tolerance );

            if( min == max ) {
                //cout << "No peaks!!" << endl;
                return BasePeakData<T>::end(); // no peaks
            }

            best = min;

            // find the peak closest to the desired mz
            double minDiff = fabs( mz - best->first );
            for( cur = min; cur != max; ++cur )
            {
                double curDiff = fabs( mz - cur->first );
                if( curDiff < minDiff )
                {
                    minDiff = curDiff;
                    best = cur;
                }
            }

            return best;
        }

        template< class Archive >
        void serialize( Archive& ar, const unsigned int version )
        {
            ar & boost::serialization::base_object< flat_map< double, T > >( *this );
        }

        BasePeakData<T>& operator= (const BasePeakData<T>& rhs) { flat_map<double, T>::operator=(rhs); return *this; }
    };

    namespace deisotoping
    {
        static const double avgMass = 111.10304;
        static const double avgCarbons = 4.9503;
        static const double avgHydrogens = 7.8254;
        static const double avgNitrogens = 1.3586;
        static const double avgOxygens = 1.472;
        static const double avgSulfurs = 0.0389;
        struct IsotopeDistribution
        {
            IsotopeDistribution( vector<double> p = vector<double>() ) : m_probs(p) {}

            IsotopeDistribution( const string& initializerList )
            {
                vector<string> isotopeProbabilityList;
                boost::split( isotopeProbabilityList, initializerList, boost::is_any_of(",") );
                for( size_t i=0; i < isotopeProbabilityList.size(); ++i )
                    m_probs.push_back( lexical_cast<double>( isotopeProbabilityList[i] ) );
            }

            IsotopeDistribution operator*( const IsotopeDistribution& rhs ) const
            {
                //cout << "lhs: " << this->m_probs << " * rhs: " << rhs.m_probs << endl;
                size_t maxIsotopeCount = m_probs.size() + rhs.m_probs.size();
                vector<double> resultProbabilities( max( m_probs.size(), rhs.m_probs.size() ), 0.0f );
                for( size_t i=0; i < maxIsotopeCount; ++i )
                {
                    //cout << i << ": ";
                    for( size_t leftIsotopeCount = 0; leftIsotopeCount <= i && leftIsotopeCount < m_probs.size(); ++leftIsotopeCount )
                    {
                        if( i - leftIsotopeCount >= rhs.m_probs.size() )
                            continue;
                        size_t rightIsotopeCount = i - leftIsotopeCount;
                        //cout << leftIsotopeCount << "," << rightIsotopeCount;
                        double newProbability = m_probs[leftIsotopeCount] * rhs.m_probs[rightIsotopeCount];
                        if( i < resultProbabilities.size() )
                            resultProbabilities[i] += newProbability;
                        else
                            resultProbabilities.push_back( newProbability );
                        //cout << ":" << newProbability << " ";
                    }
                    //cout << endl;
                    if( resultProbabilities[i] < 0.00001f )
                        break;
                }
                //cout << resultProbabilities << endl;
                return IsotopeDistribution( resultProbabilities );
            }
            vector<double> m_probs;
        };
        //ostream& operator<<( ostream& o, const IsotopeDistribution& i ) { return o << "(" << i.m << " " << i.p << " " << i.pp << ")"; }
        static const IsotopeDistribution C_i = IsotopeDistribution("0.989300,0.01070,0.00000");
        static const IsotopeDistribution H_i = IsotopeDistribution("0.999885,0.00012,0.00000");
        static const IsotopeDistribution N_i = IsotopeDistribution("0.996320,0.00368,0.00000");
        static const IsotopeDistribution O_i = IsotopeDistribution("0.997570,0.00038,0.00205");
        static const IsotopeDistribution S_i = IsotopeDistribution("0.949300,0.00760,0.04290");
        static map<int, IsotopeDistribution> C_d;

        static void generateIsotopeProbabilities( double ionMass, vector<double>& isotopeProbabilities )
        {
            double numAveragines = ionMass / avgMass;
            int nC = (int) round( numAveragines * avgCarbons, 0 );
            /*float nH = numAveragines * avgHydrogens;
            float nN = numAveragines * avgNitrogens;
            float nO = numAveragines * avgOxygens;
            float nS = numAveragines * avgSulfurs;*/

            if( C_d.empty() )
            {
                C_d[1] = C_i;
                C_d[2] = C_i * C_i;
            }

            while( C_d.rbegin()->first < nC )
            {
                IsotopeDistribution tmp = C_d.rbegin()->second * C_d.rbegin()->second;
                C_d[ C_d.rbegin()->first * 2 ] = tmp;
            }

            IsotopeDistribution rv = C_d[1];
            if( C_d.count( nC ) == 0 )
            {
                for( int i=0; i <= 31; ++i )
                    if( nC & ( 1 << i ) )
                        rv = rv * C_d[ 1 << i ];
                C_d[ nC ] = rv;
            } else
                rv = C_d[ nC ];

            isotopeProbabilities = rv.m_probs;
        }
    }

    template< class PeakDataType = double >
    struct PeakSpectrum : public virtual BaseSpectrum
    {
        PeakSpectrum()
            :    BaseSpectrum()
        {}

        PeakSpectrum( const PeakSpectrum& old )
            : BaseSpectrum( old )
        {
            basePeakMz            = old.basePeakMz;
            basePeakIntensity     = old.basePeakIntensity;
            peakPreData           = old.peakPreData;
            peakData              = old.peakData;
        }

        template< class Archive >
        void serialize( Archive& ar, const unsigned int version )
        {
            ar & basePeakMz & basePeakIntensity;
            ar & peakPreData & peakData;
        }

        static void GenerateIsotopeDistributionSVG( const string& chargeStates = "1,2,3" )
        {
            vector<string> chargeStateList;
            boost::split( chargeStateList, chargeStates, boost::is_any_of(",") );
            vector<double> isotopeProbabilities;
            PeakSpectrum<double> s;
            s.mzLowerBound = 200;
            s.mzUpperBound = 2000;
            int highestCharge = 0;
            for( size_t i=0; i < chargeStateList.size(); ++i )
            {
                int z = lexical_cast<int>( chargeStateList[i] );
                if( z > highestCharge ) highestCharge = z;
                for( double mz=s.mzLowerBound + (i*5); mz < s.mzUpperBound + (i*5); mz += 50.0 )
                {
                    deisotoping::generateIsotopeProbabilities( mz*z, isotopeProbabilities );
                    for( size_t i=0; i < isotopeProbabilities.size(); ++i )
                        s.peakPreData[ mz + (NEUTRON*i) / (double)z ] = isotopeProbabilities[i];
                }
            }
            s.id = SpectrumId( "test", 0, highestCharge+1 );
            s.writeToSvgFile( "-isotopic-packets" );
        }

        void Deisotope( double isotopeMzTolerance )
        {
            using namespace freicore::deisotoping;
            vector<double> isotopeProbabilities;

            PeakPreData deisotopedPeaks;
            //if( UnquoteString( g_rtSharedConfig->getVariables()["DeisotopingMode"] ) == "1" )
            {
                while( !peakPreData.empty() )
                {
                    PeakPreData::iterator monoPeak = peakPreData.begin();
                    generateIsotopeProbabilities( monoPeak->first, isotopeProbabilities );
                    size_t isotopeCount = isotopeProbabilities.size();
                    vector< PeakPreData::iterator > isotopePeaks( isotopeCount );
                    for( size_t i=1; i < isotopeCount; ++i )
                        isotopePeaks[i] = peakPreData.findNear( monoPeak->first + NEUTRON*i, isotopeMzTolerance );

                    double observed_mono_intensity = monoPeak->second;

                    vector<double> expectedIsotopeRatios( isotopeCount );
                    for( size_t i=0; i < isotopeCount; ++i )
                        expectedIsotopeRatios[i] = isotopeProbabilities[i] / isotopeProbabilities[0];

                    vector<double> expectedIsotopeIntensities( isotopeCount );
                    for( size_t i=0; i < isotopeCount; ++i )
                        expectedIsotopeIntensities[i] = expectedIsotopeRatios[i] * observed_mono_intensity;

                    if( deisotopedPeaks.find( monoPeak->first ) != deisotopedPeaks.end() )
                        deisotopedPeaks[ monoPeak->first ] += accumulate( expectedIsotopeIntensities.begin(), expectedIsotopeIntensities.end(), 0.0 );
                    else
                        deisotopedPeaks[ monoPeak->first ] = accumulate( expectedIsotopeIntensities.begin(), expectedIsotopeIntensities.end(), 0.0 );

                    monoPeak->second -= expectedIsotopeIntensities[0];
                    for( size_t i=1; i < isotopeCount; ++i )
                    {
                        if( isotopePeaks[i] != peakPreData.end() )
                        {
                            isotopePeaks[i]->second -= expectedIsotopeIntensities[i];
                            if( isotopePeaks[i]->second <= 1 )
                                peakPreData.erase( isotopePeaks[i] );
                        }
                    }

                    //if( monoPeak->second <= 1 )
                        peakPreData.erase( monoPeak );
                }
            }/* else
            {
                while( !peakPreData.empty() )
                {
                    PeakPreData::iterator monoPeak = peakPreData.begin();
                    generateIsotopeProbabilities( monoPeak->first, mono_probability, plus1_probability, plus2_probability );
                    PeakPreData::iterator plus1_peak = peakPreData.findNear( monoPeak->first + NEUTRON, isotopeMzTolerance );
                    PeakPreData::iterator plus2_peak = peakPreData.findNear( monoPeak->first + 2*NEUTRON, isotopeMzTolerance );

                    float observed_mono_intensity = monoPeak->second;
                    float observed_plus1_intensity = ( plus1_peak == peakPreData.end() ? 0 : plus1_peak->second );
                    float observed_plus2_intensity = ( plus2_peak == peakPreData.end() ? 0 : plus2_peak->second );

                    float expected_mono_sum = observed_mono_intensity / mono_probability;
                    float expected_plus1_sum = observed_plus1_intensity / plus1_probability;
                    float expected_plus2_sum = observed_plus2_intensity / plus2_probability;

                    float mono_weight = pow( mono_probability, 2 );
                    float plus1_weight = pow( plus1_probability, 2 );
                    float plus2_weight = pow( plus2_probability, 2 );

                    float mono_weighted_product = expected_mono_sum * mono_weight;
                    float plus1_weighted_product = expected_plus1_sum * plus1_weight;
                    float plus2_weighted_product = expected_plus2_sum * plus2_weight;

                    float avg_weighted_product =    ( mono_weighted_product + plus1_weighted_product + plus2_weighted_product ) /
                                                    ( mono_weight + plus1_weight + plus2_weight );

                    float adjusted_mono_intensity = mono_probability * avg_weighted_product;
                    float adjusted_plus1_intensity = plus1_probability * avg_weighted_product;
                    float adjusted_plus2_intensity = plus2_probability * avg_weighted_product;

                    float mono_error = fabs( observed_mono_intensity - adjusted_mono_intensity ) * mono_probability;
                    float plus1_error = fabs( observed_plus1_intensity - adjusted_plus1_intensity ) * plus1_probability;
                    float plus2_error = fabs( observed_plus2_intensity - adjusted_plus2_intensity ) * plus2_probability;

                    //float total_error = mono_error + plus1_error + plus2_error;

                    if( deisotopedPeaks.find( monoPeak->first ) != deisotopedPeaks.end() )
                        deisotopedPeaks[ monoPeak->first ] += avg_weighted_product;
                    else
                        deisotopedPeaks[ monoPeak->first ] = avg_weighted_product;

                    monoPeak->second -= adjusted_mono_intensity;
                    if( plus1_peak != peakPreData.end() )
                        plus1_peak->second -= adjusted_plus1_intensity;
                    if( plus2_peak != peakPreData.end() )
                        plus2_peak->second -= adjusted_plus2_intensity;

                    //if( monoPeak->second <= 1 )
                        peakPreData.erase( monoPeak );
                    if( plus1_peak != peakPreData.end() && plus1_peak->second <= 1 )
                        peakPreData.erase( plus1_peak );
                    if( plus2_peak != peakPreData.end() && plus2_peak->second <= 1 )
                        peakPreData.erase( plus2_peak );
                }
            }*/
            peakPreData = deisotopedPeaks;
            /*map< float, float > deisotopedPeaks;
            set< float > finishedPeaks;

            for( int z = id.charge; z > 0; --z )
            {
                float isotopeInterval = NEUTRON / (float) z;
                if( isotopeInterval <= isotopeMzTolerance*2 )
                    continue;

                float maxFragmentMz = mzOfPrecursor * ( (float) id.charge / (float) z );
                //cout << "max mz for " << z << " is " << maxFragmentMz << ", interval is " << isotopeInterval << endl;
                PeakPreData::iterator maxItr = peakPreData.lower_bound( maxFragmentMz );
                --maxItr;
                PeakPreData::reverse_iterator r_itr = peakPreData.rbegin();
                while( r_itr != peakPreData.rend() )
                {
                    if( r_itr->first > maxItr->first || finishedPeaks.find( r_itr->first ) != finishedPeaks.end() )
                    { 
                        ++r_itr;
                        continue;
                    }

                    PeakPreData::iterator isotopePeak = -- r_itr.base();
                    PeakPreData::iterator monoPeak = peakPreData.findNear( isotopePeak->first - isotopeInterval, isotopeMzTolerance );
                    if( monoPeak != peakPreData.end() )
                    {
                        monoPeak->second += isotopePeak->second;
                        deisotopedPeaks[ monoPeak->first ] = isotopePeak->first;
                        if( isotopePeak == maxItr )
                            -- maxItr;
                        peakPreData.erase( isotopePeak );
                        r_itr = PeakPreData::reverse_iterator( ++ monoPeak );
                    } else
                    {
                        // if the isotope peak has been deisotoped to and it has no smaller isotope, don't mess with it again
                        if( deisotopedPeaks.find( isotopePeak->first ) != deisotopedPeaks.end() )
                            finishedPeaks.insert( isotopePeak->first );
                        ++r_itr;
                    }
                }
            }*/
            //cout << deisotopedPeaks << endl << finishedPeaks << endl;
        }

        /**! Attempts to find a complement for each peak in the spectrum
             and returns the sum of intensities of the found complementary 
             ions.
        */
        double FindComplements( double complementMzTolerance, bool preferIntensity = false )
        {
            double sumOfProducts = 0;
            // For each peak data point
            for( PeakPreData::iterator itr = peakPreData.begin(); itr != peakPreData.end(); ++itr )
            {
                // Calculate its complementary peak mass
                double complementMz = CalculateComplementMz( itr->first, 1 );
                // Locate it in the peak list
                PeakPreData::iterator complementItr = peakPreData.findNear( complementMz, complementMzTolerance, preferIntensity );
                // Add the intensity to the total complementary pair intensties
                if( complementItr != peakPreData.end() )
                {
                    sumOfProducts += itr->second * complementItr->second;
                }
            }

            // Return the total complementary pair intensity
            return sumOfProducts;
        }

        // Filters out the peaks with the lowest intensities until only <ticCutoffPercentage> of the total ion current remains
        void FilterByTIC( double ticCutoffPercentage )
        {
            //cout << "TicCutoffPercentage:" << ticCutoffPercentage << endl;
            //exit(1);
            if( !peakPreData.empty() )
            {
                // Sort peak list in descending order of intensity while calculating the total ion current in the spectrum.
                // Use a multimap because multiple peaks can have the same intensity.
                totalIonCurrent = 0.0f;
                typedef multimap< double, double > IntenSortedPeakPreData;
                IntenSortedPeakPreData intenSortedPeakPreData;
                for( PeakPreData::iterator itr = peakPreData.begin(); itr != peakPreData.end(); ++itr )
                {
                    totalIonCurrent += itr->second;
                    IntenSortedPeakPreData::iterator iItr = intenSortedPeakPreData.insert( make_pair( itr->second, itr->second ) );
                    iItr->second = itr->first;
                }

                double relativeIntensity = 0.0f;
                IntenSortedPeakPreData::reverse_iterator r_iItr;
                for(    r_iItr = intenSortedPeakPreData.rbegin();
                        relativeIntensity < ticCutoffPercentage && r_iItr != intenSortedPeakPreData.rend();
                        ++r_iItr )
                {
                    //cout << relativeIntensity << " / " << totalIonCurrent << endl;
                    relativeIntensity += r_iItr->first / totalIonCurrent; // add current peak's relative intensity to the sum
                }

                if( r_iItr == intenSortedPeakPreData.rend() )
                    --r_iItr;

                peakPreData.clear();

                for(    IntenSortedPeakPreData::iterator iItr = intenSortedPeakPreData.lower_bound( r_iItr->first );
                        iItr != intenSortedPeakPreData.end();
                        ++iItr )
                {
                    PeakPreData::value_type pair = make_pair(iItr->second, iItr->second);
                    PeakPreData::iterator itr = peakPreData.insert(pair).first;
                    itr->second = iItr->first;
                }
            }
        }

        void FilterByPeakCount( size_t maxPeakCount )
        {
            if( !peakPreData.empty() )
            {
                // Sort peak list in descending order of intensity
                // Use a multimap because multiple peaks can have the same intensity.
                typedef multimap< double, double > IntenSortedPeakPreData;
                IntenSortedPeakPreData intenSortedPeakPreData;
                for( PeakPreData::iterator itr = peakPreData.begin(); itr != peakPreData.end(); ++itr )
                {
                    IntenSortedPeakPreData::iterator iItr = intenSortedPeakPreData.insert( make_pair( itr->second, itr->second ) );
                    iItr->second = itr->first;
                }

                peakPreData.clear();

                size_t peakCount = 0;
                for(    IntenSortedPeakPreData::reverse_iterator r_iItr = intenSortedPeakPreData.rbegin();
                        r_iItr != intenSortedPeakPreData.rend() && peakCount < maxPeakCount;
                        ++r_iItr, ++peakCount )
                {
                    PeakPreData::iterator itr = peakPreData.insert( PeakPreData::value_type( r_iItr->second, r_iItr->second ) ).first;
                    itr->second = r_iItr->first;
                }
            }
        }

        void DetermineSpectrumChargeState()
        {
            // Firstly, determine the charge state of the precursor (singly or multiply charged?)
            // If the sum of intensities of the peaks which are smaller than the precursor is
            // vastly higher than the sum of intensities which are greater than the precursor,
            // the charge state is most likely single.

            if( id.charge == 0 )
            {
                // Tandem data is sorted by M/Z ratio, so summing the intensities is simple
                double lowSum = 0.0f;
                double highSum = 0.0f;
                PeakPreData::iterator itr;
                
                for( itr = peakPreData.begin(); itr != peakPreData.end() && itr->first < mzOfPrecursor; ++itr )
                    lowSum += itr->second;
                for( ; itr != peakPreData.end(); ++itr )
                    highSum += itr->second;

                // The charge state is determined to be single if the lower intensity sum is 90% or more of the total sum
                if( lowSum >= highSum * 9 )
                    id.setCharge(1); // single
                else
                    id.setCharge(0); // multiple
            }
        }

        string writeToSvg(    const map< double, string >* peakLabelMap = NULL,
                            const map< double, string >* peakColorMap = NULL,
                            const map< double, int >* peakWidthMap = NULL )
        {
            stringstream svgOut;
            PeakPreData::iterator itr, complementItr;

            // Find the most intense peak in the observed scan range
            double MaxInten = 0;
            for( itr = peakPreData.begin(); itr != peakPreData.end(); ++itr )
                if( fabs( itr->second ) > MaxInten )
                    MaxInten = fabs( itr->second );

            svgOut    << "<?xml version=\"1.0\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg width=\"100%\" height=\"100%\" version=\"1.1\"\n xmlns=\"http://www.w3.org/2000/svg\"\n xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n style=\"text-rendering:auto;shape-rendering:crispEdges\"\n onload='Init(evt)' onmousedown='Grab(evt)' onmousemove='Drag(evt)' onmouseup='Drop(evt)' >\n<!-- SVG GUI objects are downloaded from \"http://www.carto.net/papers/svg/gui\" -->\n"
                    << "<title>SpectrumSVG: " << id << "</title>\n"
                    << "<script><![CDATA[\n\tvar SVGns = \"http://www.w3.org/2000/svg\"\n\tvar SVGDocument = null;\n\tvar SVGRoot = null;\n\tvar myMapApp;\n\n"
                    << "\tvar scanName = \"" << id << "\";\n"
                    << "\tvar PrecursorMz = " << mzOfPrecursor << ";\n"
                    << "\tvar PrecursorCharge = " << id.charge << ";\n";


            svgOut    << "\tvar Peaks = [ ";

            if( mzOfPrecursor > 0 )
                svgOut    << "["
                        << mzOfPrecursor << ","
                        << 0 << ",{"
                        << "dasharray:[1,2],width:3,height:-30,"
                        << "label:\"+" << id.charge << " precursor\","
                        << "color:\"green\"}]";

            multimap< double, size_t > peaksByIntensity;
            int i = ( mzOfPrecursor > 0 ? 2 : 1 );
            for( itr = peakPreData.begin(); itr != peakPreData.end(); ++itr, ++i )
            {
                peaksByIntensity.insert( pair< double, size_t >( itr->second, i ) );
                svgOut    << ( itr == peakPreData.begin() && mzOfPrecursor == 0 ? "[" : ",[" )
                        << itr->first << ","
                        << itr->second;
                vector< string > optionVars;
                if( peakWidthMap && peakWidthMap->count( itr->first ) > 0 )
                    optionVars.push_back( string( "width:" ) + lexical_cast<string>( peakWidthMap->find( itr->first )->second ) );
                if( peakLabelMap && peakLabelMap->count( itr->first ) > 0 )
                    optionVars.push_back( string( "label:\"" ) + peakLabelMap->find( itr->first )->second + "\"" );
                if( peakColorMap && peakColorMap->count( itr->first ) > 0 )
                    optionVars.push_back( string( "color:\"" ) + peakColorMap->find( itr->first )->second + "\"" );
                if( !optionVars.empty() )
                {
                    svgOut << ",{" << optionVars[0];
                    for( size_t i=1; i < optionVars.size(); ++i )
                        svgOut << "," << optionVars[i];
                    svgOut << "}";
                }
                svgOut << "]";
            }
            svgOut  << "];\n";

            svgOut  << "\tvar PeaksByIntensity = [" << ( mzOfPrecursor > 0 ? "1" : "" );
            for( multimap< double, size_t >::reverse_iterator itr2 = peaksByIntensity.rbegin(); itr2 != peaksByIntensity.rend(); ++itr2 )
                svgOut << ( itr2 == peaksByIntensity.rbegin() && mzOfPrecursor == 0 ? "" : "," ) << itr2->second;
            svgOut  << "];\n";

            const RunTimeVariableMap& vars = g_rtSharedConfig->getVariables(true);
            string numChargeStates = vars.count("NumChargeStates") ? vars.find("NumChargeStates")->second : lexical_cast<string>( id.charge );
            string fragmentMzTolerance = vars.count("FragmentMzTolerance") ? vars.find("FragmentMzTolerance")->second : "0.5";
            string isotopeMzTolerance = vars.count("IsotopeMzTolerance") ? vars.find("IsotopeMzTolerance")->second : lexical_cast<string>( lexical_cast<double>( fragmentMzTolerance ) / 2.0f );

            svgOut  << "\tvar NumPeaks = " << ( peakPreData.size() + ( mzOfPrecursor > 0 ? 1 : 0 ) ) << ";\n";
            svgOut  << "\n\tvar IntensityRankFilter;\n\tvar IntensityFilter;\n"
                    << "\n\tvar NumChargeStates = " << numChargeStates
                    << ";\n\tvar FragmentMzTolerance = " << fragmentMzTolerance
                    << ";\n\tvar IsotopeMzTolerance = " << isotopeMzTolerance
                    << ";\n\tvar PROTON = 1.007276;\n\tvar NumFragmentChargeStates = PrecursorCharge-1;\n\n\tvar PixelToPeakMap = new Array;\n\tvar HighlightedPixels = new Array;\n\tvar PixelWithPeak = null;\n\tvar DisplayWidth;\n\tvar FullWidth;\n\tvar FullHeight;\n\tvar LeftMargin = 40;\n\tvar RightMargin = 40;\n\tvar TopMargin = 15;\n\tvar BottomMargin = 60;\n\tvar VerticalScaleFactor = 0.75;\n\tvar BaseLine;\n\tvar Xscaling;\n\tvar Yscaling;\n\tvar ZoomLevels = new Array;\n\tvar LoMZ;\n\tvar HiMZ;\n\tvar MaxInten;\n\tvar LabelToMajorTickRatio;\n\n\tvar BackDrop;\n\tvar GraphicsContainerElement = null;\n\tvar InteractiveOnlyContainer = null;\n\n\tvar GrabPoint;\n\tvar GrabPixelWithPeak;\n\tvar DragPoint;\n\tvar LastDragPoint;\n\tvar DragLine;\n\n\tvar GrabViewOn = false;\n\tvar GrabViewCount = 0;\n\n\tvar ComplementArcList = new Array;\n\n\tvar TagArcList = new Array;\n\tvar MaxTagCount = 25;\n\n\tvar IsotopeArcList = new Array;\n\tvar MaxIsotopeCount = 4;\n\n\tvar SelectedTool;\n\tvar UndoZoomTool;\n\tvar ZoomTool;\n\tvar DeNovoTool;\n\tvar PrintTool;\n\tvar GrabViewTool;\n\n\tvar Toolbox = new Object;\n\tvar FilterOptions = new Object;\n\tvar DeNovoOptions = new Object;\n\tvar LabelOptions = { styles:{\"font-family\":\"Courier New,monospace\", \"font-size\":\"10pt\", \"text-anchor\":\"middle\"} };\n\n\tvar DebugText1;\n\tvar DebugText2;\n\n\tfunction round( number, precision )\n\t{\n\t\tvar multiplier = Math.pow( 10, precision );\n\t\treturn Math.round( number*multiplier ) / multiplier;\n\t}\n\n\tvar ResidueMassToNameMap = new Array();\n\tfunction GetResidueByMass( mass, tolerance )\n\t{\n\t\tfor( var r in ResidueMassToNameMap )\n\t\t{\n\t\t\tvar r_mass = parseFloat(r);\n\t\t\tif( (r_mass - tolerance) < mass && (r_mass + tolerance) > mass )\n\t\t\t\treturn ResidueMassToNameMap[r];\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction CalculateComplementMz( IonMz, IonCharge )\n\t{\n\t\tvar chargedPrecursorMass = ( PrecursorMz * PrecursorCharge );\n\t\tvar chargedFragmentMass = IonMz * IonCharge;\n\t\tvar chargedComplementMass = chargedPrecursorMass - chargedFragmentMass;\n\t\tvar complementCharge = PrecursorCharge - IonCharge;\n\t\treturn chargedComplementMass / complementCharge;\n\t}\n\n\tfunction PixelToMz(x)\n\t{\n\t\treturn (x - LeftMargin) / Xscaling + LoMZ;\n\t}\n\n\tfunction MzToPixel(mz)\n\t{\n\t\treturn Math.ceil( LeftMargin + (Xscaling * (mz - LoMZ)) );\n\t}\n\n\tfunction GetPeakNearPixel(x, pixelTolerance, preferIntensity)\n\t{\n\t\tif( PixelToPeakMap[x] == null )\n\t\t\treturn null;\n\t\tif( preferIntensity != null && preferIntensity == true )\n\t\t{\n\t\t\tvar bestIntensity = 0;\n\t\t\tfor( var x2 = Math.max( 0, x - pixelTolerance ); x2 <= Math.min( FullWidth-1, x + pixelTolerance ); ++x2 )\n\t\t\t\tif( PixelToPeakMap[x2][0] != null &&\n\t\t\t\t    Peaks[ PixelToPeakMap[x2][0] ][1] > bestIntensity )\n\t\t\t\t{\n\t\t\t\t\tPeakIndex = PixelToPeakMap[x2][0];\n\t\t\t\t\tbestIntensity = Peaks[ PixelToPeakMap[x2][0] ][1];\n\t\t\t\t}\n\t\t} else\n\t\t{\n\t\t\tvar PeakIndex = PixelToPeakMap[x][0];\n\t\t\tif( PeakIndex == null )\n\t\t\t\tfor( var i=1; i < pixelTolerance; ++i )\n\t\t\t\t{\n\t\t\t\t\tPeakIndex = PixelToPeakMap[x+i][0];\n\t\t\t\t\tif( PeakIndex != null )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tPeakIndex = PixelToPeakMap[x-i][0];\n\t\t\t\t\tif( PeakIndex != null )\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t\tif( PeakIndex != null )\n\t\t\treturn Peaks[PeakIndex];\n\t\telse\n\t\t\treturn null;\n\t}\n\n\tfunction GetPeakNearMz(mz, mzTolerance, preferIntensity)\n\t{\n\t\tvar bestPeak = null;\n\t\tvar lowMzLimit = mz - mzTolerance;\n\t\tvar highMzLimit = mz + mzTolerance;\n\t\tvar lowPixel = MzToPixel(lowMzLimit);\n\t\tvar highPixel = MzToPixel(highMzLimit);\n\t\tif( lowPixel < LeftMargin || highPixel > FullWidth-RightMargin )\n\t\t\treturn null;\n\t\tif( preferIntensity != null && preferIntensity == true )\n\t\t{\n\t\t\tvar bestIntensity = 0;\n\t\t\tfor( var x = lowPixel; x <= highPixel; ++x )\n\t\t\t\tif( PixelToPeakMap[x][0] != null &&\n\t\t\t\t    Peaks[ PixelToPeakMap[x][0] ][1] > bestIntensity &&\n\t\t\t\t    Math.abs( Peaks[ PixelToPeakMap[x][0] ][0] - mz ) <= mzTolerance )\n\t\t\t\t{\n\t\t\t\t\tbestPeak = Peaks[ PixelToPeakMap[x][0] ];\n\t\t\t\t\tbestIntensity = Peaks[ PixelToPeakMap[x][0] ][1];\n\t\t\t\t}\n\t\t} else\n\t\t{\n\t\t\tvar bestMzError = mzTolerance;\n\t\t\tfor( var x = lowPixel; x <= highPixel; ++x )\n\t\t\t\tfor( var i = 0; i < PixelToPeakMap[x].length; ++i )\n\t\t\t\t\tif( PixelToPeakMap[x][i] != null &&\n\t\t\t\t\t    Math.abs( Peaks[ PixelToPeakMap[x][i] ][0] - mz ) < bestMzError )\n\t\t\t\t\t{\n\t\t\t\t\t\tbestPeak = Peaks[ PixelToPeakMap[x][i] ];\n\t\t\t\t\t\tbestMzError = Math.abs( Peaks[ PixelToPeakMap[x][i] ][0] - mz );\n\t\t\t\t\t}\n\t\t\tif( bestMzError > mzTolerance )\n\t\t\t\tbestPeak = null;\n\t\t}\n\t\treturn bestPeak;\n\t}\n\n\tfunction Init(evt)\n\t{\n\t\tSVGDocument = evt.target.ownerDocument;\n\t\tSVGRoot = SVGDocument.documentElement;\n\t\tSVGRoot.addEventListener( 'keypress', HandleKeypress, false );\n\t\tmyMapApp = new mapApp(false,Resize);\n\t\tmyMapApp.resizeTimer = new Timer(myMapApp);\n\t\tmyMapApp.DoResize = DoResize;\n\t\tmyMapApp.DelayInit = DelayInit;\n\n\t\tif( NumPeaks > 0 )\n\t\t{\n\t\t\tif( PrecursorMz == 0 )\n\t\t\t\tLoMZ = Peaks[0][0];\n\t\t\telse\n\t\t\t\tLoMZ = Peaks[1][0];\n\t\t\tHiMZ = Peaks[Peaks.length-1][0];\n\t\t} else\n\t\t{\n\t\t\tLoMZ = 0;\n\t\t\tHiMZ = 1000;\n\t\t}\n\t\tZoomLevels[0] = [ LoMZ, HiMZ ];\n\n\t\tIntensityRankFilter = Peaks.length;\n\t\tIntensityFilter = Peaks[PeaksByIntensity[PeaksByIntensity.length-1]-1][1];\n\n\t\tfor( var i=0; i < NumPeaks; ++i )\n\t\t\tif( Peaks[i][2] == null )\n\t\t\t\tPeaks[i][2] = new Object;\n\n\t\tvar SVGArgs = window.location.toString().split('?');\n\t\tif( SVGArgs.length > 1 )\n\t\t{\n\t\t\tSVGArgs = SVGArgs[1].split('&');\n\t\t\tfor( var i=0; i < SVGArgs.length; ++i )\n\t\t\t{\n\t\t\t\tvar KeyValuePair = SVGArgs[i].split('=');\n\t\t\t\tif( KeyValuePair[0] == \"LoMZ\" )\n\t\t\t\t\tLoMZ = parseFloat(KeyValuePair[1]);\n\t\t\t\telse if( KeyValuePair[0] == \"HiMZ\" )\n\t\t\t\t\tHiMZ = parseFloat(KeyValuePair[1]);\n\t\t\t}\n\n\t\t\tif( LoMZ != ZoomLevels[0][0] || HiMZ != ZoomLevels[0][1] )\n\t\t\t\tZoomLevels[1] = [ LoMZ, HiMZ ];\n\t\t}\n\n\t\tGrabPoint = SVGRoot.createSVGPoint();\n\t\tDragPoint = SVGRoot.createSVGPoint();\n\t\tLastDragPoint = SVGRoot.createSVGPoint();\n\n\t\tResidueMassToNameMap[ 57.02 ] = \"G\";\n\t\tResidueMassToNameMap[ 71.04 ] = \"A\";\n\t\tResidueMassToNameMap[ 87.03 ] = \"S\";\n\t\tResidueMassToNameMap[ 97.05 ] = \"P\";\n\t\tResidueMassToNameMap[ 99.07 ] = \"V\";\n\t\tResidueMassToNameMap[ 101.05 ] = \"T\";\n\t\tResidueMassToNameMap[ 103.01 ] = \"C\";\n\t\tResidueMassToNameMap[ 113.08 ] = \"I/L\";\n\t\tResidueMassToNameMap[ 114.04 ] = \"N\";\n\t\tResidueMassToNameMap[ 115.03 ] = \"D\";\n\t\tResidueMassToNameMap[ 128.06 ] = \"Q\";\n\t\tResidueMassToNameMap[ 128.09 ] = \"K\";\n\t\tResidueMassToNameMap[ 129.04 ] = \"E\";\n\t\tResidueMassToNameMap[ 131.04 ] = \"M\";\n\t\tResidueMassToNameMap[ 137.06 ] = \"H\";\n\t\tResidueMassToNameMap[ 147.07 ] = \"F\";\n\t\tResidueMassToNameMap[ 156.10 ] = \"R\";\n\t\tResidueMassToNameMap[ 163.06 ] = \"Y\";\n\t\tResidueMassToNameMap[ 186.08 ] = \"W\";\n\n\t\tPixelWithPeak = null;\n\n\t\tGraphicsContainerElement = SVGDocument.createElementNS(SVGns, \"g\");\n\t\tInteractiveOnlyContainer = SVGDocument.createElementNS(SVGns, \"g\");\n\t\tSVGRoot.appendChild(GraphicsContainerElement);\n\n\t\tBackDrop = SVGDocument.createElementNS(SVGns, \"rect\");\n\t\tBackDrop.setAttributeNS( null, \"x\", 0 );\n\t\tBackDrop.setAttributeNS( null, \"y\", 0 );\n\t\tBackDrop.setAttributeNS( null, \"fill\", \"white\" );\n\n\t\tDebugText1 = SVGDocument.createTextNode(\"\");\n\t\tvar renderText2 = SVGDocument.createElementNS(SVGns, \"text\");\n\t\trenderText2.setAttributeNS( null, \"x\", LeftMargin );\n\t\trenderText2.setAttributeNS( null, \"y\", TopMargin+25 );\n\t\trenderText2.appendChild(DebugText1);\n\t\tInteractiveOnlyContainer.appendChild(renderText2);\n\n\t\tDebugText2 = SVGDocument.createTextNode(\"\");\n\t\tvar renderText3 = SVGDocument.createElementNS(SVGns, \"text\");\n\t\trenderText3.setAttributeNS( null, \"x\", LeftMargin );\n\t\trenderText3.setAttributeNS( null, \"y\", TopMargin+50 );\n\t\trenderText3.appendChild(DebugText2);\n\t\tInteractiveOnlyContainer.appendChild(renderText3);\n\n\t\tvar tooltipGroup = SVGDocument.createElementNS(SVGns, \"g\");\n\t\ttooltipGroup.setAttributeNS( null, \"id\", \"tooltipGroup\" );\n\t\tSVGRoot.appendChild(tooltipGroup);\n\n\t\tDeNovoOptions.group = SVGDocument.createElementNS(SVGns, \"svg\");\n\t\tDeNovoOptions.group.setAttributeNS( null, \"id\", \"DeNovoOptions\" );\n\t\tDeNovoOptions.group.setAttributeNS( null, \"overflow\", \"visible\" );\n\n\t\tDeNovoOptions.ShowComplementsLabel = SVGDocument.createElementNS(SVGns, \"text\");\n\t\tDeNovoOptions.ShowComplementsLabel.appendChild( SVGDocument.createTextNode(\"Show complement ions:\") );\n\t\tDeNovoOptions.ShowComplementsLabel.setAttributeNS( null, \"text-anchor\", \"end\" );\n\t\tDeNovoOptions.ShowComplementsLabel.setAttributeNS( null, \"x\", 274 );\n\t\tDeNovoOptions.group.appendChild( DeNovoOptions.ShowComplementsLabel );\n\t\tDeNovoOptions.ShowComplements = new checkBox(\"DeNovoOptions.ShowComplements\",DeNovoOptions.group,292,8,\"checkBoxRect\",\"checkBoxCross\",true,\"\",0,0,0,0,ApplyDeNovoOptions);\n\n\t\tDeNovoOptions.ShowTagsLabel = "
                    << "SVGDocument.createElementNS(SVGns, \"text\");\n\t\tDeNovoOptions.ShowTagsLabel.appendChild( SVGDocument.createTextNode(\"Show sequence tags:\") );\n\t\tDeNovoOptions.ShowTagsLabel.setAttributeNS( null, \"text-anchor\", \"end\" );\n\t\tDeNovoOptions.ShowTagsLabel.setAttributeNS( null, \"x\", 274 );\n\t\tDeNovoOptions.group.appendChild( DeNovoOptions.ShowTagsLabel );\n\t\tDeNovoOptions.ShowTags = new checkBox(\"DeNovoOptions.ShowTags\",DeNovoOptions.group,292,39,\"checkBoxRect\",\"checkBoxCross\",true,\"\",0,0,0,0,ApplyDeNovoOptions);\n\n\t\tDeNovoOptions.ShowIsotopesLabel = SVGDocument.createElementNS(SVGns, \"text\");\n\t\tDeNovoOptions.ShowIsotopesLabel.appendChild( SVGDocument.createTextNode(\"Show isotopic series:\") );\n\t\tDeNovoOptions.ShowIsotopesLabel.setAttributeNS( null, \"text-anchor\", \"end\" );\n\t\tDeNovoOptions.ShowIsotopesLabel.setAttributeNS( null, \"x\", 274 );\n\t\tDeNovoOptions.group.appendChild( DeNovoOptions.ShowIsotopesLabel );\n\t\tDeNovoOptions.ShowIsotopes = new checkBox(\"DeNovoOptions.ShowIsotopes\",DeNovoOptions.group,292,70,\"checkBoxRect\",\"checkBoxCross\",true,\"\",0,0,0,0,ApplyDeNovoOptions);\n\n\t\tFilterOptions.group = SVGDocument.createElementNS(SVGns, \"svg\");\n\t\tFilterOptions.group.setAttributeNS( null, \"id\", \"FilterOptions\" );\n\t\tFilterOptions.group.setAttributeNS( null, \"overflow\", \"visible\" );\n\n\t\tFilterOptions.ShowPeakMZsLabel = SVGDocument.createElementNS(SVGns, \"text\");\n\t\tFilterOptions.ShowPeakMZsLabel.appendChild( SVGDocument.createTextNode(\"ShowPeakMZs:\") );\n\t\tFilterOptions.ShowPeakMZsLabel.setAttributeNS( null, \"text-anchor\", \"end\" );\n\t\tFilterOptions.ShowPeakMZsLabel.setAttributeNS( null, \"x\", 274 );\n\t\tFilterOptions.group.appendChild( FilterOptions.ShowPeakMZsLabel );\n\t\tFilterOptions.ShowPeakMZs = new checkBox(\"FilterOptions.ShowPeakMZs\",FilterOptions.group,292,8,\"checkBoxRect\",\"checkBoxCross\",true,\"\",0,0,0,0,ApplyFilterOptions);\n\n\t\tvar textStyles = {\"font-family\":\"Arial,Helvetica\",\"font-size\":16,\"fill\":\"black\"};\n\t\tvar boxStyles = {\"fill\":\"white\",\"stroke\":\"black\",\"stroke-width\":1.5};\n\t\tvar cursorStyles = {\"stroke\":\"red\",\"stroke-width\":1.5};\n\t\tvar selBoxStyles = {\"fill\":\"blue\",\"opacity\":0.5};\n\t\tFilterOptions.MaxPeakCountLabel = SVGDocument.createElementNS(SVGns, \"text\");\n\t\tFilterOptions.MaxPeakCountLabel.appendChild( SVGDocument.createTextNode(\"MaxPeakCount:\") );\n\t\tFilterOptions.MaxPeakCountLabel.setAttributeNS( null, \"text-anchor\", \"end\" );\n\t\tFilterOptions.MaxPeakCountLabel.setAttributeNS( null, \"x\", 230 );\n\t\tFilterOptions.group.appendChild( FilterOptions.MaxPeakCountLabel );\n\t\tFilterOptions.MaxPeakCount = new textbox(\"FilterOptions.MaxPeakCount\",FilterOptions.group,NumPeaks-1,6,240,26,60,25,20,textStyles,boxStyles,cursorStyles,selBoxStyles,\"[0-9]\", ApplyFilterOptions);\n\n\t\tFilterOptions.MinPeakIntensityLabel = SVGDocument.createElementNS(SVGns, \"text\");\n\t\tFilterOptions.MinPeakIntensityLabel.appendChild( SVGDocument.createTextNode(\"MinPeakIntensity:\") );\n\t\tFilterOptions.MinPeakIntensityLabel.setAttributeNS( null, \"text-anchor\", \"end\" );\n\t\tFilterOptions.MinPeakIntensityLabel.setAttributeNS( null, \"x\", 200 );\n\t\tFilterOptions.group.appendChild( FilterOptions.MinPeakIntensityLabel );\n\t\tvar LeastIntensePeak = Peaks[PeaksByIntensity[PeaksByIntensity.length-1]-1];\n\t\tFilterOptions.MinPeakIntensity = new textbox(\"FilterOptions.MinPeakIntensity\",FilterOptions.group,LeastIntensePeak[1],9,210,61,90,25,20,textStyles,boxStyles,cursorStyles,selBoxStyles,\"[0-9.]\", ApplyFilterOptions);\n\n\t\tmyMapApp.resizeTimer.setTimeout(\"DelayInit\", 100);\n\t}\n\n\tfunction DelayInit()\n\t{\n\t\tvar testLabelText = SVGDocument.createTextNode(\"\");\n\t\tvar testLabel = SVGDocument.createElementNS(SVGns, \"text\");\n\t\ttestLabel.appendChild(testLabelText);\n\t\ttestLabel.setAttributeNS(null, \"x\", 0);\n\t\ttestLabel.setAttributeNS(null, \"y\", 0);\n\t\tfor( var property in LabelOptions.styles )\n\t\t\ttestLabel.setAttributeNS(null, property, LabelOptions.styles[property]);\n\t\tSVGRoot.appendChild(testLabel);\n\t\tLabelOptions.MaxCharHeight = 0;\n\t\tLabelOptions.MaxCharWidth = 0;\n\t\tfor( var c=0; c < 10; ++c )\n\t\t{\n\t\t\ttestLabelText.data = \"\";\n\t\t\tfor( var i=0; i < 10; ++i )\n\t\t\t\ttestLabelText.data += c;\n\t\t\tvar extent = testLabel.getBBox();\n\t\t\tLabelOptions.MaxCharHeight = Math.max( LabelOptions.MaxCharHeight, extent.height );\n\t\t\tLabelOptions.MaxCharWidth = Math.max( LabelOptions.MaxCharWidth, extent.width / testLabelText.data.length );\n\t\t}\n\t\tLabelOptions.MaxCharHeight = Math.ceil( LabelOptions.MaxCharHeight );\n\t\tLabelOptions.MaxCharWidth = Math.ceil( LabelOptions.MaxCharWidth );\n\t\t//alert(LabelOptions.MaxCharHeight + \" \" + LabelOptions.MaxCharWidth);\n\t\tSVGRoot.removeChild(testLabel);\n\n\t\tSVGRoot.appendChild(DeNovoOptions.group);\n\t\tDeNovoOptions.ShowComplementsLabel.setAttributeNS( null, \"y\", (DeNovoOptions.ShowComplementsLabel.getBBox().height+16)/2-2 );\n\t\tDeNovoOptions.ShowTagsLabel.setAttributeNS( null, \"y\", 29+(DeNovoOptions.ShowTagsLabel.getBBox().height+16)/2 );\n\t\tDeNovoOptions.ShowIsotopesLabel.setAttributeNS( null, \"y\", 58+(DeNovoOptions.ShowTagsLabel.getBBox().height+16)/2+2 );\n\t\tSVGRoot.removeChild(DeNovoOptions.group);\n\n\t\tSVGRoot.appendChild(FilterOptions.group);\n\t\tFilterOptions.ShowPeakMZsLabel.setAttributeNS( null, \"y\", (FilterOptions.ShowPeakMZsLabel.getBBox().height+16)/2 );\n\t\tFilterOptions.MaxPeakCountLabel.setAttributeNS( null, \"y\", 26+(FilterOptions.MaxPeakCountLabel.getBBox().height+25)/2 );\n\t\tFilterOptions.MinPeakIntensityLabel.setAttributeNS( null, \"y\", 61+(FilterOptions.MinPeakIntensityLabel.getBBox().height+25)/2 );\n\t\tSVGRoot.removeChild(FilterOptions.group);\n\n\t\tDraw();\n\t\tvar tooltipTextStyles = {\"font-family\":\"Arial,Helvetica\",\"fill\":\"black\",\"font-size\":12};\n\t\tvar tooltipRectStyles = {\"fill\":\"LightYellow\",\"stroke\":\"black\"};\n\t\tmyMapApp.initTooltips(\"tooltipGroup\",tooltipTextStyles,tooltipRectStyles,3,30,3);\n\t\tmyMapApp.addTooltip(\"UndoZoomTool\",\"Undo zoom\",true,false,\"currentTarget\",undefined);\n\t\tmyMapApp.addTooltip(\"ZoomTool\",\"Zoom\",true,false,\"currentTarget\",undefined);\n\t\tmyMapApp.addTooltip(\"DeNovoTool\",\"De novo\",true,false,\"currentTarget\",undefined);\n\t\tmyMapApp.addTooltip(\"GrabViewTool\",\"Grab/Scroll view\",true,false,\"currentTarget\",undefined);\n\t\tmyMapApp.addTooltip(\"OptionsTool\",\"Change display options\",true,false,\"currentTarget\",undefined);\n\t\tmyMapApp.addTooltip(\"PrintTool\",\"Print\",true,false,\"currentTarget\",undefined);\n\t}\n\n\tfunction UndoZoom()\n\t{\n\t\tif( ZoomLevels.length > 1 )\n\t\t{\n\t\t\tLoMZ = ZoomLevels[ ZoomLevels.length-2 ][0];\n\t\t\tHiMZ = ZoomLevels[ ZoomLevels.length-2 ][1];\n\t\t\t--ZoomLevels.length;\n\t\t\t//window.location.replace(window.location.href.split('?')[0]+\"?LoMZ=\"+LoMZ+\"&HiMZ=\"+HiMZ);\n\t\t\tPixelWithPeak = null;\n\t\t\tGrabPixelWithPeak = null;\n\t\t\tDraw();\n\t\t}\n\t}\n\n\tfunction Grab(evt)\n\t{\n\t\tif( !BackDrop.hasFocus )\n\t\t\treturn;\n\t\t//evt.preventDefault();\n\t\tif( evt.button == 0 )\n\t\t{\n\t\t\tGrabPoint.x = evt.clientX;\n\t\t\tGrabPoint.y = evt.clientY;\n\t\t\tDragPoint.x = GrabPoint.x;\n\t\t\tDragPoint.y = GrabPoint.y;\n\n\t\t\tif( SelectedTool == GrabViewTool )\n\t\t\t{\n\t\t\t\tGrabViewOn = true;\n\t\t\t\tmyMapApp.GrabViewTimerRunning = null;\n\t\t\t\treturn;\n\t\t\t} else if( SelectedTool == DeNovoTool && PixelWithPeak != null )\n\t\t\t\tGrabPixelWithPeak = PixelWithPeak;\n\n\t\t\tDragLine = SVGDocument.createElementNS(SVGns, \"line\");\n\t\t\tDragLine.setAttributeNS( null, \"stroke\", \"black\" );\n\t\t\tDragLine.setAttributeNS( null, \"x1\", GrabPoint.x );\n\t\t\tDragLine.setAttributeNS( null, \"y1\", GrabPoint.y );\n\t\t\tDragLine.setAttributeNS( null, \"x2\", GrabPoint.x );\n\t\t\tDragLine.setAttributeNS( null, \"y2\", GrabPoint.y );\n\t\t\tGraphicsContainerElement.appendChild(DragLine);\n\n\t\t} else if( evt.button == 1 )\n\t\t{\n\t\t\tUndoZoom();\n\t\t}\n\t}\n\n\tfunction HighlightPeak(peak)\n\t{\n\t\tpeak.peakNode.setAttributeNS( null, \"stroke\", \"black\" );\n\t\tif( peak.width != null )\n\t\t\tpeak.peakNode.setAttributeNS( null, \"stroke-width\", peak.width+1 );\n\t\telse\n\t\t\tpeak.peakNode.setAttributeNS( null, \"stroke-width\", 2 );\n\t\tif( peak.labelNode != null )\n\t\t\tpeak.labelNode.setAttributeNS( null, \"fill\", \"black\" );\n\t}\n\n\tfunction UnhighlightPeak(peak)\n\t{\n\t\tpeak.peakNode.setAttributeNS( null, \"stroke\", peak.color );\n\t\tif( peak.width != null )\n\t\t\tpeak.peakNode.setAttributeNS( null, \"stroke-width\", peak.width );\n\t\telse\n\t\t\tpeak.peakNode.setAttributeNS( null, \"stroke-width\", 1 );\n\t\tif( peak.labelNode != null )\n\t\t\tpeak.labelNode.setAttributeNS( null, \"fill\", peak.color );\n\t}\n\n\tfunction DoGrabView()\n\t{\n\t\tif( GrabViewOn && Math.abs(GrabViewCount) > 3 )\n\t\t{\n\t\t\tvar MZrange = HiMZ - LoMZ;\n\t\t\tfor( var div=10000; div > 0.0001; div /= 10 ) { if( MZrange / div >= 10 ) break; }\n\t\t\tvar GrabViewSpeed = div / LabelToMajorTickRatio;\n\t\t\tif( GrabViewCount < 0 )\n\t\t\t{\n\t\t\t\tLoMZ -= GrabViewSpeed;\n\t\t\t\tHiMZ -= GrabViewSpeed;\n\t\t\t} else\n\t\t\t{\n\t\t\t\tLoMZ += GrabViewSpeed;\n\t\t\t\tHiMZ += GrabViewSpeed;\n\t\t\t}\n\t\t\tDraw();\n\t\t\tDragLine = SVGDocument.createElementNS(SVGns, \"line\");\n\t\t\tGraphicsContainerElement.appendChild(DragLine);\n\t\t\tDragLine.setAttributeNS( null, \"stroke\", \"black\" );\n\t\t\tDragLine.setAttributeNS( null, \"x1\", GrabPoint.x );\n\t\t\tDragLine.setAttributeNS( null, \"y1\", GrabPoint.y );\n\t\t\tDragLine.setAttributeNS( null, \"y2\", GrabPoint.y );\n\t\t\tDragLine.setAttributeNS( null, \"x2\", DragPoint.x );\n\t\t\tmyMapApp.resizeTimer.setTimeout(\"DoGrabView\", myMapApp.GrabViewSpeed);\n\t\t} else\n\t\t\tmyMapApp.GrabViewTimerRunning = null;\n\t}\n\n\tfunction Drag(evt)\n\t{\n\t\tLastDragPoint.x = DragPoint.x;\n\t\tDragPoint.x = evt.clientX;\n\t\tDragPoint.y = evt.clientY;\n\n\t\tif( SelectedTool == GrabViewTool && GrabViewOn )\n\t\t{\n\t\t\tGrabViewCount = DragPoint.x - GrabPoint.x;\n\t\t\tvar GrabWidth = round( Math.abs( GrabViewCount ) / FullWidth * 100, 0 );\n\t\t\tif( GrabWidth < 5 )\n\t\t\t\tmyMapApp.GrabViewSpeed = 500;\n\t\t\telse if( GrabWidth < 10 )\n\t\t\t\tmyMapApp.GrabViewSpeed = 300;\n\t\t\telse if( GrabWidth < 20 )\n\t\t\t\tmyMapApp.GrabViewSpeed = 200;\n\t\t\telse if( GrabWidth < 40 )\n\t\t\t\tmyMapApp.GrabViewSpeed = 100;\n\t\t\telse if( GrabWidth < 60 )\n\t\t\t\tmyMapApp.GrabViewSpeed = 35;\n\t\t\telse if( GrabWidth < 80 )\n\t\t\t\tmyMapApp.GrabViewSpeed = 20;\n\t\t\telse\n\t\t\t\tmyMapApp.GrabViewSpeed = 10;\n\t\t\tmyMapApp.DoGrabView = DoGrabView;\n\t\t\tif( DragLine == null )\n\t\t\t{\n\t\t\t\tDragLine = SVGDocument.createElementNS(SVGns, \"line\");\n\t\t\t\tGraphicsContainerElement.appendChild(DragLine);\n\t\t\t\tDragLine.setAttributeNS( null, \"stroke\", \"black\" );\n\t\t\t\tDragLine.setAttributeNS( null, \"x1\", GrabPoint.x );\n\t\t\t\tDragLine.setAttributeNS( null, \"y1\", GrabPoint.y );\n\t\t\t\tDragLine.setAttributeNS( null, \"y2\", GrabPoint.y );\n\t\t\t}\n\t\t\tDragLine.setAttributeNS( null, \"x2\", DragPoint.x );\n\t\t\tif( myMapApp.GrabViewTimerRunning == null )\n\t\t\t{\n\t\t\t\tmyMapApp.GrabViewTimerRunning = true;\n\t\t\t\tmyMapApp.resizeTimer.setTimeout(\"DoGrabView\", 10);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// highlight peak under mouse\n\t\tif( SelectedTool == ZoomTool && DragLine == null ||\n\t\t    SelectedTool == DeNovoTool ||\n\t\t    SelectedTool == FilterTool )\n\t\t{\n\t\t\tvar NewPixelWithPeak = GetPeakNearPixel( DragPoint.x, 2, true );\n\t\t\tif( NewPixelWithPeak != null )\n\t\t\t\tNewPixelWithPeak = NewPixelWithPeak[2].pixel;\n\n\t\t\t// was on peak, now on same peak: do nothing\n\t\t\tif( !(PixelWithPeak != null && NewPixelWithPeak != null && PixelWithPeak == NewPixelWithPeak) )\n\t\t\t{\n\t\t\t\t// now on a peak\n\t\t\t\tif( NewPixelWithPeak != null )\n\t\t\t\t{\n\t\t\t\t\t// was on a peak\n\t\t\t\t\tfor( var i=0; i < HighlightedPixels.length; ++i )\n\t\t\t\t\t\tif( HighlightedPixels[i] != GrabPixelWithPeak )\n\t\t\t\t\t\t\tUnhighlightPeak( Peaks[ PixelToPeakMap[HighlightedPixels[i]][0] ][2] );\n\t\n\t\t\t\t\tHighlightedPixels.length = 0;\n\t\t\t\t\tif( GrabPixelWithPeak != null )\n\t\t\t\t\t\tHighlightedPixels.push(GrabPixelWithPeak);\n\n\t\t\t\t\tPixelWithPeak = NewPixelWithPeak;\n\t\t\t\t\tvar CurPeakIndex = PixelToPeakMap[ PixelWithPeak ][0];\n\t\t\t\t\tHighlightPeak( Peaks[CurPeakIndex][2] );\n\t\t\t\t\tHighlightedPixels.push(PixelWithPeak);\n\t\t\t\t\tif( Peaks[CurPeakIndex][2].labelNode != null )\n\t\t\t\t\t\tPeaks[CurPeakIndex][2].labelNode.setAttributeNS( null, \"fill\", \"black\" );\n\t\t\t\t\tDebugText1.data = \"Observed peak: m/z=\" + Peaks[CurPeakIndex][0] + \"  intensity=\" + Peaks[CurPeakIndex][1];\n\t\t\t\t\tif( Peaks[CurPeakIndex][2].label != null )\n\t\t\t\t\t\tDebugText1.data += \"  (\" + Peaks[CurPeakIndex][2].label + \")\";\n\t\t\t\t\tDebugText2.data = \"\";\n\n\t\t\t\t\tif( SelectedTool == DeNovoTool )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( DeNovoOptions.ShowComplements.checkedStatus )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( ComplementArcList.length > 0 )\n\t\t\t\t\t\t\t\tfor( var i=0; i < ComplementArcList.length; ++i )\n\t\t\t\t\t\t\t\t\tInteractiveOnlyContainer.removeChild( ComplementArcList[i] );\n\t\t\t\t\t\t\tComplementArcList.length = 0;\n\t\t\t\t\t\t\tfor( var z=1; z <= NumFragmentChargeStates; ++z )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar ComplementPeakMz = CalculateComplementMz( Peaks[CurPeakIndex][0], z );\n\t\t\t\t\t\t\t\tvar ComplementPeak = GetPeakNearMz( ComplementPeakMz, FragmentMzTolerance, true );\n\t\t\t\t\t\t\t\tif( ComplementPeak != null )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tHighlightPeak( ComplementPeak[2] );\n\t\t\t\t\t\t\t\t\tHighlightedPixels.push( ComplementPeak[2].pixel );\n\t\t\t\t\t\t\t\t\tDebugText1.data += \"  (as +\" + z + \" fragment: +\" + (PrecursorCharge-z) + \" complement at \" + ComplementPeak[0];\n\t\t\t\t\t\t\t\t\tif( ComplementPeak[2].label != null "
                    << ")\n\t\t\t\t\t\t\t\t\t\tDebugText1.data += \" \" + ComplementPeak[2].label;\n\t\t\t\t\t\t\t\t\tDebugText1.data += \")\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar newComplementArc = MakeArcBetween( PixelWithPeak, MzToPixel( ComplementPeakMz ), BaseLine+1, 61 );\n\t\t\t\t\t\t\t\tComplementArcList.push(newComplementArc);\n\t\t\t\t\t\t\t\tInteractiveOnlyContainer.appendChild(newComplementArc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( DeNovoOptions.ShowTags.checkedStatus )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( TagArcList.length > 0 )\n\t\t\t\t\t\t\t\tfor( var i=0; i < TagArcList.length; ++i )\n\t\t\t\t\t\t\t\t\tInteractiveOnlyContainer.removeChild( TagArcList[i] );\n\t\t\t\t\t\t\tTagArcList.length = 0;\n\t\t\t\t\t\t\tvar tagCount;\n\t\t\t\t\t\t\tDebugText2.data += \"# of tags generated:\";\n\t\t\t\t\t\t\tfor( var z=1; z <= NumFragmentChargeStates; ++z )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttagCount = 0;\n\t\t\t\t\t\t\t\tfor( var r in ResidueMassToNameMap )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar r_mass = parseFloat(r);\n\t\t\t\t\t\t\t\t\tvar r_name = ResidueMassToNameMap[r];\n\t\t\n\t\t\t\t\t\t\t\t\tvar NextPeakMz = Peaks[CurPeakIndex][0] + r_mass/z;\n\t\t\t\t\t\t\t\t\tvar NextPeak = GetPeakNearMz( NextPeakMz, FragmentMzTolerance, true );\n\t\t\t\t\t\t\t\t\tif( NextPeak != null )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor( var r2 in ResidueMassToNameMap )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar r2_mass = parseFloat(r2);\n\t\t\t\t\t\t\t\t\t\t\tvar r2_name = ResidueMassToNameMap[r2];\n\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tvar NextPeakMz2 = NextPeakMz + r2_mass/z;\n\t\t\t\t\t\t\t\t\t\t\tvar NextPeak2 = GetPeakNearMz( NextPeakMz2, FragmentMzTolerance, true );\n\t\t\t\t\t\t\t\t\t\t\tif( NextPeak2 != null )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tfor( var r3 in ResidueMassToNameMap )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar r3_mass = parseFloat(r3);\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar r3_name = ResidueMassToNameMap[r3];\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar NextPeakMz3 = NextPeakMz2 + r3_mass/z;\n\t\t\t\t\t\t\t\t\t\t\t\t\tvar NextPeak3 = GetPeakNearMz( NextPeakMz3, FragmentMzTolerance, true );\n\t\t\t\t\t\t\t\t\t\t\t\t\tif( NextPeak3 != null )\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t++tagCount;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar intensity = Peaks[CurPeakIndex][1] * NextPeak[1] * NextPeak2[1] * NextPeak3[1];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHighlightPeak( NextPeak[2] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHighlightedPixels.push( NextPeak[2].pixel );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar newTagArc = MakeArcBetween( PixelWithPeak, MzToPixel( NextPeakMz ), BaseLine+1, 61, {width:1,color:\"red\",opacity:\"100\"} );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTagArcList.push(newTagArc);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tInteractiveOnlyContainer.appendChild(newTagArc);\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHighlightPeak( NextPeak2[2] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHighlightedPixels.push( NextPeak2[2].pixel );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTagArc = MakeArcBetween( MzToPixel(NextPeakMz), MzToPixel(NextPeakMz2), BaseLine+1, 41, {width:1,color:\"orange\",opacity:\"75\"} );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTagArcList.push(newTagArc);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tInteractiveOnlyContainer.appendChild(newTagArc);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHighlightPeak( NextPeak3[2] );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tHighlightedPixels.push( NextPeak3[2].pixel );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnewTagArc = MakeArcBetween( MzToPixel(NextPeakMz2), MzToPixel(NextPeakMz3), BaseLine+1, 21, {width:1,color:\"yellow\",opacity:\"50\"} );\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTagArcList.push(newTagArc);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tInteractiveOnlyContainer.appendChild(newTagArc);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif( tagCount == MaxTagCount )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tif( tagCount == MaxTagCount )\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif( tagCount == MaxTagCount )\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDebugText2.data += \" (at z=\" + z + \": \" + tagCount + \")\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( DeNovoOptions.ShowIsotopes.checkedStatus )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( IsotopeArcList.length > 0 )\n\t\t\t\t\t\t\t\tfor( var i=0; i < IsotopeArcList.length; ++i )\n\t\t\t\t\t\t\t\t\tInteractiveOnlyContainer.removeChild( IsotopeArcList[i] );\n\t\t\t\t\t\t\tIsotopeArcList.length = 0;\n\t\t\t\t\t\t\tvar isotopeCount;\n\t\t\t\t\t\t\tDebugText2.data += \" - - - # of isotopes:\";\n\t\t\t\t\t\t\tfor( var z=1; z <= NumFragmentChargeStates; ++z )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar isotopePeakList = [ Peaks[CurPeakIndex] ];\n\t\t\t\t\t\t\t\tisotopeCount = 0;\n\t\t\t\t\t\t\t\tfor( var i=0; i < MaxIsotopeCount; ++i )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar NextPeakMz = isotopePeakList[isotopePeakList.length-1][0] + PROTON/z;\n\t\t\t\t\t\t\t\t\tvar NextPeak = GetPeakNearMz( NextPeakMz, IsotopeMzTolerance, false );\n\t\t\t\t\t\t\t\t\tif( NextPeak == null )\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tisotopePeakList.push(NextPeak);\n\t\t\t\t\t\t\t\t\t++isotopeCount;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor( var i=1; i < isotopePeakList.length; ++i )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar CurPeak = isotopePeakList[i-1];\n\t\t\t\t\t\t\t\t\tvar NextPeak = isotopePeakList[i];\n\t\t\t\t\t\t\t\t\tif( NextPeak[2].peakNode == null )\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tHighlightPeak( NextPeak[2] );\n\t\t\t\t\t\t\t\t\tHighlightedPixels.push( NextPeak[2].pixel );\n\t\t\t\t\t\t\t\t\tvar newIsotopeArc = MakeArcBetween( CurPeak[2].pixel, NextPeak[2].pixel, BaseLine+1, 41, {width:1,color:\"green\"} );\n\t\t\t\t\t\t\t\t\tIsotopeArcList.push(newIsotopeArc);\n\t\t\t\t\t\t\t\t\tInteractiveOnlyContainer.appendChild(newIsotopeArc);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tDebugText2.data += \" (at z=\" + z + \": \" + isotopeCount + \")\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSVGRoot.forceRedraw();\n\t\t\t\t}\n\t\t\t\t// not on a peak now\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// was on a peak\n\t\t\t\t\tfor( var i=0; i < HighlightedPixels.length; ++i )\n\t\t\t\t\t\tif( HighlightedPixels[i] != GrabPixelWithPeak )\n\t\t\t\t\t\t\tUnhighlightPeak( Peaks[PixelToPeakMap[HighlightedPixels[i]][0]][2] );\n\t\t\t\t\tHighlightedPixels.length = 0;\n\t\t\t\t\tif( GrabPixelWithPeak != null )\n\t\t\t\t\t\tHighlightedPixels.push(GrabPixelWithPeak);\n\n\t\t\t\t\tPixelWithPeak = null;\n\t\t\t\t\tvar CurMZ = PixelToMz(DragPoint.x);\n\t\t\t\t\tCurMZ = round( CurMZ, 3 );\n\t\t\t\t\t//DebugText1.data = \"Cursor at: (\" + DragPoint.x + \",\" + DragPoint.y + \")\";\n\t\t\t\t\t//DebugText1.data = \"Cursor at m/z: \" + CurMZ;\n\t\t\t\t\t//DebugText2.data = \"\";\n\t\t\t\t\tSVGRoot.forceRedraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// draw drag line\n\t\tif( DragLine != null )\n\t\t{\n\t\t\tDragLine.setAttributeNS( null, \"x2\", DragPoint.x );\n\t\t\t// ignore the change in y\n\t\t\t//DragLine.setAttributeNS( null, \"y2\", DragPoint.y );\n\n\t\t\tvar CurLoMZ;\n\t\t\tvar CurHiMZ;\n\t\t\tif( DragPoint.x < GrabPoint.x )\n\t\t\t{\n\t\t\t\tCurLoMZ = PixelToMz(DragPoint.x);\n\t\t\t\tCurHiMZ = PixelToMz(GrabPoint.x);\n\t\t\t} else\n\t\t\t{\n\t\t\t\tCurLoMZ = PixelToMz(GrabPoint.x);\n\t\t\t\tCurHiMZ = PixelToMz(DragPoint.x);\n\t\t\t}\n\n\t\t\tCurLoMZ = round( CurLoMZ, 3 );\n\t\t\tCurHiMZ = round( CurHiMZ, 3 );\n\n\t\t\tif( GrabPixelWithPeak && PixelWithPeak )\n\t\t\t{\n\t\t\t\tvar LeftPeak;\n\t\t\t\tvar RightPeak;\n\t\t\t\tif( DragPoint.x < GrabPoint.x )\n\t\t\t\t{\n\t\t\t\t\tLeftPeak = PixelWithPeak;\n\t\t\t\t\tRightPeak = GrabPixelWithPeak;\n\t\t\t\t} else\n\t\t\t\t{\n\t\t\t\t\tLeftPeak = GrabPixelWithPeak;\n\t\t\t\t\tRightPeak = PixelWithPeak;\n\t\t\t\t}\n\t\t\t\tvar LeftPeakIndex = PixelToPeakMap[ LeftPeak ][0];\n\t\t\t\tvar RightPeakIndex = PixelToPeakMap[ RightPeak ][0];\n\t\t\t\tvar GapWidth = round( Peaks[ RightPeakIndex ][0] - Peaks[ LeftPeakIndex ][0], 3 );\n\t\t\t\tDebugText1.data = \"Left peak m/z: \" + Peaks[ LeftPeakIndex ][0] + \"   Right peak m/z: \" + Peaks[ RightPeakIndex ][0] + \"   Difference is: \" + GapWidth;\n\t\t\t\tDebugText2.data = \"\";\n\n\t\t\t\tfor( var z=1; z <= NumChargeStates; ++z )\n\t\t\t\t{\n\t\t\t\t\tvar GapResidue = GetResidueByMass( GapWidth*z, FragmentMzTolerance );\n\t\t\t\t\tif( GapResidue )\n\t\t\t\t\t\tDebugText1.data += \" (at z=\" + z + \": approx. mass of \" + GapResidue + \")\";\n\t\t\t\t}\n\t\t\t} else\n\t\t\t{\n\t\t\t\t//DebugText1.data = \"Grabbed at: (\" + GrabPoint.x + \",\" + GrabPoint.y + \")\" + \"   Dragged to: (\" + DragPoint.x + \",\" + DragPoint.y + \")\"\n\t\t\t\tDebugText1.data = \"Grabbed at: \" + CurLoMZ + \"   Dragged to: \" + CurHiMZ + \"   Difference is: \" + round( CurHiMZ - CurLoMZ, 3 );\n\t\t\t\tDebugText2.data = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction Drop(evt)\n\t{\n\t\tif( !BackDrop.hasFocus )\n\t\t\treturn;\n\t\t//evt.preventDefault();\n\t\tif( GrabViewOn )\n\t\t{\n\t\t\tGrabViewOn = false;\n\t\t\tif( DragLine )\n\t\t\t{\n\t\t\t\tGraphicsContainerElement.removeChild( DragLine );\n\t\t\t\tDragLine = null;\n\t\t\t}\n\t\t\tDraw();\n\t\t\treturn;\n\t\t}\n\n\t\tif( DragLine )\n\t\t{\n\t\t\tGraphicsContainerElement.removeChild( DragLine );\n\t\t\tDragLine = null;\n\n\t\t\tif( SelectedTool == ZoomTool && Math.abs( DragPoint.x - GrabPoint.x ) > 2 )\n\t\t\t{\n\t\t\t\tvar MZrange = HiMZ - LoMZ;\n\t\t\t\tfor( var div=10000; div > 0.0001; div /= 10 ) { if( MZrange / div >= 10 ) break; }\n\n\t\t\t\tif( DragPoint.x < GrabPoint.x )\n\t\t\t\t{\n\t\t\t\t\tHiMZ = (GrabPoint.x - LeftMargin) / Xscaling + LoMZ;\n\t\t\t\t\tLoMZ = (DragPoint.x - LeftMargin) / Xscaling + LoMZ;\n\t\t\t\t} else\n\t\t\t\t{\n\t\t\t\t\tHiMZ = (DragPoint.x - LeftMargin) / Xscaling + LoMZ;\n\t\t\t\t\tLoMZ = (GrabPoint.x - LeftMargin) / Xscaling + LoMZ;\n\t\t\t\t}\n\n\t\t\t\tLoMZ = Math.floor( LoMZ / div ) * div;\n\t\t\t\tHiMZ = Math.ceil( HiMZ / div ) * div;\n\t\t\t\t//window.location.replace(window.location.href.split('?')[0]+\"?LoMZ=\"+LoMZ+\"&HiMZ=\"+HiMZ);\n\t\t\t\tZoomLevels[ ZoomLevels.length ] = [ LoMZ, HiMZ ];\n\t\t\t\tif( LoMZ < HiMZ )\n\t\t\t\t\tDraw();\n\t\t\t}\n\t\t\tif( SelectedTool == DeNovoTool )\n\t\t\t{\n\t\t\t\tif( PixelWithPeak != null )\n\t\t\t\t{\n\t\t\t\t\tvar OldPeakIndex = PixelToPeakMap[ PixelWithPeak ][0];\n\t\t\t\t\tPeaks[OldPeakIndex][2].peakNode.setAttributeNS( null, \"stroke\", Peaks[OldPeakIndex][2].color );\n\t\t\t\t\tif( Peaks[OldPeakIndex][2].width != null )\n\t\t\t\t\t\tPeaks[OldPeakIndex][2].peakNode.setAttributeNS( null, \"stroke-width\", Peaks[OldPeakIndex][2].width );\n\t\t\t\t\telse\n\t\t\t\t\t\tPeaks[OldPeakIndex][2].peakNode.setAttributeNS( null, \"stroke-width\", 1 );\n\t\t\t\t\tif( Peaks[OldPeakIndex][2].labelNode != null )\n\t\t\t\t\t\tPeaks[OldPeakIndex][2].labelNode.setAttributeNS( null, \"fill\", Peaks[OldPeakIndex][2].color );\n\t\t\t\t}\n\n\t\t\t\tif( GrabPixelWithPeak != null )\n\t\t\t\t{\n\t\t\t\t\tvar OldPeakIndex = PixelToPeakMap[ GrabPixelWithPeak ][0];\n\t\t\t\t\tPeaks[OldPeakIndex][2].peakNode.setAttributeNS( null, \"stroke\", Peaks[OldPeakIndex][2].color );\n\t\t\t\t\tif( Peaks[OldPeakIndex][2].width != null )\n\t\t\t\t\t\tPeaks[OldPeakIndex][2].peakNode.setAttributeNS( null, \"stroke-width\", Peaks[OldPeakIndex][2].width );\n\t\t\t\t\telse\n\t\t\t\t\t\tPeaks[OldPeakIndex][2].peakNode.setAttributeNS( null, \"stroke-width\", 1 );\n\t\t\t\t\tif( Peaks[OldPeakIndex][2].labelNode != null )\n\t\t\t\t\t\tPeaks[OldPeakIndex][2].labelNode.setAttributeNS( null, \"fill\", Peaks[OldPeakIndex][2].color );\n\t\t\t\t}\n\t\t\t}\n\t\t\tPixelWithPeak = null;\n\t\t\tGrabPixelWithPeak = null;\n\t\t}\n\t}\n\n\tfunction Resize(evt)\n\t{\n\t\tmyMapApp.resizeTimer.clearTimeout();\n\t\tmyMapApp.resizeTimer.setTimeout(\"DoResize\",200);\n\t}\n\n\tfunction DoResize()\n\t{\n\t\tDraw();\n\t}\n\n\tfunction Draw()\n\t{\n\t\tInitDrawing();\n\t\tDrawTB();\n\t\tDrawAxis();\n\t\tDrawSpectrum();\n\t}\n\n\tfunction MakeArcBetween(x1, x2, y, height, styles)\n\t{\n\t\tvar strokeColor = \"black\";\n\t\tvar strokeWidth = 2;\n\t\tvar strokeOpacity = \"100%\";\n\t\tif( styles != null )\n\t\t{\n\t\t\tif( styles.color != null )\n\t\t\t\tstrokeColor = styles.color;\n\t\t\tif( styles.width != null )\n\t\t\t\tstrokeWidth = styles.width;\n\t\t\tif( styles.opacity != null )\n\t\t\t\tstrokeOpacity = styles.opacity;\n\t\t}\n\t\tvar arc = SVGDocument.createElementNS(SVGns, \"path\");\n\t\tarc.setAttributeNS( null, \"d\", \"M\"+x1+\",\"+y+\" C\"+x1+\",\"+(y+height)+\" \"+x2+\",\"+(y+height)+\" \"+x2+\",\"+y );\n\t\tarc.setAttributeNS( null, \"fill\", \"none\" );\n\t\tarc.setAttributeNS( null, \"stroke\", strokeColor );\n\t\tarc.setAttributeNS( null, \"stroke-width\", strokeWidth );\n\t\t//arc.setAttributeNS( null, \"stroke-opacity\", strokeOpacity );\n\t\treturn arc;\n\t}\n\n\tfunction InitDrawing()\n\t{\n\t\tHighlightedPixels.length = 0;\n\n\t\tvar n = GraphicsContainerElement.firstChild;\n\t\twhile( n != null )\n\t\t{\n\t\t\tvar e = n;\n\t\t\tn = n.nextSibling;\n\t\t\tGraphicsContainerElement.removeChild(e);\n\t\t}\n\n\t\tFullWidth = window.innerWidth;\n\t\tFullHeight = window.innerHeight;\n\t\tDisplayWidth = FullWidth - RightMargin - LeftMargin;\n\n\t\tfor( var i=0; i < FullWidth; ++i )\n\t\t\tPixelToPeakMap[i] = new Array;\n\n\t\tDragLine = null;\n\n\t\tBackDrop.setAttributeNS( null, \"width\", FullWidth );\n\t\tBackDrop.setAttributeNS( null, \"height\", FullHeight );\n\t\tGraphicsContainerElement.appendChild(BackDrop);\n\t\tBackDrop.hasFocus = true;\n\n\t\tDeNovoOptions.group.setAttributeNS( null, \"x\", FullWidth-RightMargin-300 );\n\t\tDeNovoOptions.group.setAttributeNS( null, \"y\", 100 );\n\n\t\tFilterOptions.group.setAttributeNS( null, \"x\", FullWidth-RightMargin-300 );\n\t\tFilterOptions.group.setAttributeNS( null, \"y\", 100 );\n\n\t\tGraphicsContainerElement.appendChild(InteractiveOnlyContainer);\n\n\t\tvar renderData1 = SVGDocument.createTextNode(\"Scan: \" + scanName);\n\t\tvar renderText1 = SVGDocument.createElementNS(SVGns, "
                    << "\"text\");\n\t\trenderText1.setAttributeNS( null, \"x\", LeftMargin );\n\t\trenderText1.setAttributeNS( null, \"y\", TopMargin );\n\t\trenderText1.appendChild(renderData1);\n\t\tGraphicsContainerElement.appendChild(renderText1);\n\t}\n\n\tfunction HandleKeypress(evt)\n\t{\n\t\tif( !BackDrop.hasFocus )\n\t\t\treturn;\n\t\tif( evt.keyCode )\n\t\t\tvar charCode = evt.keyCode;\n\t\telse\n\t\t\tvar charCode = evt.charCode;\n\t\tvar key = String.fromCharCode(charCode);\n\t\t//alert(evt.keyCode);\n\t\tif( key >= \"1\" && key <= Toolbox.tools.length )\n\t\t{\n\t\t\tevt.preventDefault();\n\t\t\tActivateTool( parseInt(key)-1 );\n\t\t}\n\t}\n\n\tfunction ApplyDeNovoOptions(id)\n\t{\n\t\tif( !DeNovoOptions.ShowComplements.checkedStatus )\n\t\t{\n\t\t\tif( ComplementArcList.length > 0 )\n\t\t\t\tfor( var i=0; i < ComplementArcList.length; ++i )\n\t\t\t\t\tInteractiveOnlyContainer.removeChild(ComplementArcList[i]);\n\t\t\tComplementArcList.length = 0;\n\t\t}\n\n\t\tif( !DeNovoOptions.ShowTags.checkedStatus )\n\t\t{\n\t\t\tif( TagArcList.length > 0 )\n\t\t\t\tfor( var i=0; i < TagArcList.length; ++i )\n\t\t\t\t\tInteractiveOnlyContainer.removeChild(TagArcList[i]);\n\t\t\tTagArcList.length = 0;\n\t\t}\n\n\t\tif( !DeNovoOptions.ShowIsotopes.checkedStatus )\n\t\t{\n\t\t\tif( IsotopeArcList.length > 0 )\n\t\t\t\tfor( var i=0; i < IsotopeArcList.length; ++i )\n\t\t\t\t\tInteractiveOnlyContainer.removeChild(IsotopeArcList[i]);\n\t\t\tIsotopeArcList.length = 0;\n\t\t}\n\t}\n\n\tfunction ApplyFilterOptions(id)\n\t{\n\t\tif( id == \"FilterOptions.ShowPeakMZs\" )\n\t\t{\n\t\t\tDraw();\n\t\t} else if( BackDrop.hasFocus )\n\t\t{\n\t\t\tvar OldIntensityRankFilter = IntensityRankFilter;\n\t\t\tvar inputValue = parseInt(FilterOptions.MaxPeakCount.getValue())+1;\n\t\t\tIntensityRankFilter = Math.min(NumPeaks-1, inputValue);\n\t\t\tif(inputValue != IntensityRankFilter)\n\t\t\t\tFilterOptions.MaxPeakCount.setValue(IntensityRankFilter);\n\n\t\t\tvar OldIntensityFilter = IntensityFilter;\n\t\t\tvar inputValue = parseFloat(FilterOptions.MinPeakIntensity.getValue());\n\t\t\tIntensityFilter = Math.max(0, inputValue);\n\t\t\tif(inputValue != IntensityFilter)\n\t\t\t\tFilterOptions.MinPeakIntensity.setValue(IntensityFilter);\n\n\t\t\tif( IntensityRankFilter != OldIntensityRankFilter || IntensityFilter != OldIntensityFilter )\n\t\t\t\tDraw();\n\t\t}\n\t}\n\n\tfunction DeactivateTool(tool)\n\t{\n\t\tswitch(tool)\n\t\t{\n\t\t\tcase GrabViewTool:\n\t\t\t\tBackDrop.style.cursor = null;\n\t\t\t\tbreak;\n\t\t\tcase PrintTool:\n\t\t\t\tGraphicsContainerElement.appendChild(InteractiveOnlyContainer);\n\t\t\t\tmyMapApp.enableTooltips();\n\t\t\t\tbreak;\n\t\t\tcase FilterTool:\n\t\t\t\tInteractiveOnlyContainer.removeChild(FilterOptions.group);\n\t\t\t\tbreak;\n\t\t\tcase DeNovoTool:\n\t\t\t\tInteractiveOnlyContainer.removeChild(DeNovoOptions.group);\n\n\t\t\t\tif( ComplementArcList.length > 0 )\n\t\t\t\t\tfor( var i=0; i < ComplementArcList.length; ++i )\n\t\t\t\t\t\tInteractiveOnlyContainer.removeChild(ComplementArcList[i]);\n\t\t\t\tComplementArcList.length = 0;\n\n\t\t\t\tif( TagArcList.length > 0 )\n\t\t\t\t\tfor( var i=0; i < TagArcList.length; ++i )\n\t\t\t\t\t\tInteractiveOnlyContainer.removeChild(TagArcList[i]);\n\t\t\t\tTagArcList.length = 0;\n\t\t\t\t\n\t\t\t\tif( IsotopeArcList.length > 0 )\n\t\t\t\t\tfor( var i=0; i < IsotopeArcList.length; ++i )\n\t\t\t\t\t\tInteractiveOnlyContainer.removeChild(IsotopeArcList[i]);\n\t\t\t\tIsotopeArcList.length = 0;\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tfunction ActivateTool(toolName)\n\t{\n\t\tvar tool = Toolbox.tools[toolName];\n\t\tif( tool != SelectedTool )\n\t\t\tDeactivateTool(SelectedTool);\n\n\t\tswitch(tool)\n\t\t{\n\t\t\tcase GrabViewTool:\n\t\t\t\tBackDrop.style.cursor = \"pointer\";\n\t\t\t\tbreak;\n\t\t\tcase FilterTool:\n\t\t\t\tInteractiveOnlyContainer.appendChild(FilterOptions.group);\n\t\t\t\tbreak;\n\t\t\tcase DeNovoTool:\n\t\t\t\tInteractiveOnlyContainer.appendChild(DeNovoOptions.group);\n\t\t}\n\n\t\tif( tool == UndoZoomTool )\n\t\t{\n\t\t\tUndoZoomTool.container.setAttributeNS( null, \"stroke\", \"red\" );\n\t\t\tUndoZoomTool.container.setAttributeNS( null, \"stroke-width\", \"3\" );\n\t\t\tSVGRoot.forceRedraw();\n\t\t\tUndoZoom();\n\t\t} else if( SelectedTool != PrintTool && tool == PrintTool )\n\t\t{\n\t\t\talert( \"To print the graph as you see it from a browser, press \\\"Print Screen\\\" on your keyboard to copy the browser graphics to the clipboard, open a simple graphics editor (like MS Paint), and paste the clipboard contents there.  You'll probably want to size the browser window so that it is the same size as you want it to be printed.  After you click OK, the toolbox and text will be hidden.  Press number 2 to return to interactive mode.\" );\n\t\t\tSelectedTool = PrintTool;\n\t\t\tGraphicsContainerElement.removeChild(InteractiveOnlyContainer);\n\t\t\tmyMapApp.disableTooltips();\n\t\t\tfor( var i=0; i < HighlightedPixels.length; ++i )\n\t\t\t\tif( HighlightedPixels[i] != GrabPixelWithPeak )\n\t\t\t\t\tUnhighlightPeak( Peaks[PixelToPeakMap[HighlightedPixels[i]][0]][2] );\n\t\n\t\t\tHighlightedPixels.length = 0;\n\t\t\tSVGRoot.forceRedraw();\n\t\t} else\n\t\t{\n\t\t\tSelectedTool = Toolbox.tools[toolName];\n\t\t}\n\t\tDrawTB();\n\t}\n\n\tfunction AddTBTool(name, width, height)\n\t{\n\t\tvar tool = new Object;\n\t\ttool.group = SVGDocument.createElementNS(SVGns, \"svg\");\n\t\ttool.group.setAttributeNS( null, \"overflow\", \"visible\" );\n\t\ttool.group.setAttributeNS( null, \"id\", name + \"Tool\" );\n\t\ttool.container = SVGDocument.createElementNS(SVGns, \"rect\");\n\t\ttool.group.setAttributeNS( null, \"x\", Toolbox.margin * (Toolbox.tools.length+1) + width * Toolbox.tools.length );\n\t\ttool.group.setAttributeNS( null, \"y\", Toolbox.margin );\n\t\ttool.container.setAttributeNS( null, \"width\", width );\n\t\ttool.container.setAttributeNS( null, \"height\", height );\n\t\ttool.container.setAttributeNS( null, \"fill\", \"white\" );\n\t\ttool.container.setAttributeNS( null, \"stroke\", \"black\" );\n\t\ttool.icon = SVGDocument.createElementNS(SVGns, \"use\");\n\t\ttool.icon.setAttributeNS( xlinkNS, \"href\", \"#\" + name + \"ToolIcon\" );\n\t\ttool.group.setAttributeNS( null, \"onclick\", \"ActivateTool('\" + name + \"')\" );\n\t\ttool.group.appendChild(tool.container);\n\t\ttool.group.appendChild(tool.icon);\n\t\tToolbox.group.appendChild(tool.group);\n\t\tToolbox.tools[name] = tool;\n\t\tToolbox.tools[Toolbox.tools.length] = tool;\n\t\t//++Toolbox.tools.length;\n\t\treturn tool;\n\t}\n\t\n\tfunction DrawTB()\n\t{\n\t\tvar ItemWidth = 32;\n\t\tvar ItemHeight = 32;\n\t\tvar ItemMargin = 5;\n\t\tvar NumItems = 6;\n\t\tvar RightCoord = FullWidth - RightMargin;\n\t\tvar LeftCoord = RightCoord - ItemMargin*(NumItems+1) - ItemWidth*NumItems;\n\t\tvar ElementWidth = RightCoord - LeftCoord;\n\t\tvar TopCoord = TopMargin;\n\t\tvar BottomCoord = TopCoord + ItemHeight + ItemMargin*2;\n\t\tvar ElementHeight = BottomCoord - TopCoord;\n\n\t\tif( Toolbox.group == null )\n\t\t{\n\t\t\tToolbox.group = SVGDocument.createElementNS(SVGns, \"svg\");\n\t\t\tToolbox.group.setAttributeNS( null, \"overflow\", \"visible\" );\n\t\t\tToolbox.container = SVGDocument.createElementNS(SVGns, \"rect\");\n\t\t\tToolbox.container.setAttributeNS( null, \"width\", ElementWidth );\n\t\t\tToolbox.container.setAttributeNS( null, \"height\", ElementHeight );\n\t\t\tToolbox.container.setAttributeNS( null, \"fill\", \"navajowhite\" );\n\t\t\tToolbox.container.setAttributeNS( null, \"stroke\", \"black\" );\n\t\t\tToolbox.group.appendChild(Toolbox.container);\n\n\t\t\tToolbox.tools = new Array;\n\t\t\tToolbox.margin = ItemMargin;\n\n\t\t\tUndoZoomTool = AddTBTool( \"UndoZoom\", ItemWidth, ItemHeight );\n\t\t\tZoomTool = AddTBTool( \"Zoom\",ItemWidth, ItemHeight );\n\t\t\tDeNovoTool = AddTBTool( \"DeNovo\", ItemWidth, ItemHeight );\n\t\t\tGrabViewTool = AddTBTool( \"GrabView\", ItemWidth, ItemHeight );\n\t\t\tFilterTool = AddTBTool( \"Options\", ItemWidth, ItemHeight );\n\t\t\tPrintTool = AddTBTool( \"Print\", ItemWidth, ItemHeight );\n\t\t\tSelectedTool = ZoomTool; // zoom tool is default\n\t\t\tInteractiveOnlyContainer.appendChild(Toolbox.group);\n\t\t}\n\n\t\tToolbox.group.setAttributeNS( null, \"x\", LeftCoord );\n\t\tToolbox.group.setAttributeNS( null, \"y\", TopCoord );\n\n\t\tfor( var i=0; i < Toolbox.tools.length; ++i )\n\t\t{\n\t\t\tvar tool = Toolbox.tools[i];\n\t\t\ttool.container.setAttributeNS( null, \"stroke\", \"grey\" );\n\t\t\ttool.container.setAttributeNS( null, \"stroke-width\", \"1\" );\n\t\t}\n\t\tSelectedTool.container.setAttributeNS( null, \"stroke\", \"red\" );\n\t\tSelectedTool.container.setAttributeNS( null, \"stroke-width\", \"3\" );\n\t}\n\n\tfunction DrawAxis()\n\t{\n\t\tvar XCoord = LeftMargin;\n\t\tvar RightCoord = FullWidth - RightMargin;\n\n\t\t// Calculate the MZ distance between low and high MZs\n\t\tvar MZrange = HiMZ - LoMZ;\n\t\tfor( var div=10000; div > 0.0001; div /= 10 ) { if( MZrange / div >= 10 ) break; }\n\t\tLoMZ = Math.floor( LoMZ / div ) * div;\n\t\tHiMZ = Math.ceil( HiMZ / div ) * div;\n\t\tMZrange = HiMZ - LoMZ;\n\n\t\tvar pixelsPerChar = 11;\n\t\tvar decimals = Math.max( 0, Math.round( -Math.log(div) / Math.log(10) ) );\n\t\tMZrange = round( MZrange, decimals );\n\t\tvar numMajorTicks = Math.round( MZrange / div );\n\t\tvar numLabelTicks = numMajorTicks;\n\t\tLabelToMajorTickRatio = numLabelTicks / numMajorTicks;\n\t\tvar majorTicks = 0;\n\t\tvar labelTicks = 0;\n\t\tvar fullAxisLabel = LoMZ.toFixed(decimals);\n\t\tfor( var i=0, mz=LoMZ+div; i < numMajorTicks; ++i, mz+=div )\n\t\t\tfullAxisLabel += \" \" + mz.toFixed(decimals);\n\t\twhile( (fullAxisLabel.length + numLabelTicks) * pixelsPerChar > DisplayWidth )\n\t\t{\n\t\t\tvar fullAxisLabel = LoMZ.toFixed(decimals);\n\t\t\tmajorTicks = 1;\n\t\t\tlabelTicks = 1;\n\t\t\tnumLabelTicks = Math.floor( numLabelTicks / 2 );\n\t\t\tif( numLabelTicks < 1 )\n\t\t\t{\n\t\t\t\talert( \"Cannot render.\" );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tLabelToMajorTickRatio = numLabelTicks / numMajorTicks;\n\n\t\t\tfor( var i=0, mz=LoMZ+div; i < numMajorTicks; ++i, mz+=div, ++majorTicks )\n\t\t\t\tif( labelTicks / majorTicks <= LabelToMajorTickRatio )\n\t\t\t\t{\n\t\t\t\t\t++labelTicks;\n\t\t\t\t\tfullAxisLabel += \" \" + mz.toFixed(decimals);\n\t\t\t\t}\n\t\t}\n\n\t\tif( !GrabViewOn )\n\t\t{\n\t\t\tMaxInten = 0;\n\t\t\tfor( var i = 0; i < NumPeaks; ++i )\n\t\t\t{\n\t\t\t\tif( Peaks[i][0] >= LoMZ && Peaks[i][0] <= HiMZ )\n\t\t\t\t\tif( Math.abs(Peaks[i][1]) > MaxInten )\n\t\t\t\t\t\tMaxInten = Math.abs( Peaks[i][1] );\n\t\t\t}\n\t\t}\n\n\t\tBaseLine = FullHeight - BottomMargin;\n\t\tXscaling = (FullWidth - LeftMargin - RightMargin) / MZrange;\n\t\tYscaling = (BaseLine - TopMargin) / MaxInten * VerticalScaleFactor;\n\n\t\tvar Xaxis = SVGDocument.createElementNS(SVGns, \"line\");\n\t\tXaxis.setAttributeNS( null, \"x1\", LeftMargin );\n\t\tXaxis.setAttributeNS( null, \"x2\", (FullWidth-RightMargin) );\n\t\tXaxis.setAttributeNS( null, \"y1\", BaseLine );\n\t\tXaxis.setAttributeNS( null, \"y2\", BaseLine );\n\t\tXaxis.setAttributeNS( null, \"stroke\", \"black\" );\n\t\tGraphicsContainerElement.appendChild(Xaxis);\n\n\t\tvar majorTickWidth = div * Xscaling;\n\t\tvar MZvalue = LoMZ;\n\t\tLabelToMajorTickRatio = numLabelTicks / numMajorTicks;\n\t\tvar majorTicks = 0;\n\t\tvar labelTicks = 0;\n\t\twhile( true )\n\t\t{\n\t\t\tvar DisplayCoord = XCoord - LeftMargin;\n\t\t\tvar Length = 5;\n\n\t\t\tif( labelTicks == 0 || labelTicks / majorTicks <= LabelToMajorTickRatio )\n\t\t\t{\n\t\t\t\t++labelTicks;\n\t\t\t\tLength = 10;\n\t\t\t\tvar data = SVGDocument.createTextNode(MZvalue.toFixed(decimals));\n\t\t\t\tvar text = SVGDocument.createElementNS(SVGns, \"text\");\n\t\t\t\ttext.setAttributeNS( null, \"x\", XCoord );\n\t\t\t\ttext.setAttributeNS( null, \"y\", BaseLine+25 );\n\t\t\t\ttext.setAttributeNS( null, \"fill\", \"black\" );\n\t\t\t\ttext.setAttributeNS( null, \"text-anchor\", \"middle\" );\n\t\t\t\ttext.appendChild(data);\n\t\t\t\tGraphicsContainerElement.appendChild(text);\n\t\t\t}\n\n\t\t\t++majorTicks;\n\t\t\tvar Xaxis = SVGDocument.createElementNS(SVGns, \"line\");\n\t\t\tXaxis.setAttributeNS( null, \"x1\", XCoord );\n\t\t\tXaxis.setAttributeNS( null, \"x2\", XCoord );\n\t\t\tXaxis.setAttributeNS( null, \"y1\", BaseLine );\n\t\t\tXaxis.setAttributeNS( null, \"y2\", BaseLine + Length );\n\t\t\tXaxis.setAttributeNS( null, \"stroke\", \"black\" );\n\t\t\tGraphicsContainerElement.appendChild(Xaxis);\n\n\t\t\tXCoord += majorTickWidth;\n\t\t\tif( labelTicks > numLabelTicks )\n\t\t\t\tbreak;\n\t\t\tMZvalue += div;\n\t\t}\n\t}\n\n\tfunction DrawSpectrum()\n\t{\n\t\tif( NumPeaks == 0 )\n\t\t\treturn;\n\n\t\tvar PeaksToDraw = new Array;\n\t\tfor( var i = 0; i < IntensityRankFilter; ++i )\n\t\t{\n\t\t\tvar Peak = Peaks[PeaksByIntensity[i]-1];\n\t\t\tPeak[2].peakNode = null;\n\t\t\tif( Peak[0] >= LoMZ && Peak[0] <= HiMZ && ( Peak[2].height == null ? Peak[1] >= IntensityFilter : true ) )\n\t\t\t{\n\t\t\t\tvar XCoord = MzToPixel( Peak[0] );\n\t\t\t\tvar width = Peak[2].width ? Peak[2].width : 1;\n\t\t\t\tfor( var x = 0; x < width; ++x )\n\t\t\t\t{\n\t\t\t\t\tvar ExistingPeak = PixelToPeakMap[XCoord+x][0];\n\t\t\t\t\tvar ExistingPeakWidth = ExistingPeak ? ( Peaks[ExistingPeak][2].width ? Peaks[ExistingPeak][2].width : 1 ) : 1;\n\t\t\t\t\tif( ExistingPeak == null )\n\t\t\t\t\t{\n\t\t\t\t\t\tPeak[2].pixel = XCoord;\n\t\t\t\t\t\tPeaksToDraw.push(Peak);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if( width > ExistingPeakWidth )\n\t\t\t\t\t{\n\t\t\t\t\t\tPeak[2].pixel = XCoord;\n\t\t\t\t\t\tPeaksToDraw.push(Peak);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor( var x = 0; x < width; ++x )\n\t\t\t\t\tPixelToPeakMap[ XCoord+x ].push( PeaksByIntensity[i]-1 );\n\t\t\t}\n\t\t}\n\n\t\tfor( var i=0; i < PeaksToDraw.length; ++i )\n\t\t{\n\t\t\tvar Peak = PeaksToDraw[i];\n\t\t\tPeak[2].labelNode = null;\n\t\t\tvar x = Peak[2].pixel;\n\t\t\tvar PeakElement = SVGDocument.createElementNS(SVGns, \"line\");\n\t\t\tPeakElement.setAttributeNS( null, \"x1\", x );\n\t\t\tPeakElement.setAttributeNS( null, \"x2\", x );\n\t\t\tvar PeakBase = PeakBase = BaseLine - 0.5;\n\t\t\tif( Peak[2].height != null )\n\t\t\t{\n\t\t\t\tif( Peak[2].height < 0 "
                    << ")\n\t\t\t\t\tPeakBase = BaseLine + 0.5;\n\t\t\t\tPeakElement.setAttributeNS( null, \"y2\", PeakBase - Peak[2].height );\n\t\t\t} else\n\t\t\t\tPeakElement.setAttributeNS( null, \"y2\", PeakBase - (Yscaling * Peak[1]) );\n\t\t\tPeakElement.setAttributeNS( null, \"y1\", PeakBase );\n\n\t\t\tif( Peak[2].color == null )\n\t\t\t\tPeak[2].color = \"grey\";\n\t\t\tPeakElement.setAttributeNS( null, \"stroke\", Peak[2].color );\n\t\t\tif( Peak[2].width != null )\n\t\t\t\tPeakElement.setAttributeNS( null, \"stroke-width\", Peak[2].width );\n\t\t\tif( Peak[2].dasharray != null )\n\t\t\t{\n\t\t\t\tPeakElement.setAttributeNS( null, \"stroke-dasharray\", Peak[2].dasharray.join() );\n\t\t\t\tPeakElement.setAttributeNS( null, \"fill\", \"none\" );\n\t\t\t}\n\n\t\t\tPeak[2].peakNode = PeakElement;\n\t\t\tGraphicsContainerElement.appendChild(PeakElement);\n\t\t}\n\n\t\tvar widestLabel = 0;\n\t\tfor( var i=0; i < PeaksToDraw.length; ++i )\n\t\t{\n\t\t\tvar Peak = PeaksToDraw[i];\n\t\t\tif( Peak != Peaks[ PixelToPeakMap[ Peak[2].pixel ][0] ] )\n\t\t\t\tcontinue;\n\t\t\tvar x = Peak[2].pixel;\n\t\t\tvar y = parseInt( Peak[2].peakNode.getAttributeNS( null, \"y2\" ) );\n\t\t\tPeak[2].labelLines = new Array;\n\t\t\tPeak[2].labelHeight = 0;\n\t\t\tPeak[2].labelWidth = 0;\n\t\t\tif( Peak[2].label != null )\n\t\t\t{\n\t\t\t\tPeak[2].labelLines.push(Peak[2].label);\n\t\t\t\tPeak[2].labelWidth = Peak[2].label.length/2;\n\t\t\t\tPeak[2].labelHeight += LabelOptions.MaxCharHeight;\n\t\t\t}\n\n\t\t\tif( FilterOptions.ShowPeakMZs.checkedStatus )\n\t\t\t{\n\t\t\t\tPeak[2].labelLines.push(Peak[0].toFixed(2));\n\t\t\t\tPeak[2].labelWidth = Math.max( Peak[2].labelWidth, Peak[0].toFixed(2).length/2 );\n\t\t\t\tPeak[2].labelHeight += LabelOptions.MaxCharHeight;\n\t\t\t}\n\n\t\t\tif( Peak[2].labelLines.length == 0 )\n\t\t\t\tcontinue;\n\n\t\t\tvar currTextXCoord = x;//parseInt( text.getAttributeNS( null, \"x\" ) );\n\t\t\tvar currTextYCoord = y - 5;//parseInt( text.getAttributeNS( null, \"y\" ) );\n\t\t\tvar labelWidth = Math.ceil(Peak[2].labelWidth*LabelOptions.MaxCharWidth);\n\t\t\tvar labelX1 = x - labelWidth;\n\t\t\tvar labelX2 = x + labelWidth;\n\n\t\t\tvar drawLabel = true;\n\t\t\tfor( var n = labelX1 - widestLabel; n <= labelX2 + widestLabel; ++n )\n\t\t\t{\n\t\t\t\tif( n < 0 || n >= FullWidth || n == x )\n\t\t\t\t\tcontinue;\n\t\t\t\tif( Peak[2].height != null && Peak[2].height < 0 )\n\t\t\t\t\tbreak;\n\t\t\t\tvar peakIdx = PixelToPeakMap[n][0];\n\t\t\t\tif( peakIdx != null )\n\t\t\t\t{\n\t\t\t\t\tvar nextPeak = Peaks[peakIdx];\n\t\t\t\t\tif( nextPeak[2].height != null && nextPeak[2].height < 0 )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif( nextPeak[2].labelNode != null )\n\t\t\t\t\t{\n\t\t\t\t\t\tvar nextLabelWidth = Math.ceil(nextPeak[2].labelWidth)*LabelOptions.MaxCharWidth;\n\t\t\t\t\t\tvar nextLabelX1 = n - nextLabelWidth;\n\t\t\t\t\t\tvar nextLabelX2 = n + nextLabelWidth;\n\t\t\t\t\t\tif( ( n < x && labelX1 <= nextLabelX2 ) ||\n\t\t\t\t\t\t    ( n > x && labelX2 >= nextLabelX1 ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( y - nextPeak[2].labelHeight <= parseInt( nextPeak[2].peakNode.getAttributeNS( null, \"y2\" ) ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdrawLabel = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif( n >= labelX1 && n <= labelX2 && currTextYCoord >= parseInt( nextPeak[2].peakNode.getAttributeNS( null, \"y2\" ) ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tdrawLabel = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( drawLabel )\n\t\t\t{\n\t\t\t\tvar text = createMultiLineTextElement(Peak[2].labelLines,x);\n\t\t\t\ttext.setAttributeNS( null, \"x\", x );\n\t\t\t\tif( Peak[2].height != null && Peak[2].height < 0 )\n\t\t\t\t\ttext.setAttributeNS( null, \"y\", y + 8 );\n\t\t\t\telse\n\t\t\t\t\ttext.setAttributeNS( null, \"y\", y - Peak[2].labelHeight + \"px\" );\n\t\t\t\ttext.setAttributeNS( null, \"fill\", Peak[2].color );\n\t\t\t\tfor( var property in LabelOptions.styles )\n\t\t\t\t\ttext.setAttributeNS( null, property, LabelOptions.styles[property] );\n\t\t\t\tGraphicsContainerElement.appendChild(text);\n\t\t\t\tPeak[2].labelNode = text;\n\t\t\t\tif( labelWidth > widestLabel )\n\t\t\t\t\twidestLabel = labelWidth;\n\t\t\t} else\n\t\t\t\tPeak[2].labelNode = null;\n\t\t}\n\t}\n\n\tfunction createMultiLineTextElement(lines,x)\n\t{\n\t\tvar text = SVGDocument.createElementNS(SVGns, \"text\");\n\t\tfor( var i=0; i < lines.length; ++i )\n\t\t{\n\t\t\tvar data = SVGDocument.createTextNode(lines[i]);\n\t\t\tvar span = SVGDocument.createElementNS(SVGns, \"tspan\");\n\t\t\tspan.appendChild(data);\n\t\t\tspan.setAttributeNS(null, \"x\", x);\n\t\t\tspan.setAttributeNS(null, \"dy\", (i*LabelOptions.MaxCharHeight+3) + \"px\");\n\t\t\ttext.appendChild(span);\n\t\t}\n\t\treturn text;\n\t}\n\n\tfunction textbox(id,parentNode,defaultVal,maxChars,x,y,boxWidth,boxHeight,textYOffset,textStyles,boxStyles,cursorStyles,selBoxStyles,allowedChars,functionToCall)\n\t{\n\t\tvar nrArguments = 15;\n\t\tvar createTextBox= true;\n\t\tif(arguments.length == nrArguments)\n\t\t{\n\t\t\tthis.id = id;\n\t\t\tthis.parentNode = parentNode;\n\t\t\tthis.maxChars = maxChars;\n\t\t\tthis.defaultVal = defaultVal.toString();\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.boxWidth = boxWidth;\n\t\t\tthis.boxHeight = boxHeight;\n\t\t\tthis.textYOffset = textYOffset;\n\t\t\tthis.textStyles = textStyles;\n\t\t\tif(!this.textStyles[\"font-size\"]) {\n\t\t\t\tthis.textStyles[\"font-size\"] = 15;\n\t\t\t}\n\t\t\tthis.boxStyles = boxStyles;\n\t\t\tthis.cursorStyles = cursorStyles;\n\t\t\tthis.selBoxStyles = selBoxStyles;\n\t\t\tif(allowedChars) {\n\t\t\t\tif(typeof(allowedChars) == \"string\") {\n\t\t\t\t\tif(allowedChars.length > 0) {\n\t\t\t\t\t\tthis.RegExp = new RegExp(allowedChars);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.RegExp = undefined;\n\t\t\t}\n\t\t\tthis.functionToCall = functionToCall;\n\t\t\tthis.textboxRect = null;\n\t\t\tthis.textboxText = null;\n\t\t\tthis.textboxTextContent = null;\n\t\t\tthis.textboxCursor = null;\n\t\t\tthis.textboxStatus = 0;\n\t\t\tthis.cursorPosition = 0;\n\t\t\tthis.transX = 0;\n\t\t\tthis.textVal = this.defaultVal;\n\t\t\tthis.shiftDown = false;\n\t\t\tthis.mouseDown = false;\n\t\t\tthis.startSelection = 0;\n\t\t\tthis.startOrigSelection = 0;\n\t\t\tthis.endSelection = 0;\n\t\t\tthis.selectionRectVisible = false;\n\t\t\tthis.svg = null;\n\t\t\tthis.supportsCharGeom = true;\n\t\t}\n\t\telse {\n\t\t\tcreateTextBox = false;\n\t\t\talert(\"Error (\"+id+\"): wrong nr of arguments! You have to pass over \"+nrArguments+\" parameters.\");\n\t\t}\n\t\tif(createTextBox) {\n\t\t\tthis.timer = new Timer(this);\n\t\t\tthis.timerMs = 200;\n\t\t\tthis.createTextbox();\n\t\t}\n\t\telse {\n\t\t\talert(\"Could not create textbox with id '\"+id+\"' due to errors in the constructor parameters\");\t\t\n\t\t}\n\t}\n\n\ttextbox.prototype.createTextbox = function()\n\t{\n\t\tvar result = this.testParent();\n\t\tif(result) {\n\t\t\tthis.textboxParent = document.createElementNS(svgNS,\"g\");\n\t\t\tthis.parentGroup.appendChild(this.textboxParent);\n\n\t\t\tthis.textboxRect = document.createElementNS(svgNS,\"rect\");\n\t\t\tthis.textboxRect.setAttributeNS(null,\"x\",this.x);\n\t\t\tthis.textboxRect.setAttributeNS(null,\"y\",this.y);\n\t\t\tthis.textboxRect.setAttributeNS(null,\"width\",this.boxWidth);\n\t\t\tthis.textboxRect.setAttributeNS(null,\"height\",this.boxHeight);\n\t\t\tthis.textboxRect.setAttributeNS(null,\"pointer-events\",\"fill\");\n\t\t\tfor (var attrib in this.boxStyles) {\n\t\t\t\tthis.textboxRect.setAttributeNS(null,attrib,this.boxStyles[attrib]);\n\t\t\t}\n\t\t\tthis.textboxParent.appendChild(this.textboxRect);\n\n\t\t\tthis.svg = document.createElementNS(svgNS,\"svg\");\n\t\t\tthis.svg.setAttributeNS(null,\"x\",this.x + this.textStyles[\"font-size\"] / 4);\n\t\t\tthis.svg.setAttributeNS(null,\"y\",this.y + this.boxHeight * 0.02);\n\t\t\tthis.svg.setAttributeNS(null,\"width\",this.boxWidth - (this.textStyles[\"font-size\"]) / 2);\n\t\t\tthis.svg.setAttributeNS(null,\"height\",this.boxHeight * 0.96);\n\t\t\tthis.svg.setAttributeNS(null,\"viewBox\",(this.x + this.textStyles[\"font-size\"] / 4)+\" \"+(this.y + this.boxHeight * 0.02)+\" \"+(this.boxWidth - (this.textStyles[\"font-size\"]) / 2)+\" \"+(this.boxHeight * 0.96));\n\t\t\tthis.textboxParent.appendChild(this.svg);\n\n\t\t\tthis.textboxTextGroup = document.createElementNS(svgNS,\"g\");\n\t\t\tthis.svg.appendChild(this.textboxTextGroup);\n\n\t\t\tthis.textboxText = document.createElementNS(svgNS,\"text\");\n\t\t\tthis.textboxText.setAttributeNS(null,\"x\",(this.x + this.textStyles[\"font-size\"] / 3));\n\t\t\tthis.textboxText.setAttributeNS(null,\"y\",(this.y + this.textYOffset));\n\t\t\tfor (var attrib in this.textStyles) {\n\t\t\t\tvalue = this.textStyles[attrib];\n\t\t\t\tif(attrib == \"font-size\") {\n\t\t\t\t\tvalue += \"px\";\n\t\t\t\t}\n\t\t\t\tthis.textboxText.setAttributeNS(null,attrib,value);\n\t\t\t}\n\t\t\tthis.textboxText.setAttributeNS(null,\"id\",this.id+\"Text\");\n\t\t\tif(myMapApp.navigator != \"Opera\") {\n\t\t\t\tthis.textboxText.setAttributeNS(null,\"pointer-events\",\"none\");\n\t\t\t}\n\t\t\tthis.textboxText.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\",\"space\",\"preserve\");\n\n\t\t\tif(this.defaultVal.length <= this.maxChars) {\n\t\t\t\tthis.textboxTextContent = document.createTextNode(this.defaultVal);\n\t\t\t\tthis.cursorPosition = this.defaultVal.length - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\talert(\"the default textbox value is longer than the maximum of allowed characters\\nDefault val will be truncated.\");\n\t\t\t\tthis.textVal = this.defaultVal.substr(0,(this.maxChars - 1));\n\t\t\t\tthis.textboxTextContent = document.createTextNode(this.textVal);\n\t\t\t\tthis.cursorPosition = this.maxChars - 1;\n\t\t\t}\n\t\t\tthis.textboxText.appendChild(this.textboxTextContent);\n\t\t\tthis.textboxTextGroup.appendChild(this.textboxText);\n\n\t\t\tthis.selectionRect = document.createElementNS(svgNS,\"rect\");\n\t\t\tthis.selectionRect.setAttributeNS(null,\"x\",(this.x + this.textStyles[\"font-size\"] / 3));\n\t\t\tthis.selectionRect.setAttributeNS(null,\"y\",(this.y + this.textYOffset - this.textStyles[\"font-size\"] * 0.9));\n\t\t\tthis.selectionRect.setAttributeNS(null,\"width\",(this.textStyles[\"font-size\"] * 2));\n\t\t\tthis.selectionRect.setAttributeNS(null,\"height\",this.textStyles[\"font-size\"] * 1.1);\n\t\t\tfor (var attrib in this.selBoxStyles) {\n\t\t\t\tthis.selectionRect.setAttributeNS(null,attrib,this.selBoxStyles[attrib]);\n\t\t\t}\n\t\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"none\");\n\t\t\tthis.textboxTextGroup.appendChild(this.selectionRect);\n\n\t\t\tthis.textboxCursor = document.createElementNS(svgNS,\"line\");\n\t\t\tthis.textboxCursor.setAttributeNS(null,\"x1\",this.x);\n\t\t\tthis.textboxCursor.setAttributeNS(null,\"y1\",(this.y + this.textYOffset + this.textStyles[\"font-size\"] * 0.2));\n\t\t\tthis.textboxCursor.setAttributeNS(null,\"x2\",this.x);\n\t\t\tthis.textboxCursor.setAttributeNS(null,\"y2\",(this.y + this.textYOffset - this.textStyles[\"font-size\"] * 0.9));\n\t\t\tfor (var attrib in this.cursorStyles) {\n\t\t\t\tthis.textboxCursor.setAttributeNS(null,attrib,this.cursorStyles[attrib]);\n\t\t\t}\n\t\t\tthis.textboxCursor.setAttributeNS(null,\"id\",this.id+\"Cursor\");\n\t\t\tthis.textboxCursor.setAttributeNS(null,\"visibility\",\"hidden\");\n\t\t\tthis.textboxTextGroup.appendChild(this.textboxCursor);\n\n\t\t\tthis.textboxParent.addEventListener(\"mousedown\",this,false);\n\t\t\tthis.textboxParent.addEventListener(\"mousemove\",this,false);\n\t\t\tthis.textboxParent.addEventListener(\"mouseup\",this,false);\n\t\t\tthis.textboxParent.setAttributeNS(null,\"cursor\",\"text\");\n\n\t\t\tthis.timer.setTimeout(\"testSupportsChar\",this.timerMs);\n\t\t}\n\t\telse {\n\t\t\talert(\"could not create or reference 'parentNode' of textbox with id '\"+this.id+\"'\");\n\t\t}\n\t}\n\n\ttextbox.prototype.testSupportsChar = function()\n\t{\n\t\tvar isEmpty = false;\n\t\tif(this.textVal.length == 0) {\n\t\t\tisEmpty = true;\n\t\t\tthis.textboxTextContent.nodeValue = \" \";\n\t\t}\n\t\ttry {\n\t\t\tvar dummy = this.textboxText.getStartPositionOfChar(0).x;\n\t\t}\n\t\tcatch(er) {\n\t\t\tthis.supportsCharGeom = false;\n\t\t}\n\t\tif(isEmpty) {\n\t\t\tthis.textboxTextContent.nodeValue = \"\";\n\t\t}\n\t}\n\n\ttextbox.prototype.testParent = function()\n\t{\n\t\tvar nodeValid = false;\n\t\tif(typeof(this.parentNode) == \"object\") {\n\t\t\tif(this.parentNode.nodeName == \"svg\" || this.parentNode.nodeName == \"g\" || this.parentNode.nodeName == \"svg:svg\" || this.parentNode.nodeName == \"svg:g\") {\n\t\t\t\tthis.parentGroup = this.parentNode;\n\t\t\t\tnodeValid = true;\n\t\t\t}\n\t\t}\n\t\telse if(typeof(this.parentNode) == \"string\") {\n\t\t\tif(!document.getElementById(this.parentNode)) {\n\t\t\t\tthis.parentGroup = document.createElementNS(svgNS,\"g\");\n\t\t\t\tthis.parentGroup.setAttributeNS(null,\"id\",this.parentNode);\n\t\t\t\tdocument.documentElement.appendChild(this.parentGroup);\n\t\t\t\tnodeValid = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.parentGroup = document.getElementById(this.parentNode);\n\t\t\t\tnodeValid = true;\n\t\t\t}\n\t\t}\n\t\treturn nodeValid;\n\t}\n\n\ttextbox.prototype.removeTextbox = function()\n\t{\n\t\tthis.parentGroup.removeChild(this.textboxParent);\n\t}\n\n\ttextbox.prototype.handleEvent = function(evt)\n\t{\n\t\tif(evt.type == \"mousedown\") {\n\t\t\tif((evt.currentTarget.nodeName == \"svg\" || evt.currentTarget.nodeName == \"svg:svg\") && this.textboxStatus == 2) {\n\t\t\t\tthis.release();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(evt.currentTarget.nodeName == \"g\" || evt.currentTarget.nodeName == \"svg:g\") {\n\t\t\t\t\tthis.calcCursorPosFromMouseEvt(evt);\n\t\t\t\t\tif(this.textboxStatus == 0) {\n\t\t\t\t\t\tif(myMapApp.navigator == \"Adobe\") "
                    << "{\n\t\t\t\t\t\t\tdocument.documentElement.addEventListener(\"keydown\",this,false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdocument.documentElement.addEventListener(\"keypress\",this,false);\n\t\t\t\t\t\tdocument.documentElement.addEventListener(\"mousedown\",this,false);\n\t\t\t\t\t\tdocument.documentElement.addEventListener(\"mouseup\",this,false);\n\t\t\t\t\t\tdocument.documentElement.addEventListener(\"mousemove\",this,false);\n\t\t\t\t\t\tthis.textboxStatus = 1;\n\t\t\t\t\t\tthis.textboxCursor.setAttributeNS(null,\"visibility\",\"visible\");\n\t\t\t\t\t\tBackDrop.hasFocus = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\tthis.setCursorPos();\n\t\t\t\t\tthis.startOrigSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.startSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.endSelection = this.cursorPosition + 2;\n\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"none\");\n\t\t\t\t\tthis.selectionRectVisible = false;\n\t\t\t\t\tthis.shiftDown = true;\n\t\t\t\t\tthis.mouseDown = true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.textboxStatus = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(evt.type == \"mousemove\") {\n\t\t\tif(this.textboxStatus == 2 && this.shiftDown && this.mouseDown && this.supportsCharGeom) {\n\t\t\t\t\tthis.calcCursorPosFromMouseEvt(evt);\n\t\t\t\t\tthis.setCursorPos();\n\t\t\t\t\tif(this.cursorPosition + 1 != this.startOrigSelection) {\n\t\t\t\t\t\tif(this.cursorPosition + 1 < this.startOrigSelection) {\n\t\t\t\t\t\t\tthis.endSelection = this.startOrigSelection;\n\t\t\t\t\t\t\tthis.startSelection = this.cursorPosition + 1;\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tthis.startSelection = this.startOrigSelection;\n\t\t\t\t\t\t\tthis.endSelection = this.cursorPosition + 1;\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"inherit\");\n\t\t\t\t\t\tthis.selectionRectVisible = true;\n\t\t\t\t\t\tvar rectX = this.textboxText.getStartPositionOfChar(this.startSelection).x\n\t\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"x\",rectX);\n\t\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"width\",(this.textboxText.getEndPositionOfChar(this.endSelection - 1).x - rectX));\n\t\t\t\t\t\tvar cursorX = parseInt(this.textboxCursor.getAttributeNS(null,\"x1\"));\n\t\t\t\t\t\tif((cursorX + this.transX) > (this.x + this.boxWidth - this.textStyles[\"font-size\"] / 3)) {\n\t\t\t\t\t\t\tthis.transX = (this.x + this.boxWidth - this.textStyles[\"font-size\"] / 3) - cursorX;\n\t\t\t\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(\"+this.transX+\",0)\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif((cursorX + this.transX) < (this.x + this.textStyles[\"font-size\"] / 3)) {\n\t\t\t\t\t\t\tthis.transX += (this.x + this.textStyles[\"font-size\"] / 3) - (cursorX + this.transX);\n\t\t\t\t\t\t\tif(this.transX * -1 < (this.boxWidth - this.textStyles[\"font-size\"])) {\n\t\t\t\t\t\t\t\tthis.transX = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(\"+this.transX+\",0)\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(evt.type == \"mouseup\") {\n\t\t\tif(this.textboxStatus == 2 && this.shiftDown && this.mouseDown) {\n\t\t\t\t\tthis.mouseDown = false;\n\t\t\t}\n\t\t}\n\t\tif(evt.type == \"keypress\") {\n\t\t\tif(evt.keyCode) {\n\t\t\t\tvar charCode = evt.keyCode;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar charCode = evt.charCode;\n\t\t\t}\n\t\t\tvar keyCode = parseInt(charCode);\n\t\t\tvar charCode = undefined;\n\t\t\tthis.changed = false;\n\n\t\t\tif(myMapApp.navigator != \"Adobe\") {\n\t\t\t\tthis.specialCharacters(evt);\n\t\t\t}\n\n\t\t\tif(myMapApp.navigator == \"Opera\") {\n\t\t\t\tif(evt.keyCode > 31 && evt.keyCode != 35 && evt.keyCode != 36 && evt.keyCode != 37 && evt.keyCode != 39 && evt.keyCode != 46) {\n\t\t\t\t\tevt.charCode = evt.keyCode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(keyCode > 31 && keyCode != 127 && keyCode < 65535 && evt.charCode && evt.charCode < 65535) {\t\t\t\n\t\t\t\tvar textChanged = false;\n\t\t\t\tvar keychar = String.fromCharCode(keyCode);\n\t\t\t\tvar result = 0;\n\t\t\t\tif(this.RegExp) {\n\t\t\t\t\tresult = keychar.search(this.RegExp);\n\t\t\t\t}\n\t\t\t\tif(result == 0) {\n\t\t\t\t\tif(this.shiftDown && this.selectionRectVisible) {\n\t\t\t\t\t\tvar tempText = this.textVal.substring(0,this.startSelection) + keychar + this.textVal.substring(this.endSelection,this.textVal.length);\n\t\t\t\t\t\tthis.textVal = tempText;\n\t\t\t\t\t\tthis.cursorPosition = this.startSelection - 1;\n\t\t\t\t\t\ttextChanged = true;\n\t\t\t\t\t\tthis.releaseShift();\n\t\t\t\t\t}\n\t\t\t\t\telse if(this.textVal.length < this.maxChars) {\n\t\t\t\t\t\tif(this.cursorPosition == this.textVal.length -1) {\n\t\t\t\t\t\t\tthis.textVal += keychar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar tempText = this.textVal.substring(0,(this.cursorPosition + 1)) + keychar + this.textVal.substring((this.cursorPosition + 1),(this.textVal.length));\n\t\t\t\t\t\t\tthis.textVal = tempText;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttextChanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.textVal.length < this.maxChars) {\n\t\t\t\t\t\tthis.cursorPosition++;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(textChanged) {\n\t\t\t\t\t\t\tif(this.cursorPosition < this.textVal.length) {\n\t\t\t\t\t\t\t\tthis.cursorPosition++;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.cursorPosition = this.textVal.length - 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\tthis.startSelection = this.cursorPosition;\n\t\t\t\t\tthis.endSelection = this.cursorPosition;\n\t\t\t\t\tthis.shiftDown = false;\n\t\t\t\t\tif(textChanged) {\n\t\t\t\t\t\tthis.textboxTextContent.nodeValue=this.textVal;\n\t\t\t\t\t\tthis.changed = true;\n\t\t\t\t\t\tthis.setCursorPos();\n\t\t\t\t\t\tvar cursorX = parseInt(this.textboxCursor.getAttributeNS(null,\"x1\"));\n\t\t\t\t\t\tif((cursorX + this.transX) > (this.x + this.boxWidth - this.textStyles[\"font-size\"] / 3)) {\n\t\t\t\t\t\t\tthis.transX = (this.x + this.boxWidth - this.textStyles[\"font-size\"] / 3) - (cursorX + this.transX) + this.transX;\n\t\t\t\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(\"+this.transX+\",0)\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(this.changed) {\n\t\t\t\tthis.timer.setTimeout(\"fireFunction\",this.timerMs);\n\t\t\t}\n\t\t\tevt.preventDefault();\n\t\t}\n\t\tif(evt.type == \"keydown\") {\n\t\t\tthis.specialCharacters(evt);\n\t\t}\n\t}\n\n\ttextbox.prototype.specialCharacters = function(evt)\n\t{\n\t\tif(evt.keyCode) {\n\t\t\tvar charCode = evt.keyCode;\n\t\t}\n\t\telse {\n\t\t\tvar charCode = evt.charCode;\n\t\t}\n\t\tvar keyCode = parseInt(charCode);\n\t\tvar charCode = undefined;\n\n\t\tif(keyCode == 8) {\n\t\t\tif(this.textVal.length > 0 && this.cursorPosition > -2) {\n\t\t\t\tif(this.shiftDown && this.selectionRectVisible) {\n\t\t\t\t\tvar tempText = this.textVal.substring(0,this.startSelection) + this.textVal.substring(this.endSelection,this.textVal.length);\n\t\t\t\t\tthis.textVal = tempText;\n\t\t\t\t\tthis.cursorPosition = this.startSelection - 1;\n\t\t\t\t\tthis.releaseShift();\n\t\t\t\t}\n\t\t\t\telse { \n\t\t\t\t\tif(this.cursorPosition == this.textVal.length - 1) {\n\t\t\t\t\t\tthis.textVal=this.textVal.substring(0,this.textVal.length-1);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar tempText = this.textVal.substring(0,(this.cursorPosition)) + this.textVal.substring((this.cursorPosition + 1),(this.textVal.length));\n\t\t\t\t\t\tthis.textVal = tempText;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.cursorPosition > -1) {\n\t\t\t\t\t\tthis.cursorPosition--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.textboxTextContent.nodeValue=this.textVal;\n\t\t\t\tthis.setCursorPos();\n\t\t\t\tif(this.cursorPosition > 0) {\n\t\t\t\t\tif(this.supportsCharGeom) {\n\t\t\t\t\t\tvar cursorX = this.textboxText.getStartPositionOfChar(this.cursorPosition).x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar bbox = this.textboxText.getBBox();\n\t\t\t\t\t\tvar cursorX = bbox.x + bbox.width;\n\t\t\t\t\t}\n\t\t\t\t\tif((cursorX + this.transX) < (this.x + this.textStyles[\"font-size\"] / 3)) {\n\t\t\t\t\t\tthis.transX += (this.x + this.textStyles[\"font-size\"] / 3) - (cursorX + this.transX);\n\t\t\t\t\t\tif(this.transX * -1 < (this.boxWidth - this.textStyles[\"font-size\"])) {\n\t\t\t\t\t\t\tthis.transX = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(\"+this.transX+\",0)\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.changed = true;\n\t\t\t}\n\t\t}\n\t\telse if(keyCode == 10 || keyCode == 13) {\n\t\t\tthis.release();\n\t\t}\n\t\telse if(keyCode == 35 && !(charCode)) {\n\t\t\tif(evt.shiftKey) {\n\t\t\t\tif(this.shiftDown == false) {\n\t\t\t\t\tthis.startOrigSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.startSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.shiftDown = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursorPosition = this.textVal.length - 1;\n\t\t\tthis.setCursorPos();\n\t\t\tvar cursorX = parseInt(this.textboxCursor.getAttributeNS(null,\"x1\"));\n\t\t\tif((cursorX + this.transX) > (this.x + this.boxWidth - this.textStyles[\"font-size\"] / 3)) {\n\t\t\t\tthis.transX = (this.x + this.boxWidth - this.textStyles[\"font-size\"] / 3) - cursorX;\n\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(\"+this.transX+\",0)\");\n\t\t\t}\n\t\t\tthis.setCursorPos();\n\t\t\tif(evt.shiftKey) {\n\t\t\t\tif(this.shiftDown == false) {\n\t\t\t\t\tthis.startOrigSelection = this.cursorPosition;\n\t\t\t\t\tthis.startSelection = this.cursorPosition;\n\t\t\t\t\tthis.shiftDown = true;\n\t\t\t\t}\n\t\t\t\tthis.endSelection = this.cursorPosition + 1;\n\t\t\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"inherit\");\n\t\t\t\tthis.selectionRectVisible = true;\n\t\t\t\tif(this.supportsCharGeom) {\n\t\t\t\t\tvar rectX = this.textboxText.getStartPositionOfChar(this.startSelection).x;\n\t\t\t\t\tvar width = (this.textboxText.getEndPositionOfChar(this.endSelection - 1).x - rectX);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar bbox = this.textboxText.getBBox();\n\t\t\t\t\tvar rectX = this.x + this.textStyles[\"font-size\"] / 3;\n\t\t\t\t\tvar width = this.x + bbox.width + this.textStyles[\"font-size\"] / 3;\n\t\t\t\t}\n\t\t\t\tthis.selectionRect.setAttributeNS(null,\"x\",rectX);\t\t\n\t\t\t\tthis.selectionRect.setAttributeNS(null,\"width\",width);\n\t\t\t}\n\t\t\tif(this.shiftDown && evt.shiftKey == false) {\n\t\t\t\tthis.releaseShift();\n\t\t\t}\n\t\t}\n\t\telse if(keyCode == 36 && !(charCode)) {\n\t\t\tif(evt.shiftKey) {\n\t\t\t\tif(this.shiftDown == false) {\n\t\t\t\t\tthis.startOrigSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.startSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.shiftDown = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cursorPosition = -1;\n\t\t\tthis.textboxText.setAttributeNS(null,\"x\",(this.x + this.textStyles[\"font-size\"] / 3));\n\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(0,0)\");\n\t\t\tthis.transX = 0;\n\t\t\tthis.setCursorPos();\n\t\t\tif(evt.shiftKey) {\n\t\t\t\tif(this.shiftDown == false) {\n\t\t\t\t\tthis.startOrigSelection = this.cursorPosition;\n\t\t\t\t\tthis.startSelection = this.cursorPosition;\n\t\t\t\t\tthis.shiftDown = true;\n\t\t\t\t}\n\t\t\t\tthis.endSelection = this.startSelection;\n\t\t\t\tthis.startSelection = 0;\n\t\t\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"inherit\");\n\t\t\t\tthis.selectionRectVisible = true;\n\t\t\t\tif(this.supportsCharGeom) {\n\t\t\t\t\tvar rectX = this.textboxText.getStartPositionOfChar(this.startSelection).x;\n\t\t\t\t\tvar width = (this.textboxText.getEndPositionOfChar(this.endSelection - 1).x - rectX);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar bbox = this.textboxText.getBBox();\n\t\t\t\t\tvar rectX = this.x + this.textStyles[\"font-size\"] / 3;\n\t\t\t\t\tvar width = this.x + bbox.width + this.textStyles[\"font-size\"] / 3;\n\t\t\t\t}\n\t\t\t\tthis.selectionRect.setAttributeNS(null,\"x\",rectX);\t\n\t\t\t\tthis.selectionRect.setAttributeNS(null,\"width\",width);\t\t\t\n\t\t\t}\n\t\t\tif(this.shiftDown && evt.shiftKey == false) {\n\t\t\t\t\tthis.releaseShift();\n\t\t\t}\n\t\t}\n\t\telse if(keyCode == 37 && !(charCode)) {\n\t\t\tif(this.cursorPosition > -1) {\n\t\t\t\tthis.cursorPosition--;\n\t\t\t\tthis.setCursorPos();\n\t\t\t\tvar cursorX = parseInt(this.textboxCursor.getAttributeNS(null,\"x1\"));\n\t\t\t\tif((cursorX + this.transX) < (this.x + this.textStyles[\"font-size\"] / 3)) {\n\t\t\t\t\tthis.transX += (this.x + this.textStyles[\"font-size\"] / 3) - (cursorX + this.transX);\n\t\t\t\t\tif(this.transX * -1 < (this.boxWidth - this.textStyles[\"font-size\"])) {\n\t\t\t\t\t\tthis.transX = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(\"+this.transX+\",0)\");\n\t\t\t\t}\n\t\t\t\tif(evt.shiftKey && this.supportsCharGeom) {\n\t\t\t\t\tif(this.shiftDown == false) {\n\t\t\t\t\t\tthis.startOrigSelection = this.cursorPosition + 2;\n\t\t\t\t\t\tthis.startSelection = this.cursorPosition + 2;\n\t\t\t\t\t\tthis.shiftDown = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis.endSelection = this.startOrigSelection;\n\t\t\t\t\tthis.startSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"inherit\");\n\t\t\t\t\tthis.selectionRectVisible = true;\n\t\t\t\t\tvar rectX = this.textboxText.getStartPositionOfChar(this.startSelection).x\n\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"x\",rectX);\n\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"width\",(this.textboxText.getEndPositionOfChar(this.endSelection - 1).x - rectX));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(this.shiftDown) {\n\t\t\t\t\t\tthis.releaseShift();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if(keyCode == 39 && !(charCode)) {\n\t\t\tif(this.cursorPosition < this.textVal.length - 1) {\n\t\t\t\tthis.cursorPosition++;\n\t\t\t\tthis.setCursorPos();\n\t\t\t\tvar cursorX = parseInt(this.textboxCursor.getAttributeNS(null,\"x1\"));\n\t\t\t\tif((cursorX + this.transX) > (this.x + this.boxWidth - this.textStyles[\"font-size\"] / 3)) {\n\t\t\t\t\tthis.transX = (this.x + this.boxWidth - this.textStyles[\"font"
                    << "-size\"] / 3) - cursorX;\n\t\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(\"+this.transX+\",0)\");\n\t\t\t\t}\n\t\t\t\tif(evt.shiftKey && this.supportsCharGeom) {\n\t\t\t\t\tif(this.shiftDown == false) {\n\t\t\t\t\t\tthis.startOrigSelection = this.cursorPosition;\n\t\t\t\t\t\tthis.startSelection = this.cursorPosition;\n\t\t\t\t\t\tthis.shiftDown = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis.endSelection = this.cursorPosition + 1;\n\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"inherit\");\n\t\t\t\t\tthis.selectionRectVisible = true;\n\t\t\t\t\tvar rectX = this.textboxText.getStartPositionOfChar(this.startSelection).x\n\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"x\",rectX);\n\t\t\t\t\tthis.selectionRect.setAttributeNS(null,\"width\",(this.textboxText.getEndPositionOfChar(this.endSelection - 1).x - rectX));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif(this.shiftDown) {\n\t\t\t\t\t\tthis.releaseShift();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if((keyCode == 127 || keyCode == 12 || keyCode == 46) && !(charCode)) {\n\t\t\tif((this.textVal.length > 0) && (this.cursorPosition < (this.textVal.length))) {\n\t\t\t\t\tvar tempText = null;\n\t\t\t\t\tif(this.shiftDown && evt.shiftKey == false && this.startSelection < this.textVal.length) {\n\t\t\t\t\t\tvar tempText = this.textVal.substring(0,this.startSelection) + this.textVal.substring(this.endSelection,this.textVal.length);\n\t\t\t\t\t\tthis.cursorPosition = this.startSelection - 1;\n\t\t\t\t\t\tthis.releaseShift();\n\t\t\t\t\t\tthis.changed = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(this.cursorPosition < (this.textVal.length - 1)) {\n\t\t\t\t\t\t\tvar tempText = this.textVal.substring(0,(this.cursorPosition + 1)) + this.textVal.substring((this.cursorPosition + 2),(this.textVal.length));\n\t\t\t\t\t\t\tthis.changed = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(this.changed) {\n\t\t\t\t\t\tif(tempText != null) {\n\t\t\t\t\t\t\tthis.textVal = tempText;\n\t\t\t\t\t\t\tthis.textboxTextContent.nodeValue=this.textVal;\n\t\t\t\t\t\t\tthis.setCursorPos();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(myMapApp.navigator == \"Adobe\") {\n\t\t\tif(this.changed) {\n\t\t\t\tthis.timer.setTimeout(\"fireFunction\",this.timerMs);\n\t\t\t}\n\t\t}\n\t}\n\n\ttextbox.prototype.setCursorPos = function()\n\t{\n\t\t\tif(this.cursorPosition > -1) {\n\t\t\t\tif(this.supportsCharGeom) {\n\t\t\t\t\tif(this.textVal.length > 0) {\n\t\t\t\t\t\tvar cursorPos = this.textboxText.getEndPositionOfChar(this.cursorPosition).x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar cursorPos = (this.x + this.textStyles[\"font-size\"] / 3);\n\t\t\t\t\t}\n\t\t\t\t\tthis.textboxCursor.setAttributeNS(null,\"x1\",cursorPos);\n\t\t\t\t\tthis.textboxCursor.setAttributeNS(null,\"x2\",cursorPos);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar bbox = this.textboxText.getBBox();\n\t\t\t\t\tthis.textboxCursor.setAttributeNS(null,\"x1\",(bbox.x + bbox.width + this.textStyles[\"font-size\"] / 3));\n\t\t\t\t\tthis.textboxCursor.setAttributeNS(null,\"x2\",(bbox.x + bbox.width + this.textStyles[\"font-size\"] / 3));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.textboxText.setAttributeNS(null,\"x\",(this.x + this.textStyles[\"font-size\"] / 3));\n\t\t\t\tthis.textboxTextGroup.setAttributeNS(null,\"transform\",\"translate(0,0)\");\n\t\t\t\tthis.transX = 0;\n\t\t\t\tif(this.supportsCharGeom) {\n\t\t\t\t\tif(this.textboxTextContent.length > 0) {\n\t\t\t\t\t\tvar cursorPos = this.textboxText.getStartPositionOfChar(0).x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar cursorPos = this.x + this.textStyles[\"font-size\"] / 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar cursorPos = this.x + this.textStyles[\"font-size\"] / 3;\n\t\t\t\t}\n\t\t\t\tthis.textboxCursor.setAttributeNS(null,\"x1\",cursorPos);\n\t\t\t\tthis.textboxCursor.setAttributeNS(null,\"x2\",cursorPos);\n\t\t\t}\n\t}\n\n\ttextbox.prototype.fireFunction = function()\n\t{\n\t\tvar changeType = \"change\";\n\t\tif(this.textboxStatus == 0) {\n\t\t\tchangeType = \"release\";\n\t\t}\n\t\tif(this.textboxStatus == 5) {\n\t\t\tthis.textboxStatus = 0;\n\t\t\tchangeType = \"set\";\n\t\t}\n\t\tif(typeof(this.functionToCall) == \"function\") {\n\t\t\tthis.functionToCall(this.id,this.textVal,changeType);\n\t\t}\n\t\tif(typeof(this.functionToCall) == \"object\") {\n\t\t\tthis.functionToCall.textboxChanged(this.id,this.textVal,changeType);\t\n\t\t}\n\t\tif(typeof(this.functionToCall) == undefined) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\ttextbox.prototype.getValue = function()\n\t{\n\t\treturn this.textVal;\n\t}\n\n\ttextbox.prototype.setValue = function(value,fireFunction)\n\t{\n\t\tthis.textVal = value.toString();\n\t\tthis.textboxTextContent.nodeValue=this.textVal;\n\t\tthis.cursorPosition = -1;\n\t\tthis.setCursorPos();\n\t\tif(fireFunction == true) {\n\t\t\tthis.textboxStatus = 5;\n\t\t\tthis.fireFunction();\n\t\t}\n\t}\n\n\ttextbox.prototype.release = function()\n\t{\n\t\tthis.textboxStatus = 0;\n\t\tdocument.documentElement.removeEventListener(\"keypress\",this,false);\n\t\tif(myMapApp.navigator == \"Adobe\") {\n\t\t\tdocument.documentElement.removeEventListener(\"keydown\",this,false);\n\t\t}\n\t\tdocument.documentElement.removeEventListener(\"mousedown\",this,false);\n\t\tdocument.documentElement.removeEventListener(\"mousemove\",this,false);\n\t\tdocument.documentElement.removeEventListener(\"mouseup\",this,false);\n\t\tthis.textboxCursor.setAttributeNS(null,\"visibility\",\"hidden\");\n\t\tthis.releaseShift();\n\t\tthis.timer.setTimeout(\"fireFunction\",this.timerMs);\n\t\tBackDrop.hasFocus = true;\n\t}\n\n\ttextbox.prototype.releaseShift = function()\n\t{\n\t\tthis.selectionRect.setAttributeNS(null,\"display\",\"none\");\n\t\tthis.selectionRectVisible = false;\n\t\tthis.shiftDown = false;\n\t}\n\n\ttextbox.prototype.calcCursorPosFromMouseEvt = function(evt)\n\t{\n\t\tvar myCoords = myMapApp.calcCoord(evt,this.textboxText);\n\t\tvar mySVGPoint = document.documentElement.createSVGPoint();\n\t\tmySVGPoint.x = myCoords.x;\n\t\tmySVGPoint.y = myCoords.y;\n\t\tif(this.textboxTextContent.length > 0) {\n\t\t\tif(this.supportsCharGeom) {\n\t\t\t\tthis.cursorPosition = this.textboxText.getCharNumAtPosition(mySVGPoint);\n\t\t\t\tif(this.cursorPosition > this.textVal.length - 1) {\n\t\t\t\t\tthis.cursorPosition = this.textVal.length - 1;\n\t\t\t\t}\n\t\t\t\tif(this.cursorPosition == -1) {\n\t\t\t\t\tmySVGPoint.y = (this.textboxText.getBBox().y + this.textStyles[\"font-size\"] * 0.5);\n\t\t\t\t\tthis.cursorPosition = this.textboxText.getCharNumAtPosition(mySVGPoint);\n\t\t\t\t\tif(this.cursorPosition == -1) {\n\t\t\t\t\t\tif(mySVGPoint.x > (this.textboxText.getBBox().x + this.textboxText.getBBox().width)) {\n\t\t\t\t\t\t\tthis.cursorPosition = this.textVal.length - 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar bbox = this.textboxText.getBBox();\n\t\t\t\tvar diffLeft = Math.abs(mySVGPoint.x - bbox.x);\n\t\t\t\tvar diffRight = Math.abs(mySVGPoint.x - (bbox.x + bbox.width));\n\t\t\t\tif(diffLeft < diffRight) {\n\t\t\t\t\tthis.cursorPosition = -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.cursorPosition = this.textVal.length - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.cursorPosition = -1;\n\t\t}\n\t}\n\n\ttextbox.prototype.moveTo = function(moveX,moveY)\n\t{\n\t\tthis.x = moveX;\n\t\tthis.y = moveY;\n\t\tthis.textboxRect.setAttributeNS(null,\"x\",this.x);\n\t\tthis.textboxRect.setAttributeNS(null,\"y\",this.y);\n\t\tthis.svg.setAttributeNS(null,\"x\",this.x + this.textStyles[\"font-size\"] / 4);\n\t\tthis.svg.setAttributeNS(null,\"y\",this.y + this.boxHeight * 0.02);\n\t\tthis.svg.setAttributeNS(null,\"viewBox\",(this.x + this.textStyles[\"font-size\"] / 4)+\" \"+(this.y + this.boxHeight * 0.02)+\" \"+(this.boxWidth - (this.textStyles[\"font-size\"]) / 2)+\" \"+(this.boxHeight * 0.96));\n\t\tthis.textboxText.setAttributeNS(null,\"x\",(this.x + this.textStyles[\"font-size\"] / 3));\n\t\tthis.textboxText.setAttributeNS(null,\"y\",(this.y + this.textYOffset));\n\t\tthis.selectionRect.setAttributeNS(null,\"x\",(this.x + this.textStyles[\"font-size\"] / 3));\n\t\tthis.selectionRect.setAttributeNS(null,\"y\",(this.y + this.textYOffset - this.textStyles[\"font-size\"] * 0.9));\n\t\tthis.textboxCursor.setAttributeNS(null,\"x1\",this.x);\n\t\tthis.textboxCursor.setAttributeNS(null,\"y1\",(this.y + this.textYOffset + this.textStyles[\"font-size\"] * 0.2));\n\t\tthis.textboxCursor.setAttributeNS(null,\"x2\",this.x);\n\t\tthis.textboxCursor.setAttributeNS(null,\"y2\",(this.y + this.textYOffset - this.textStyles[\"font-size\"] * 0.9));\n\t\tthis.cursorPosition = -1;\n\t\tthis.setCursorPos();\t\n\t}\n\n\ttextbox.prototype.resize = function(newWidth)\n\t{\n\t\tthis.boxWidth = newWidth;\n\t\tthis.textboxRect.setAttributeNS(null,\"width\",this.boxWidth);\n\t\tthis.svg.setAttributeNS(null,\"width\",this.boxWidth - (this.textStyles[\"font-size\"]) / 2);\n\t\tthis.svg.setAttributeNS(null,\"viewBox\",(this.x + this.textStyles[\"font-size\"] / 4)+\" \"+(this.y + this.boxHeight * 0.02)+\" \"+(this.boxWidth - (this.textStyles[\"font-size\"]) / 2)+\" \"+(this.boxHeight * 0.96));\n\t\tthis.cursorPosition = -1;\n\t\tthis.setCursorPos();\t\n\t}\n\n\tfunction checkBox(id,parentNode,x,y,checkboxId,checkcrossId,checkedStatus,labelText,textStyles,labelDistance,labelYOffset,radioButtonGroup,functionToCall)\n\t{\n\t\tvar nrArguments = 13;\n\t\tvar createCheckbox= true;\n\t\tif(arguments.length == nrArguments) {\t\n\t\t\tthis.id = id;\n\t\t\tthis.parentNode = parentNode;\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.checkboxId = checkboxId;\n\t\t\tthis.checkcrossId = checkcrossId;\n\t\t\tthis.checkedStatus = checkedStatus;\n\t\t\tthis.labelText = labelText;\n\t\t\tthis.textStyles = textStyles;\n\t\t\tif(!this.textStyles[\"font-size\"]) {\n\t\t\t\tthis.textStyles[\"font-size\"] = 12;\n\t\t\t}\n\t\t\tthis.labelDistance = labelDistance;\n\t\t\tthis.labelYOffset = labelYOffset;\n\t\t\tthis.radioButtonGroup = radioButtonGroup;\n\t\t\tthis.functionToCall = functionToCall;\n\t\t\tthis.exists = true;\n\t\t\tthis.label = undefined;\n\t\t}\n\t\telse {\n\t\t\tcreateCheckbox = false;\n\t\t\talert(\"Error in checkbox (\"+id+\"): wrong nr of arguments! You have to pass over \"+nrArguments+\" parameters.\");\n\t\t}\n\t\tif(createCheckbox) {\n\t\t\tthis.timer = new Timer(this);\n\t\t\tif(this.radioButtonGroup) {\n\t\t\t\tthis.timerMs = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.timerMs = 200;\n\t\t\t}\n\t\t\tthis.createCheckBox();\n\t\t}\n\t\telse {\n\t\t\talert(\"Could not create checkbox with id '\"+id+\"' due to errors in the constructor parameters\");\t\t\n\t\t}\n\t}\n\n\tcheckBox.prototype.createCheckBox = function()\n\t{\n\t\tif(typeof(this.parentNode) == \"string\") {\n\t\t\tthis.parentNode = document.getElementById(this.parentNode);\n\t\t}\n\t\tthis.checkBox = document.createElementNS(svgNS,\"use\");\n\t\tthis.checkBox.setAttributeNS(null,\"x\",this.x);\n\t\tthis.checkBox.setAttributeNS(null,\"y\",this.y);\n\t\tthis.checkBox.setAttributeNS(xlinkNS,\"href\",\"#\"+this.checkboxId);\n\t\tthis.checkBox.addEventListener(\"click\",this,false);\n\t\tthis.checkBox.setAttributeNS(null,\"cursor\",\"pointer\");\n\t\tthis.parentNode.appendChild(this.checkBox);\n\t\tthis.checkCross = document.createElementNS(svgNS,\"use\");\n\t\tthis.checkCross.setAttributeNS(null,\"x\",this.x);\n\t\tthis.checkCross.setAttributeNS(null,\"y\",this.y);\n\t\tthis.checkCross.setAttributeNS(xlinkNS,\"href\",\"#\"+this.checkcrossId);\n\t\tthis.parentNode.appendChild(this.checkCross);\n\t\tif(this.checkedStatus == false) {\n\t\t\tthis.checkCross.setAttributeNS(null,\"display\",\"none\");\n\t\t}\n\t\tif(this.labelText) {\n\t\t\tif(this.labelText.length > 0) {\n\t\t\t\tthis.label = document.createElementNS(svgNS,\"text\");\n\t\t\t\tfor (var attrib in this.textStyles) {\n\t\t\t\t\tvar value = this.textStyles[attrib];\n\t\t\t\t\tif(attrib == \"font-size\") {\n\t\t\t\t\t\tvalue += \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tthis.label.setAttributeNS(null,attrib,value);\n\t\t\t\t}\n\t\t\t\tthis.label.setAttributeNS(null,\"x\",(this.x + this.labelDistance));\n\t\t\t\tthis.label.setAttributeNS(null,\"y\",(this.y + this.labelYOffset));\n\t\t\t\tthis.label.setAttributeNS(null,\"cursor\",\"pointer\");\n\t\t\t\tvar labelTextNode = document.createTextNode(this.labelText);\n\t\t\t\tthis.label.appendChild(labelTextNode);\n\t\t\t\tthis.label.setAttributeNS(null,\"pointer-events\",\"all\");\n\t\t\t\tthis.label.addEventListener(\"click\",this,false);\n\t\t\t\tthis.parentNode.appendChild(this.label);\n\t\t\t}\n\t\t}\n\t\tif(this.radioButtonGroup) {\n\t\t\tthis.radioButtonGroup.addCheckBox(this);\n\t\t}\n\t}\n\n\tcheckBox.prototype.handleEvent = function(evt)\n\t{\n\t\tif(evt.type == \"click\") {\n\t\t\tif(this.checkedStatus == true) {\n\t\t\t\tthis.checkCross.setAttributeNS(null,\"display\",\"none\");\n\t\t\t\tthis.checkedStatus = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.checkCross.setAttributeNS(null,\"display\",\"inline\");\n\t\t\t\tthis.checkedStatus = true;\n\t\t\t}\n\t\t}\n\t\tthis.timer.setTimeout(\"fireFunction\",this.timerMs);\n\t}\n\n\tcheckBox.prototype.fireFunction = function()\n\t{\n\t\tif(this.radioButtonGroup) {\n\t\t\tthis.radioButtonGroup.selectById(this.id,true);\n\t\t}\n\t\telse {\n\t\t\tif(typeof(this.functionToCall) == \"function\") {\n\t\t\t\tthis.functionToCall(this.id,this.checkedStatus,this.labelText);\n\t\t\t}\n\t\t\tif(typeof(this.functionToCall) == \"object\") {\n\t\t\t\tthis.functionToCall.checkBoxChanged(this.id,this.checkedStatus,this.labelText);\n\t\t\t}\n\t\t\tif(typeof(this.functionToCall) == undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tcheckBox.prototype.check = function(FireFunction)\n\t{\n\t\tthis.checkCross.setAttributeNS(null,\"display\",\"inherit\");\n\t\tthis.checkedStatus = true;\n\t\tif(FireFunction) {\n\t\t\tthis.timer.setTimeout(\"fireFunction\",this.timerMs);\n\t\t}\n\t}\n\n\tcheckBox.prototype.uncheck = function(FireFunction)\n\t{\n\t\tthis.checkCross.setAttributeNS(null,\"display\",\"none\");\n\t\tthis.checkedStatus = false;\n\t\tif(FireFunction) {\n\t\t\tthis.timer.setTimeout(\"fireFunction\",this.timerMs);\n\t\t}\n\t}\n\n\tcheckBox.prototype.moveTo = "
                    << "function(moveX,moveY)\n\t{\n\t\tthis.x = moveX;\n\t\tthis.y = moveY;\n\t\tthis.checkBox.setAttributeNS(null,\"x\",this.x);\n\t\tthis.checkBox.setAttributeNS(null,\"y\",this.y);\n\t\tthis.checkCross.setAttributeNS(null,\"x\",this.x);\n\t\tthis.checkCross.setAttributeNS(null,\"y\",this.y);\n\t\tif(this.labelText) {\n\t\t\tthis.label.setAttributeNS(null,\"x\",(this.x + this.labelDistance));\n\t\t\tthis.label.setAttributeNS(null,\"y\",(this.y + this.labelYOffset));\n\t\t}\n\t}\n\n\tcheckBox.prototype.remove = function(FireFunction)\n\t{\n\t\tthis.parentNode.removeChild(this.checkBox);\n\t\tthis.parentNode.removeChild(this.checkCross);\n\t\tif(this.label) {\n\t\t\tthis.parentNode.removeChild(this.label);\t\n\t\t}\n\t\tthis.exists = false;\n\t}\n\n\tcheckBox.prototype.setLabelText = function(labelText)\n\t{\n\t\tthis.labelText = labelText\n\t\tif(this.label) {\n\t\t\tthis.label.firstChild.nodeValue = labelText;\n\t\t}\n\t\telse {\n\t\t\tif(this.labelText.length > 0) {\n\t\t\t\tthis.label = document.createElementNS(svgNS,\"text\");\n\t\t\t\tfor (var attrib in this.textStyles) {\n\t\t\t\t\tvalue = this.textStyles[attrib];\n\t\t\t\t\tif(attrib == \"font-size\") {\n\t\t\t\t\t\tvalue += \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tthis.label.setAttributeNS(null,attrib,value);\n\t\t\t\t}\n\t\t\t\tthis.label.setAttributeNS(null,\"x\",(this.x + this.labelDistance));\n\t\t\t\tthis.label.setAttributeNS(null,\"y\",(this.y + this.textStyles[\"font-size\"] * 0.3));\n\t\t\t\tvar labelTextNode = document.createTextNode(this.labelText);\n\t\t\t\tthis.label.appendChild(labelTextNode);\n\t\t\t\tthis.parentNode.appendChild(this.label);\n\t\t\t}\t\n\t\t}\n\t}\n\n\tfunction mapApp(adjustVBonWindowResize,resizeCallbackFunction)\n\t{\n\t\tthis.adjustVBonWindowResize = adjustVBonWindowResize;\n\t\tthis.resizeCallbackFunction = resizeCallbackFunction;\n\t\tthis.initialized = false;\n\t\tif(!document.documentElement.getScreenCTM) {\n\t\t\tdocument.documentElement.addEventListener(\"SVGScroll\",this,false);\n\t\t\tdocument.documentElement.addEventListener(\"SVGZoom\",this,false);\n\t\t}\n\t\ttry {\n\t\t\twindow.addEventListener(\"resize\",this,false);\n\t\t}\n\t\tcatch(er) {\n\t\t\tdocument.documentElement.addEventListener(\"SVGResize\",this,false);\n\t\t}\n\t\tthis.navigator = \"Batik\";\n\t\tif(window.navigator) {\n\t\t\tif(window.navigator.appName.match(/Adobe/gi)) {\n\t\t\t\tthis.navigator = \"Adobe\";\n\t\t\t}\n\t\t\tif(window.navigator.appName.match(/Netscape/gi)) {\n\t\t\t\tthis.navigator = \"Mozilla\";\n\t\t\t}\n\t\t\tif(window.navigator.userAgent) {\n\t\t\t\tif(window.navigator.userAgent.match(/Opera/gi)) {\n\t\t\t\t\tthis.navigator = \"Opera\";\n\t\t\t\t}\n\t\t\t\tif(window.navigator.userAgent.match(/AppleWebKit/gi) || window.navigator.userAgent.match(/Safari/gi) ) {\n\t\t\t\t\tthis.navigator = \"Safari\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.tooltipsEnabled = false;\n\t\tthis.Windows = new Array();\n\t\tthis.checkBoxes = new Array();\n\t\tthis.radioButtonGroups = new Array();\n\t\tthis.tabgroups = new Array();\n\t\tthis.textboxes = new Array();\n\t\tthis.buttons = new Array();\t\n\t\tthis.selectionLists = new Array();\t\n\t\tthis.comboboxes = new Array();\t\n\t\tthis.sliders = new Array();\n\t\tthis.scrollbars = new Array();\n\t\tthis.colourPickers = new Array();\n\t\tthis.htmlAreas = new Array();\n\t\tthis.tables = new Array();\n\t}\n\n\tmapApp.prototype.handleEvent = function(evt)\n\t{\n\t\tif(evt.type == \"SVGResize\" || evt.type == \"resize\" || evt.type == \"SVGScroll\" || evt.type == \"SVGZoom\") {\n\t\t\tthis.resetFactors();\n\t\t}\n\t\tif((evt.type == \"mouseover\" || evt.type == \"mouseout\" || evt.type == \"mousemove\") && this.tooltipsEnabled) {\n\t\t\tthis.displayTooltip(evt);\n\t\t}\n\t}\n\n\tmapApp.prototype.resetFactors = function()\n\t{\n\t\tif(window.innerWidth) {\n\t\t\tthis.innerWidth = window.innerWidth;\n\t\t\tthis.innerHeight = window.innerHeight;\n\t\t}\n\t\telse {\n\t\t\tvar viewPort = document.documentElement.viewport;\n\t\t\tthis.innerWidth = viewPort.width;\n\t\t\tthis.innerHeight = viewPort.height;\n\t\t}\n\t\tif(this.adjustVBonWindowResize) {\n\t\t\tthis.adjustViewBox();\n\t\t}\n\t\tif(!document.documentElement.getScreenCTM) {\n\t\t\tvar svgroot = document.documentElement;\n\t\t\tthis.viewBox = new ViewBox(svgroot);\n\t\t\tvar trans = svgroot.currentTranslate;\n\t\t\tvar scale = svgroot.currentScale;\n\t\t\tthis.m = this.viewBox.getTM();\n\t\t\tthis.m = this.m.scale( 1/scale );\n\t\t\tthis.m = this.m.translate(-trans.x, -trans.y);\n\t\t}\n\t\tif(this.resizeCallbackFunction && this.initialized) {\n\t\t\tif(typeof(this.resizeCallbackFunction) == \"function\") {\n\t\t\t\tthis.resizeCallbackFunction();\n\t\t\t}\n\t\t}\n\t\tthis.initialized = true;\n\t}\n\n\tmapApp.prototype.adjustViewBox = function()\n\t{\n\t\tdocument.documentElement.setAttributeNS(null,\"viewBox\",\"0 0 \"+this.innerWidth+\" \"+this.innerHeight);\n\t}\n\n\tmapApp.prototype.calcCoord = function(evt,ctmNode)\n\t{\n\t\tvar svgPoint = document.documentElement.createSVGPoint();\n\t\tsvgPoint.x = evt.clientX;\n\t\tsvgPoint.y = evt.clientY;\n\t\tif(!document.documentElement.getScreenCTM) {\n\t\t\tif(ctmNode) {\n\t\t\t\tvar matrix = getTransformToRootElement(ctmNode);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar matrix = getTransformToRootElement(evt.target);\t\t\t\n\t\t\t}\n\t\t\tsvgPoint = svgPoint.matrixTransform(matrix.inverse().multiply(this.m));\n\t\t}\n\t\telse {\n\t\t\tif(ctmNode) {\n\t\t\t\tvar matrix = ctmNode.getScreenCTM();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar matrix = evt.target.getScreenCTM();\t\t\n\t\t\t}\n\t\tsvgPoint = svgPoint.matrixTransform(matrix.inverse());\n\t\t}\n\t\treturn svgPoint;\n\t}\n\n\tmapApp.prototype.calcInvCoord = function(svgPoint)\n\t{\n\t\tif(!document.documentElement.getScreenCTM) {\n\t\t\tvar matrix = getTransformToRootElement(document.documentElement);\n\t\t}\n\t\telse {\n\t\t\tvar matrix = document.documentElement.getScreenCTM();\n\t\t}\n\t\tsvgPoint = svgPoint.matrixTransform(matrix);\n\t\treturn svgPoint;\n\t}\n\n\tmapApp.prototype.initTooltips = function(groupId,tooltipTextAttribs,tooltipRectAttribs,xOffset,yOffset,padding)\n\t{\n\t\tvar nrArguments = 6;\n\t\tif(arguments.length == nrArguments) {\n\t\t\tthis.toolTipGroup = document.getElementById(groupId);\n\t\t\tthis.tooltipTextAttribs = tooltipTextAttribs;\n\t\t\tif(!this.tooltipTextAttribs[\"font-size\"]) {\n\t\t\t\tthis.tooltipTextAttribs[\"font-size\"] = 12;\n\t\t\t}\t\n\t\t\tthis.tooltipRectAttribs = tooltipRectAttribs;\n\t\t\tthis.xOffset = xOffset;\n\t\t\tthis.yOffset = yOffset;\n\t\t\tthis.padding = padding;\n\t\t\tif(!this.toolTipGroup) {\n\t\t\t\talert(\"Error: could not find tooltip group with id '\"+groupId+\"'. Please specify a correct tooltip parent group id!\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toolTipGroup.setAttributeNS(null,\"visibility\",\"hidden\");\n\t\t\t\tthis.toolTipGroup.setAttributeNS(null,\"pointer-events\",\"none\");\n\t\t\t\tthis.tooltipsEnabled = true;\n\t\t\t\tthis.tooltipText = document.createElementNS(svgNS,\"text\");\n\t\t\t\tfor (var attrib in this.tooltipTextAttribs) {\n\t\t\t\t\tvalue = this.tooltipTextAttribs[attrib];\n\t\t\t\t\tif(attrib == \"font-size\") {\n\t\t\t\t\t\tvalue += \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tthis.tooltipText.setAttributeNS(null,attrib,value);\n\t\t\t\t}\n\t\t\t\tvar textNode = document.createTextNode(\"Tooltip\");\n\t\t\t\tthis.tooltipText.appendChild(textNode);\n\t\t\t\tthis.toolTipGroup.appendChild(this.tooltipText);\n\t\t\t\tvar bbox = this.tooltipText.getBBox();\n\t\t\t\tthis.tooltipRect = document.createElementNS(svgNS,\"rect\");\n\t\t\t\tthis.tooltipRect.setAttributeNS(null,\"x\",bbox.x-this.padding);\n\t\t\t\tthis.tooltipRect.setAttributeNS(null,\"y\",bbox.y-this.padding);\n\t\t\t\tthis.tooltipRect.setAttributeNS(null,\"width\",bbox.width+this.padding*2);\n\t\t\t\tthis.tooltipRect.setAttributeNS(null,\"height\",bbox.height+this.padding*2);\n\t\t\t\tfor (var attrib in this.tooltipRectAttribs) {\n\t\t\t\t\tthis.tooltipRect.setAttributeNS(null,attrib,this.tooltipRectAttribs[attrib]);\n\t\t\t\t}\n\t\t\t\tthis.toolTipGroup.insertBefore(this.tooltipRect,this.tooltipText);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t\talert(\"Error in method 'initTooltips': wrong nr of arguments! You have to pass over \"+nrArguments+\" parameters.\");\t\t\t\n\t\t}\n\t}\n\n\tmapApp.prototype.addTooltip = function(tooltipNode,tooltipTextvalue,followmouse,checkForUpdates,targetOrCurrentTarget,childAttrib)\n\t{\n\t\tvar nrArguments = 6;\n\t\tif(arguments.length == nrArguments) {\n\t\t\tif(typeof(tooltipNode) == \"string\") {\n\t\t\t\ttooltipNode = document.getElementById(tooltipNode);\n\t\t\t}\n\t\t\tif(!tooltipNode.hasAttributeNS(attribNS,\"tooltip\")) {\n\t\t\t\tif(tooltipTextvalue) {\n\t\t\t\t\ttooltipNode.setAttributeNS(attribNS,\"tooltip\",tooltipTextvalue);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttooltipNode.setAttributeNS(attribNS,\"tooltip\",\"Tooltip\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(checkForUpdates) {\n\t\t\t\ttooltipNode.setAttributeNS(attribNS,\"tooltipUpdates\",\"true\");\n\t\t\t}\n\t\t\tif(targetOrCurrentTarget == \"target\") {\n\t\t\t\ttooltipNode.setAttributeNS(attribNS,\"tooltipParent\",\"true\");\n\t\t\t}\n\t\t\tif(childAttrib) {\n\t\t\t\ttooltipNode.setAttributeNS(attribNS,\"tooltipAttrib\",childAttrib);\n\t\t\t}\n\t\t\ttooltipNode.addEventListener(\"mouseover\",this,false);\n\t\t\ttooltipNode.addEventListener(\"mouseout\",this,false);\n\t\t\tif(followmouse) {\n\t\t\t\ttooltipNode.addEventListener(\"mousemove\",this,false);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\talert(\"Error in method 'addTooltip()': wrong nr of arguments! You have to pass over \"+nrArguments+\" parameters.\");\n\t\t}\n\t}\n\n\tmapApp.prototype.displayTooltip = function(evt)\n\t{\n\t\tvar curEl = evt.currentTarget;\n\t\tvar coords = this.calcCoord(evt,this.toolTipGroup.parentNode);\n\t\tif(evt.type == \"mouseover\") {\n\t\t\tthis.toolTipGroup.setAttributeNS(null,\"visibility\",\"visible\");\n\t\t\tthis.toolTipGroup.setAttributeNS(null,\"transform\",\"translate(\"+(coords.x+this.xOffset)+\",\"+(coords.y+this.yOffset)+\")\");\n\t\t\tthis.updateTooltip(evt);\n\t\t}\n\t\tif(evt.type == \"mouseout\") {\n\t\t\tthis.toolTipGroup.setAttributeNS(null,\"visibility\",\"hidden\");\n\t\t}\n\t\tif(evt.type == \"mousemove\") {\n\t\t\tthis.toolTipGroup.setAttributeNS(null,\"transform\",\"translate(\"+(coords.x+this.xOffset)+\",\"+(coords.y+this.yOffset)+\")\");\n\t\t\tif(curEl.hasAttributeNS(attribNS,\"tooltipUpdates\")) {\n\t\t\t\tthis.updateTooltip(evt);\n\t\t\t}\n\t\t}\n\t}\n\n\tmapApp.prototype.updateTooltip = function(evt)\n\t{\n\t\tvar el = evt.currentTarget;\n\t\tif(el.hasAttributeNS(attribNS,\"tooltipParent\")) {\n\t\t\tvar attribName = \"tooltip\";\n\t\t\tif(el.hasAttributeNS(attribNS,\"tooltipAttrib\")) {\n\t\t\t\tattribName = el.getAttributeNS(attribNS,\"tooltipAttrib\");\n\t\t\t}\n\t\t\tel = evt.target;\n\t\t\tvar myText = el.getAttributeNS(attribNS,attribName);\n\t\t}\n\t\telse {\n\t\t\tvar myText = el.getAttributeNS(attribNS,\"tooltip\");\n\t\t}\n\t\tif(myText) {\n\t\t\tvar textArray = myText.split(\"\\\\n\");\n\t\t\twhile(this.tooltipText.hasChildNodes()) {\n\t\t\t\tthis.tooltipText.removeChild(this.tooltipText.lastChild);\n\t\t\t}\n\t\t\tfor (var i=0;i<textArray.length;i++) {\n\t\t\t\tvar tspanEl = document.createElementNS(svgNS,\"tspan\");\n\t\t\t\ttspanEl.setAttributeNS(null,\"x\",0);\n\t\t\t\tvar dy = this.tooltipTextAttribs[\"font-size\"];\n\t\t\t\tif(i == 0) {\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t}\n\t\t\t\ttspanEl.setAttributeNS(null,\"dy\",dy);\n\t\t\t\tvar textNode = document.createTextNode(textArray[i]);\n\t\t\t\ttspanEl.appendChild(textNode);\n\t\t\t\tthis.tooltipText.appendChild(tspanEl);\n\t\t\t}\n\t\t\tvar bbox = this.tooltipText.getBBox();\n\t\t\tthis.tooltipRect.setAttributeNS(null,\"x\",bbox.x-this.padding);\n\t\t\tthis.tooltipRect.setAttributeNS(null,\"y\",bbox.y-this.padding);\n\t\t\tthis.tooltipRect.setAttributeNS(null,\"width\",bbox.width+this.padding*2);\n\t\t\tthis.tooltipRect.setAttributeNS(null,\"height\",bbox.height+this.padding*2);\n\t\t}\n\t\telse {\n\t\t\tthis.toolTipGroup.setAttributeNS(null,\"visibility\",\"hidden\");\n\t\t}\n\t}\n\n\tmapApp.prototype.enableTooltips = function()\n\t{\n\t\tthis.tooltipsEnabled = true;\n\t}\n\n\tmapApp.prototype.disableTooltips = function()\n\t{\n\t\tthis.tooltipsEnabled = false;\n\t\tthis.toolTipGroup.setAttributeNS(null,\"visibility\",\"hidden\");\n\t}\n\n\tViewBox.VERSION = \"1.0\";\n\n\tfunction ViewBox(svgNode)\n\t{\n\t\tif( arguments.length > 0 ) {\n\t\t\tthis.init(svgNode);\n\t\t}\n\t}\n\n\tViewBox.prototype.init = function(svgNode)\n\t{\n\t\tvar viewBox = svgNode.getAttributeNS(null, \"viewBox\");\n\t\tvar preserveAspectRatio = svgNode.getAttributeNS(null, \"preserveAspectRatio\");\n\t\tif( viewBox != \"\" ) {\n\t\t\tvar params = viewBox.split(/\\s*,\\s*|\\s+/);\n\t\t\tthis.x      = parseFloat( params[0] );\n\t\t\tthis.y      = parseFloat( params[1] );\n\t\t\tthis.width  = parseFloat( params[2] );\n\t\t\tthis.height = parseFloat( params[3] );\n\t\t} else {\n\t\t\tthis.x      = 0;\n\t\t\tthis.y      = 0;\n\t\t\tthis.width  = innerWidth;\n\t\t\tthis.height = innerHeight;\n\t}\n\n\tthis.setPAR(preserveAspectRatio);\n\tvar dummy = this.getTM();\n};\n\n\tViewBox.prototype.getTM = function()\n\t{\n\t\tvar svgRoot      = document.documentElement;\n\t\tvar matrix       = document.documentElement.createSVGMatrix();\n\t\tthis.windowWidth = svgRoot.getAttributeNS(null,\"width\");\n\t\tif(this.windowWidth.match(/%/) || this.windowWidth == null) {\n\t\t\tif(this.windowWidth == null) {\n\t\t\t\tif(window.innerWidth) {\n\t\t\t\t\tthis.windowWidth = window.innerWidth;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.windowWidth = svgRoot.viewport.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar factor = parseFloat(this.windowWidth.replace(/%/,\"\"))/100;\n\t\t\t\tif(window.innerWidth) {\n\t\t\t\t\tthis.windowWidth = window.innerWidth * "
                    << "factor;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.windowWidth = svgRoot.viewport.width * factor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.windowWidth = parseFloat(this.windowWidth);\n\t\t}\n\t\tthis.windowHeight = svgRoot.getAttributeNS(null,\"height\");\n\t\tif(this.windowHeight.match(/%/) || this.windowHeight == null) {\n\t\t\tif(this.windowHeight == null) {\n\t\t\t\tif(window.innerHeight) {\n\t\t\t\t\tthis.windowHeight = window.innerHeight;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.windowHeight = svgRoot.viewport.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar factor = parseFloat(this.windowHeight.replace(/%/,\"\"))/100;\n\t\t\t\tif(window.innerHeight) {\n\t\t\t\t\tthis.windowHeight = window.innerHeight * factor;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.windowHeight = svgRoot.viewport.height * factor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.windowHeight = parseFloat(this.windowHeight);\n\t\t}\n\t\tvar x_ratio = this.width  / this.windowWidth;\n\t\tvar y_ratio = this.height / this.windowHeight;\n\n\t\tmatrix = matrix.translate(this.x, this.y);\n\t\tif( this.alignX == \"none\" ) {\n\t\tmatrix = matrix.scaleNonUniform( x_ratio, y_ratio );\n\t\t} else {\n\t\t\tif( x_ratio < y_ratio && this.meetOrSlice == \"meet\" ||\n\t\t\tx_ratio > y_ratio && this.meetOrSlice == \"slice\"   )\n\t\t\t{\n\t\t\t\tvar x_trans = 0;\n\t\t\t\tvar x_diff  = this.windowWidth*y_ratio - this.width;\n\t\t\t\tif( this.alignX == \"Mid\" )\n\t\t\t\t\tx_trans = -x_diff/2;\n\t\t\t\telse if( this.alignX == \"Max\" )\n\t\t\t\t\tx_trans = -x_diff;\n\t\t\t\tmatrix = matrix.translate(x_trans, 0);\n\t\t\t\tmatrix = matrix.scale( y_ratio );\n\t\t\t}\n\t\t\telse if( x_ratio > y_ratio && this.meetOrSlice == \"meet\" || x_ratio < y_ratio && this.meetOrSlice == \"slice\" )\n\t\t\t{\n\t\t\t\tvar y_trans = 0;\n\t\t\t\tvar y_diff  = this.windowHeight*x_ratio - this.height;\n\t\t\t\tif( this.alignY == \"Mid\" )\n\t\t\t\t\ty_trans = -y_diff/2;\n\t\t\t\telse if( this.alignY == \"Max\" )\n\t\t\t\t\ty_trans = -y_diff;\n\t\t\t\tmatrix = matrix.translate(0, y_trans);\n\t\t\t\tmatrix = matrix.scale( x_ratio );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmatrix = matrix.scale( x_ratio );\n\t\t\t}\n\t\t}\n\treturn matrix;\n\t}\n\n\tViewBox.prototype.setPAR = function(PAR)\n\t{\n\t\tif( PAR ) {\n\t\t\tvar params = PAR.split(/\\s+/);\n\t\t\tvar align  = params[0];\n\t\t\tif( align == \"none\" ) {\n\t\t\t\tthis.alignX = \"none\";\n\t\t\t\tthis.alignY = \"none\";\n\t\t\t} else {\n\t\t\t\tthis.alignX = align.substring(1,4);\n\t\t\t\tthis.alignY = align.substring(5,9);\n\t\t\t}\n\t\t\tif( params.length == 2 ) {\n\t\t\t\tthis.meetOrSlice = params[1];\n\t\t\t} else {\n\t\t\t\tthis.meetOrSlice = \"meet\";\n\t\t\t}\n\t\t} else {\n\t\t\tthis.align  = \"xMidYMid\";\n\t\t\tthis.alignX = \"Mid\";\n\t\t\tthis.alignY = \"Mid\";\n\t\t\tthis.meetOrSlice = \"meet\";\n\t\t}\n\t};\n\nvar svgNS = \"http://www.w3.org/2000/svg\";\nvar xlinkNS = \"http://www.w3.org/1999/xlink\";\nvar cartoNS = \"http://www.carto.net/attrib\";\nvar attribNS = \"http://www.carto.net/attrib\";\nvar batikNS = \"http://xml.apache.org/batik/ext\";\n\nfunction toPolarDir(xdiff,ydiff)\n{\n\tvar direction = (Math.atan2(ydiff,xdiff));\n\treturn(direction);\n}\n\nfunction toPolarDist(xdiff,ydiff)\n{\n\tvar distance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n\treturn(distance);\n}\n\nfunction toRectX(direction,distance)\n{\n\tvar x = distance * Math.cos(direction);\n\treturn(x);\n}\n\nfunction toRectY(direction,distance)\n{\n\ty = distance * Math.sin(direction);\n\treturn(y);\n}\n\nfunction DegToRad(deg)\n{\n\treturn (deg / 180.0 * Math.PI);\n}\n\nfunction RadToDeg(rad)\n{\n\treturn (rad / Math.PI * 180.0);\n}\n\nfunction dd2dms(dd)\n{\n\tvar minutes = (Math.abs(dd) - Math.floor(Math.abs(dd))) * 60;\n\tvar seconds = (minutes - Math.floor(minutes)) * 60;\n\tvar minutes = Math.floor(minutes);\n\tif(dd >= 0) {\n\t\tvar degrees = Math.floor(dd);\n\t}\n\telse {\n\t\tvar degrees = Math.ceil(dd);       \n\t}\n\treturn {deg:degrees,min:minutes,sec:seconds};\n}\n\nfunction dms2dd(deg,min,sec)\n{\n\tif(deg < 0) {\n\t\treturn deg - (min / 60) - (sec / 3600);\n\t}\n\telse {\n\t\treturn deg + (min / 60) + (sec / 3600);\n\t}\n}\n\nfunction log(x,b)\n{\n\tif(b==null) b=Math.E;\n\treturn Math.log(x)/Math.log(b);\n}\n\nfunction intBilinear(za,zb,zc,zd,xpos,ypos,ax,ay,cellsize)\n{\n\tvar e = (xpos - ax) / cellsize;\n\tvar f = (ypos - ay) / cellsize;\n\tvar wa = (1 - e) * (1 - f);\n\tvar wb = e * (1 - f);\n\tvar wc = e * f;\n\tvar wd = f * (1 - e);\n\tvar interpol_value = wa * zc + wb * zd + wc * za + wd * zb;\n\treturn interpol_value;\t\n}\n\nfunction leftOfTest(pointx,pointy,linex1,liney1,linex2,liney2)\n{\n\tvar result = (liney1 - pointy) * (linex2 - linex1) - (linex1 - pointx) * (liney2 - liney1);\n\tif(result < 0) {\n\t\tvar leftof = 1;\n\t}\n\telse {\n\t\tvar leftof = 0;\t\n\t}\n\treturn leftof;\n}\n\nfunction distFromLine(xpoint,ypoint,linex1,liney1,linex2,liney2)\n{\n\tvar dx = linex2 - linex1;\n\tvar dy = liney2 - liney1;\n\tvar distance = (dy * (xpoint - linex1) - dx * (ypoint - liney1)) / Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));\n\treturn distance;\n}\n\nfunction angleBetwTwoLines(ax,ay,bx,by)\n{\n\tvar angle = Math.acos((ax * bx + ay * by) / (Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2)) * Math.sqrt(Math.pow(bx,2) + Math.pow(by,2))));\n\treturn angle;\n}\n\nfunction calcBisectorVector(ax,ay,bx,by)\n{\n\tvar betraga = Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2));\n\tvar betragb = Math.sqrt(Math.pow(bx,2) + Math.pow(by,2));\n\tvar c = new Array();\n\tc[0] = ax / betraga + bx / betragb;\n\tc[1] = ay / betraga + by / betragb;\n\treturn c;\n}\n\nfunction calcBisectorAngle(ax,ay,bx,by)\n{\n\tvar betraga = Math.sqrt(Math.pow(ax,2) + Math.pow(ay,2));\n\tvar betragb = Math.sqrt(Math.pow(bx,2) + Math.pow(by,2));\n\tvar c1 = ax / betraga + bx / betragb;\n\tvar c2 = ay / betraga + by / betragb;\n\tvar angle = toPolarDir(c1,c2);\n\treturn angle;\n}\n\nfunction intersect2lines(line1x1,line1y1,line1x2,line1y2,line2x1,line2y1,line2x2,line2y2)\n{\n\tvar interSectPoint = new Object();\n\tvar denominator = (line2y2 - line2y1)*(line1x2 - line1x1) - (line2x2 - line2x1)*(line1y2 - line1y1);\n\tif(denominator == 0) {\n\t\talert(\"lines are parallel\");\n\t}\n\telse {\n\t\tvar ua = ((line2x2 - line2x1)*(line1y1 - line2y1) - (line2y2 - line2y1)*(line1x1 - line2x1)) / denominator;\n\t\tvar ub = ((line1x2 - line1x1)*(line1y1 - line2y1) - (line1y2 - line1y1)*(line1x1 - line2x1)) / denominator;\n\t}\n\tinterSectPoint[\"x\"] = line1x1 + ua * (line1x2 - line1x1);\n\tinterSectPoint[\"y\"] = line1y1 + ua * (line1y2 - line1y1);\n\treturn interSectPoint;\n}\n\nfunction formatNumberString(inputNumber,separator)\n{\n\tif(typeof(inputNumber) == \"Number\") {\n\t\tvar myTempString = inputNumber.toString();\n\t}\n\telse {\n\t\tvar myTempString = inputNumber;\n\t}\n\tvar newString=\"\";\n\tvar splitResults = myTempString.split(\".\");\n\tvar myCounter = splitResults[0].length;\n\tif(myCounter > 3) {\n\t\twhile(myCounter > 0) {\n\t\t\tif(myCounter > 3) {\n\t\t\t\tnewString = separator + splitResults[0].substr(myCounter - 3,3) + newString;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewString = splitResults[0].substr(0,myCounter) + newString;\n\t\t\t}\n\t\t\tmyCounter -= 3;\n\t\t}\n\t}\n\telse {\n\t\tnewString = splitResults[0];\n\t}\n\tif(splitResults[1]) {\n\t\tnewString = newString + \".\" + splitResults[1];\n\t}\n\treturn newString;\n}\n\nfunction statusChange(statusText)\n{\n\tdocument.getElementById(\"statusText\").firstChild.nodeValue = \"Statusbar: \" + statusText;\n}\n\nfunction scaleObject(evt,factor)\n{\n\tvar element = evt.currentTarget;\n\tvar myX = element.getAttributeNS(null,\"x\");\n\tvar myY = element.getAttributeNS(null,\"y\");\n\tvar newtransform = \"scale(\" + factor + \") translate(\" + (myX * 1 / factor - myX) + \" \" + (myY * 1 / factor - myY) +\")\";\n\telement.setAttributeNS(null,'transform', newtransform);\n}\n\nfunction getTransformToRootElement(node)\n{\n \ttry {\n\t\tvar CTM = node.getTransformToElement(document.documentElement);\n\t}\n\tcatch (ex) {\n\t\tvar CTM = node.getCTM();\n\t\twhile ( ( node = node.parentNode ) != document ) {\n\t\t\tCTM = node.getCTM().multiply(CTM);\n\t\t}\n\t}\n\treturn CTM;\n}\n\nfunction getTransformToElement(node,targetNode)\n{\n\ttry {\n\t\tvar CTM = node.getTransformToElement(targetNode);\n\t}\n\tcatch (ex) {\n\t\tvar CTM = node.getCTM();\n\t\twhile ( ( node = node.parentNode ) != targetNode ) {\n\t\t\tCTM = node.getCTM().multiply(CTM);\n\t\t}\n\t}\n\treturn CTM;\n}\n\nfunction hsv2rgb(hue,sat,val)\n{\n\tvar rgbArr = new Object();\n\tif( sat == 0) {\n\t\trgbArr[\"red\"] = Math.round(val * 255);\n\t\trgbArr[\"green\"] = Math.round(val * 255);\n\t\trgbArr[\"blue\"] = Math.round(val * 255);\n\t}\n\telse {\n\t\tvar h = hue / 60;\n\t\tvar i = Math.floor(h);\n\t\tvar f = h - i;\n\t\tif(i % 2 == 0) {\n\t\t\tf = 1 - f;\n\t\t}\n\t\tvar m = val * (1 - sat); \n\t\tvar n = val * (1 - sat * f);\n\t\tswitch(i) {\n\t\t\tcase 0:\n\t\t\t\trgbArr[\"red\"] = val;\n\t\t\t\trgbArr[\"green\"] = n;\n\t\t\t\trgbArr[\"blue\"] = m;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\trgbArr[\"red\"] = n;\n\t\t\t\trgbArr[\"green\"] = val;\n\t\t\t\trgbArr[\"blue\"] = m;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\trgbArr[\"red\"] = m;\n\t\t\t\trgbArr[\"green\"] = val;\n\t\t\t\trgbArr[\"blue\"] = n;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\trgbArr[\"red\"] = m;\n\t\t\t\trgbArr[\"green\"] = n;\n\t\t\t\trgbArr[\"blue\"] = val;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\trgbArr[\"red\"] = n;\n\t\t\t\trgbArr[\"green\"] = m;\n\t\t\t\trgbArr[\"blue\"] = val;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\trgbArr[\"red\"] = val;\n\t\t\t\trgbArr[\"green\"] = m;\n\t\t\t\trgbArr[\"blue\"] = n;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\trgbArr[\"red\"] = val;\n\t\t\t\trgbArr[\"green\"] = n;\n\t\t\t\trgbArr[\"blue\"] = m;\n\t\t\t\tbreak;\n\t\t}\n\t\trgbArr[\"red\"] = Math.round(rgbArr[\"red\"] * 255);\n\t\trgbArr[\"green\"] = Math.round(rgbArr[\"green\"] * 255);\n\t\trgbArr[\"blue\"] = Math.round(rgbArr[\"blue\"] * 255);\n\t}\n\treturn rgbArr;\n}\n\nfunction rgb2hsv(red,green,blue)\n{\n\tvar hsvArr = new Object();\n\tred = red / 255;\n\tgreen = green / 255;\n\tblue = blue / 255;\n\tmyMax = Math.max(red, Math.max(green,blue));\n\tmyMin = Math.min(red, Math.min(green,blue));\n\tv = myMax;\n\tif(myMax > 0) {\n\t\ts = (myMax - myMin) / myMax;\n\t}\n\telse {\n\t\ts = 0;\n\t}\n\tif(s > 0) {\n\t\tmyDiff = myMax - myMin;\n\t\trc = (myMax - red) / myDiff;\n\t\tgc = (myMax - green) / myDiff;\n\t\tbc = (myMax - blue) / myDiff;\n\t\tif(red == myMax) {\n\t\t\th = (bc - gc) / 6;\n\t\t}\n\t\tif(green == myMax) {\n\t\t\th = (2 + rc - bc) / 6;\n\t\t}\n\t\tif(blue == myMax) {\n\t\t\th = (4 + gc - rc) / 6;\n\t\t}\n\t}\n\telse {\n\t\th = 0;\n\t}\n\tif(h < 0) {\n\t\th += 1;\n\t}\n\thsvArr[\"hue\"] = Math.round(h * 360);\n\thsvArr[\"sat\"] = s;\n\thsvArr[\"val\"] = v;\n\treturn hsvArr;\n}\n\nfunction arrayPopulate(arrayKeys,arrayValues)\n{\n\tvar returnArray = new Array();\n\tif(arrayKeys.length != arrayValues.length) {\n\t\talert(\"error: arrays do not have the same length!\");\n\t}\n\telse {\n\t\tfor (i=0;i<arrayKeys.length;i++) {\n\t\t\treturnArray[arrayKeys[i]] = arrayValues[i];\n\t\t}\n\t}\n\treturn returnArray;\n}\n\nfunction getData(url,callBackFunction,returnFormat,method,postText,additionalParams)\n{\n\tthis.url = url;\n\tthis.callBackFunction = callBackFunction;\n\tthis.returnFormat = returnFormat;\n\tthis.method = method;\n\tthis.additionalParams = additionalParams;\n\tif(method != \"get\" && method != \"post\") {\n\t\talert(\"Error in network request: parameter 'method' must be 'get' or 'post'\");\n\t}\n\tthis.postText = postText;\n\tthis.xmlRequest = null;\n} \n\ngetData.prototype.getData = function()\n{\n\tif(window.getURL) {\n\t\tif(this.method == \"get\") {\n\t\t\tgetURL(this.url,this);\n\t\t}\n\t\tif(this.method == \"post\") {\n\t\t\tpostURL(this.url,this.postText,this);\n\t\t}\n\t}\n\telse if(window.XMLHttpRequest) {\n\t\tvar _this = this;\n\t\tthis.xmlRequest = new XMLHttpRequest();\n\t\tif(this.method == \"get\") {\n\t\t\tif(this.returnFormat == \"xml\") {\n\t\t\t\tthis.xmlRequest.overrideMimeType(\"text/xml\");\n\t\t\t}\n\t\t\tthis.xmlRequest.open(\"GET\",this.url,true);\n\t\t}\n\t\tif(this.method == \"post\") {\n\t\t\tthis.xmlRequest.open(\"POST\",this.url,true);\n\t\t}\n\t\tthis.xmlRequest.onreadystatechange = function() {_this.handleEvent()};\n\t\tif(this.method == \"get\") {\n\t\t\tthis.xmlRequest.send(null);\n\t\t}\n\t\tif(this.method == \"post\") {\n\t\t\tvar reallyPost = true;\n\t\t\tif(!this.postText) {\n\t\t\t\treallyPost = false;\n\t\t\t\talert(\"Error in network post request: missing parameter 'postText'!\");\n\t\t\t}\n\t\t\tif(typeof(this.postText) != \"string\") {\n\t\t\t\treallyPost = false;\n\t\t\t\talert(\"Error in network post request: parameter 'postText' has to be of type 'string')\");\n\t\t\t}\n\t\t\tif(reallyPost) {\n\t\t\t\tthis.xmlRequest.send(this.postText);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\talert(\"your browser/svg viewer neither supports window.getURL nor window.XMLHttpRequest!\");\n\t}\t\n}\n\ngetData.prototype.operationComplete = function(data)\n{\n\tif(data.success) {\n\t\tif(this.returnFormat == \"xml\") {\n\t\t\tvar node = parseXML(data.content,document);\n\t\t\tif(typeof(this.callBackFunction) == \"function\") {\n\t\t\t\tthis.callBackFunction(node.firstChild,this.additionalParams);\n\t\t\t}\n\t\t\tif(typeof(this.callBackFunction) == \"object\") {\n\t\t\t\tthis.callBackFunction.receiveData(node.firstChild,this.additionalParams);\n\t\t\t}\n\t\t}\n\t\tif(this.returnFormat == \"json\") {\n\t\t\tif(typeof(this.callBackFunction) == \"function\") {\n\t\t\t\tthis.callBackFunction(data.content,this.additionalParams);\n\t\t\t}\n\t\t\tif(typeof(this.callBackFunction) == \"object\") {\n\t\t\t\tthis.callBackFunction.receiveData(data.content,this.additionalParams);\n\t\t\t}\t\t\t\n\t\t}\n\t}\n\telse {\n\t\talert(\"something went wrong with dynamic loading of geometry!\");\n\t}\n}\n\ngetData.prototype.handleEvent = function()\n{\n\tif(this.xmlRequest.readyState == 4) {\n\t\tif(this.returnFormat == \"xml\") {\n\t\t\tvar importedNode = document.importNode(this.xmlRequest.responseXML.documentElement,true);\n\t\t\tif(typeof(this.callBackFunction) == \"function\") "
                    << "{\n\t\t\t\tthis.callBackFunction(importedNode,this.additionalParams);\n\t\t\t}\n\t\t\tif(typeof(this.callBackFunction) == \"object\") {\n\t\t\t\tthis.callBackFunction.receiveData(importedNode,this.additionalParams);\n\t\t\t}\t\t\t\n\t\t}\n\t\tif(this.returnFormat == \"json\") {\n\t\t\tif(typeof(this.callBackFunction) == \"function\") {\n\t\t\t\tthis.callBackFunction(this.xmlRequest.responseText,this.additionalParams);\n\t\t\t}\n\t\t\tif(typeof(this.callBackFunction) == \"object\") {\n\t\t\t\tthis.callBackFunction.receiveData(this.xmlRequest.responseText,this.additionalParams);\n\t\t\t}\t\t\t\n\t\t}\t\t\n\t}\t\n}\n\nfunction serializeNode(node)\n{\n\tif(typeof XMLSerializer != 'undefined') {\n\t\treturn new XMLSerializer().serializeToString(node);\n\t}\n\telse if(typeof node.xml != 'undefined') {\n\t\treturn node.xml;\n\t}\n\telse if(typeof printNode != 'undefined') {\n\t\treturn printNode(node);\n\t}\n\telse if(typeof Packages != 'undefined') {\n\t\ttry {\n\t\t\tvar stringWriter = new java.io.StringWriter();\n\t\t\tPackages.org.apache.batik.dom.util.DOMUtilities.writeNode(node,stringWriter);\n\t\t\treturn stringWriter.toString();\n\t\t}\n\t\tcatch (e) {\n\t\t\t alert(\"Sorry, your SVG viewer does not support the printNode/serialize function.\");\n\t\t\t return '';\n\t\t}\n\t}\n\telse {\n\t\talert(\"Sorry, your SVG viewer does not support the printNode/serialize function.\");\n\t\treturn '';\n\t}\n}\n\nfunction startAnimation(id)\n{\n\tdocument.getElementById(id).beginElement();\n}\n\nfunction Timer()\n{\n\tthis.obj = (arguments.length)?arguments[0]:window;\n\treturn this;\n}\n\nTimer.prototype.setInterval = function(func, msec)\n{\n\tvar i = Timer.getNew();\n\tvar t = Timer.buildCall(this.obj, i, arguments);\n\tTimer.set[i].timer = window.setInterval(t,msec);\n\treturn i;\n}\n\nTimer.prototype.setTimeout = function(func, msec)\n{\n\tvar i = Timer.getNew();\n\tTimer.buildCall(this.obj, i, arguments);\n\tTimer.set[i].timer = window.setTimeout(\"Timer.callOnce(\"+i+\");\",msec);\n\treturn i;\n}\n\nTimer.prototype.clearInterval = function(i)\n{\n\tif(i == undefined)\n\t\tfor( var i=0; i < Timer.set.length; ++i )\n\t\t\tthis.clearInterval(i);\n\tif(!Timer.set[i]) return;\n\twindow.clearInterval(Timer.set[i].timer);\n\tTimer.set[i] = null;\n}\n\nTimer.prototype.clearTimeout = function(i)\n{\n\tif(i == undefined)\n\t\tfor( var i=0; i < Timer.set.length; ++i )\n\t\t\tthis.clearTimeout(i);\n\tif(!Timer.set[i]) return;\n\twindow.clearTimeout(Timer.set[i].timer);\n\tTimer.set[i] = null;\n}\n\nTimer.set = new Array();\nTimer.buildCall = function(obj, i, args)\n{\n\tvar t = \"\";\n\tTimer.set[i] = new Array();\n\tif(obj != window){\n\t\tTimer.set[i].obj = obj;\n\t\tt = \"Timer.set[\"+i+\"].obj.\";\n\t}\n\tt += args[0]+\"(\";\n\tif(args.length > 2){\n\t\tTimer.set[i][0] = args[2];\n\t\tt += \"Timer.set[\"+i+\"][0]\";\n\t\tfor(var j=1; (j+2)<args.length; j++){\n\t\t\tTimer.set[i][j] = args[j+2];\n\t\t\tt += \", Timer.set[\"+i+\"][\"+j+\"]\";\n\t\t}\n\t}\n\tt += \");\";\n\tTimer.set[i].call = t;\n\treturn t;\n}\n\nTimer.callOnce = function(i)\n{\n\tif(!Timer.set[i]) return;\n\teval(Timer.set[i].call);\n\tTimer.set[i] = null;\n}\n\nTimer.getNew = function()\n{\n\tvar i = 0;\n\twhile(Timer.set[i]) i++;\n\treturn i;\n}\n]]></script>\n<defs>\n<linearGradient id=\"linearGradient4336\">\n<stop style=\"stop-color:#000000;stop-opacity:0.30927834\" offset=\"0\" id=\"stop4338\" />\n<stop style=\"stop-color:#000000;stop-opacity:0.21649484\" offset=\"0.05375364\" id=\"stop10431\" />\n<stop style=\"stop-color:#000000;stop-opacity:0.2371134\" offset=\"0.11357412\" id=\"stop10433\" />\n<stop style=\"stop-color:#000000;stop-opacity:0.10309278\" offset=\"0.28514513\" id=\"stop10435\" />\n<stop style=\"stop-color:#000000;stop-opacity:0.19587629\" offset=\"0.96170419\" id=\"stop10437\" />\n<stop style=\"stop-color:#000000;stop-opacity:0.29896906\" offset=\"1\" id=\"stop4340\" />\n</linearGradient>\n<linearGradient id=\"linearGradient4118\">\n<stop style=\"stop-color:#000000;stop-opacity:0.556701\" offset=\"0\" id=\"stop4120\" />\n<stop style=\"stop-color:#000000;stop-opacity:0.14432989\" offset=\"0.60714287\" id=\"stop4126\" />\n<stop style=\"stop-color:#000000;stop-opacity:0.63917524\" offset=\"1\" id=\"stop4122\" />\n</linearGradient>\n<linearGradient id=\"linearGradient3187\">\n<stop style=\"stop-color:#575757;stop-opacity:0.39175257\" offset=\"0\" id=\"stop3189\" />\n<stop style=\"stop-color:#a3a3a3;stop-opacity:0\" offset=\"1\" id=\"stop3191\" />\n</linearGradient>\n<linearGradient x1=\"23.679199\" y1=\"19.6987\" x2=\"23.679199\" y2=\"28.9786\" id=\"XMLID_28_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#f7f7f7;stop-opacity:1\" offset=\"0\" id=\"stop1183\" />\n<stop style=\"stop-color:#e5f0f8;stop-opacity:1\" offset=\"0.0425\" id=\"stop1184\" />\n<stop style=\"stop-color:#6bc2fc;stop-opacity:1\" offset=\"0.33880001\" id=\"stop1185\" />\n<stop style=\"stop-color:#1ea4fe;stop-opacity:1\" offset=\"0.54189998\" id=\"stop1186\" />\n<stop style=\"stop-color:#0099ff;stop-opacity:1\" offset=\"0.63480002\" id=\"stop1187\" />\n<stop style=\"stop-color:#006dff;stop-opacity:1\" offset=\"1\" id=\"stop1188\" />\n</linearGradient>\n<linearGradient x1=\"23.700701\" y1=\"4.5127001\" x2=\"23.700701\" y2=\"19.908199\" id=\"XMLID_25_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#9a9ab1;stop-opacity:1\" offset=\"0\" id=\"stop1156\" />\n<stop style=\"stop-color:#585868;stop-opacity:1\" offset=\"1\" id=\"stop1157\" />\n</linearGradient>\n<linearGradient x1=\"23.679199\" y1=\"30.654301\" x2=\"23.679199\" y2=\"15.8262\" id=\"XMLID_24_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#949494;stop-opacity:1\" offset=\"0\" id=\"stop1149\" />\n<stop style=\"stop-color:#616161;stop-opacity:1\" offset=\"1\" id=\"stop1150\" />\n</linearGradient>\n<linearGradient x1=\"-6.3134999\" y1=\"-38.7192\" x2=\"-6.3134999\" y2=\"-38.1609\" id=\"XMLID_23_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.7071,-0.7071,0.7071,0.7071,71.522,44.5771)\">\n<stop style=\"stop-color:#ffffff;stop-opacity:1\" offset=\"0\" id=\"stop1139\" />\n<stop style=\"stop-color:#4c4c47;stop-opacity:1\" offset=\"1\" id=\"stop1140\" />\n</linearGradient>\n<linearGradient x1=\"-6.4966002\" y1=\"-38.180698\" x2=\"-6.3817\" y2=\"-37.491199\" id=\"XMLID_22_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.7071,-0.7071,0.7071,0.7071,71.522,44.5771)\">\n<stop style=\"stop-color:#72716e;stop-opacity:1\" offset=\"0\" id=\"stop1132\" />\n<stop style=\"stop-color:#3c3c3c;stop-opacity:1\" offset=\"1\" id=\"stop1133\" />\n</linearGradient>\n<linearGradient x1=\"23.6978\" y1=\"37.0439\" x2=\"23.6978\" y2=\"32.7383\" id=\"XMLID_21_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#666666;stop-opacity:1\" offset=\"0\" id=\"stop1122\" />\n<stop style=\"stop-color:#333333;stop-opacity:1\" offset=\"1\" id=\"stop1123\" />\n</linearGradient>\n<linearGradient x1=\"23.7017\" y1=\"31.960899\" x2=\"23.7017\" y2=\"37.149399\" id=\"XMLID_20_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#b2b2b2;stop-opacity:1\" offset=\"0\" id=\"stop1115\" />\n<stop style=\"stop-color:#828282;stop-opacity:1\" offset=\"1\" id=\"stop1116\" />\n</linearGradient>\n<linearGradient x1=\"20.9858\" y1=\"39.3223\" x2=\"31.818399\" y2=\"50.1548\" id=\"XMLID_19_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#9a9ab1;stop-opacity:1\" offset=\"0\" id=\"stop1108\" />\n<stop style=\"stop-color:#585868;stop-opacity:1\" offset=\"1\" id=\"stop1109\" />\n</linearGradient>\n<linearGradient x1=\"23.7017\" y1=\"31.458\" x2=\"23.7017\" y2=\"2.1292\" id=\"XMLID_18_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#f7f7f7;stop-opacity:1\" offset=\"0\" id=\"stop1097\" />\n<stop style=\"stop-color:#bdbdcf;stop-opacity:1\" offset=\"0.50559998\" id=\"stop1098\" />\n<stop style=\"stop-color:#b1b1c5;stop-opacity:1\" offset=\"1\" id=\"stop1099\" />\n</linearGradient>\n<linearGradient x1=\"23.7017\" y1=\"32.068401\" x2=\"23.7017\" y2=\"1.5501\" id=\"XMLID_17_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#f7f7f7;stop-opacity:1\" offset=\"0\" id=\"stop1086\" />\n<stop style=\"stop-color:#f3f3f4;stop-opacity:1\" offset=\"0.23459999\" id=\"stop1087\" />\n<stop style=\"stop-color:#e6e6eb;stop-opacity:1\" offset=\"0.47710001\" id=\"stop1088\" />\n<stop style=\"stop-color:#d2d2dc;stop-opacity:1\" offset=\"0.72299999\" id=\"stop1089\" />\n<stop style=\"stop-color:#b5b5c8;stop-opacity:1\" offset=\"0.97009999\" id=\"stop1090\" />\n<stop style=\"stop-color:#b1b1c5;stop-opacity:1\" offset=\"1\" id=\"stop1091\" />\n</linearGradient>\n<linearGradient x1=\"23.700701\" y1=\"40.502899\" x2=\"23.700701\" y2=\"29.894501\" id=\"XMLID_16_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#cecedb;stop-opacity:1\" offset=\"0\" id=\"stop1073\" />\n<stop style=\"stop-color:#e9e9ef;stop-opacity:1\" offset=\"0.18539999\" id=\"stop1074\" />\n<stop style=\"stop-color:#cecedb;stop-opacity:1\" offset=\"0.52249998\" id=\"stop1075\" />\n<stop style=\"stop-color:#b1b1c5;stop-opacity:1\" offset=\"1\" id=\"stop1076\" />\n</linearGradient>\n<linearGradient x1=\"23.700701\" y1=\"41.6758\" x2=\"23.700701\" y2=\"14.3296\" id=\"XMLID_15_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#616161;stop-opacity:1\" offset=\"0\" id=\"stop1063\" />\n<stop style=\"stop-color:#555555;stop-opacity:1\" offset=\"0.52249998\" id=\"stop1064\" />\n<stop style=\"stop-color:#494949;stop-opacity:1\" offset=\"1\" id=\"stop1065\" />\n</linearGradient>\n<linearGradient x1=\"23.700701\" y1=\"41.6758\" x2=\"23.700701\" y2=\"14.3296\" id=\"linearGradient2294\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#616161;stop-opacity:1\" offset=\"0\" id=\"stop2296\" />\n<stop style=\"stop-color:#555555;stop-opacity:1\" offset=\"0.52249998\" id=\"stop2298\" />\n<stop style=\"stop-color:#494949;stop-opacity:1\" offset=\"1\" id=\"stop2300\" />\n</linearGradient>\n<linearGradient x1=\"23.700701\" y1=\"40.502899\" x2=\"23.700701\" y2=\"29.894501\" id=\"linearGradient2303\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#cecedb;stop-opacity:1\" offset=\"0\" id=\"stop2305\" />\n<stop style=\"stop-color:#e9e9ef;stop-opacity:1\" offset=\"0.18539999\" id=\"stop2307\" />\n<stop style=\"stop-color:#cecedb;stop-opacity:1\" offset=\"0.52249998\" id=\"stop2309\" />\n<stop style=\"stop-color:#b1b1c5;stop-opacity:1\" offset=\"1\" id=\"stop2311\" />\n</linearGradient>\n<linearGradient x1=\"23.7017\" y1=\"32.068401\" x2=\"23.7017\" y2=\"1.5501\" id=\"linearGradient2314\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#f7f7f7;stop-opacity:1\" offset=\"0\" id=\"stop2316\" />\n<stop style=\"stop-color:#f3f3f4;stop-opacity:1\" offset=\"0.23459999\" id=\"stop2318\" />\n<stop style=\"stop-color:#e6e6eb;stop-opacity:1\" offset=\"0.47710001\" id=\"stop2320\" />\n<stop style=\"stop-color:#d2d2dc;stop-opacity:1\" offset=\"0.72299999\" id=\"stop2322\" />\n<stop style=\"stop-color:#b5b5c8;stop-opacity:1\" offset=\"0.97009999\" id=\"stop2324\" />\n<stop style=\"stop-color:#b1b1c5;stop-opacity:1\" offset=\"1\" id=\"stop2326\" />\n</linearGradient>\n<linearGradient x1=\"23.7017\" y1=\"31.458\" x2=\"23.7017\" y2=\"2.1292\" id=\"linearGradient2329\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#f7f7f7;stop-opacity:1\" offset=\"0\" id=\"stop2331\" />\n<stop style=\"stop-color:#bdbdcf;stop-opacity:1\" offset=\"0.50559998\" id=\"stop2333\" />\n<stop style=\"stop-color:#b1b1c5;stop-opacity:1\" offset=\"1\" id=\"stop2335\" />\n</linearGradient>\n<linearGradient x1=\"20.9858\" y1=\"39.3223\" x2=\"31.818399\" y2=\"50.1548\" id=\"linearGradient2339\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#9a9ab1;stop-opacity:1\" offset=\"0\" id=\"stop2341\" />\n<stop style=\"stop-color:#585868;stop-opacity:1\" offset=\"1\" id=\"stop2343\" />\n</linearGradient>\n<linearGradient x1=\"23.7017\" y1=\"31.960899\" x2=\"23.7017\" y2=\"37.149399\" id=\"linearGradient2346\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#b2b2b2;stop-opacity:1\" offset=\"0\" id=\"stop2348\" />\n<stop style=\"stop-color:#828282;stop-opacity:1\" offset=\"1\" id=\"stop2350\" />\n</linearGradient>\n<linearGradient x1=\"23.6978\" y1=\"37.0439\" x2=\"23.6978\" y2=\"32.7383\" id=\"linearGradient2353\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#666666;stop-opacity:1\" offset=\"0\" id=\"stop2355\" />\n<stop style=\"stop-color:#333333;stop-opacity:1\" offset=\"1\" id=\"stop2357\" />\n</linearGradient>\n<linearGradient x1=\"23.679199\" y1=\"30.654301\" x2=\"23.679199\" y2=\"15.8262\" id=\"linearGradient2380\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#949494;stop-opacity:1\" offset=\"0\" id=\"stop2382\" />\n<stop style=\"stop-color:#616161;stop-opacity:1\" offset=\"1\" id=\"stop2384\" />\n</linearGradient>\n<linearGradient x1=\"23.700701\" y1=\"4.5127001\" x2=\"23.700701\" y2=\"19.908199\" id=\"linearGradient2387\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#9a9ab1;stop-opacity:1\" offset=\"0\" id=\"stop2389\" />\n<stop style=\"stop-color:#585868;stop-opacity:1\" offset=\"1\" id=\"stop2391\" />\n</linearGradient>\n<linearGradient x1=\"12.6787\" y1=\"2.5386\" x2=\"32.335499\" y2=\"22.195601\" id=\"XMLID_26_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#ffffff;stop-opacity:1\" offset=\"0.3202\" id=\"stop1164\" />\n<stop style=\"stop-color:#e6eef6;stop-opacity:1\" offset=\"0.62360001\" id=\"stop1165\" />\n<stop style=\"stop-color:#cecedb;stop-opacity:1\" offset=\"0.9382\" id=\"stop1166\" />\n</linearGradient>\n<linearGradient x1=\"14.5005\" y1=\"32.291\" x2=\"35.789902\" y2=\"53.580601\" id=\"XMLID_27_\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#ffffff;stop-opacity:1\" offset=\"0\" id=\"stop1175\" />\n<stop style=\"stop-color:#cecedb;stop-opacity:1\" offset=\"1\" id=\"stop1176\" />\n</linearGradient>\n<linearGradient x1=\"23.679199\" y1=\"19.6987\" x2=\"23.679199\" y2=\"28.9786\" id=\"linearGradient2404\" gradientUnits=\"userSpaceOnUse\">\n<stop style=\"stop-color:#f7f7f7;stop-opacity:1\" offset=\"0\" id=\"stop2406\" />\n<stop style=\"stop-color:#e5f0f8;stop-opacity:1\" offset=\"0.0425\" id=\"stop2408\" "
                    << "/>\n<stop style=\"stop-color:#6bc2fc;stop-opacity:1\" offset=\"0.33880001\" id=\"stop2410\" />\n<stop style=\"stop-color:#1ea4fe;stop-opacity:1\" offset=\"0.54189998\" id=\"stop2412\" />\n<stop style=\"stop-color:#0099ff;stop-opacity:1\" offset=\"0.63480002\" id=\"stop2414\" />\n<stop style=\"stop-color:#006dff;stop-opacity:1\" offset=\"1\" id=\"stop2416\" />\n</linearGradient>\n<linearGradient x1=\"23.679199\" y1=\"19.6987\" x2=\"23.679199\" y2=\"28.9786\" id=\"linearGradient2685\" xlink:href=\"#XMLID_20_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4917157,1.7077553)\" />\n<linearGradient x1=\"23.700701\" y1=\"4.5127001\" x2=\"23.700701\" y2=\"19.908199\" id=\"linearGradient2691\" xlink:href=\"#XMLID_25_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"23.679199\" y1=\"30.654301\" x2=\"23.679199\" y2=\"15.8262\" id=\"linearGradient2694\" xlink:href=\"#XMLID_24_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"23.6978\" y1=\"37.0439\" x2=\"23.6978\" y2=\"32.7383\" id=\"linearGradient2711\" xlink:href=\"#XMLID_21_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"23.7017\" y1=\"31.960899\" x2=\"23.7017\" y2=\"37.149399\" id=\"linearGradient2714\" xlink:href=\"#XMLID_20_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"20.9858\" y1=\"39.3223\" x2=\"31.818399\" y2=\"50.1548\" id=\"linearGradient2717\" xlink:href=\"#XMLID_19_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"23.7017\" y1=\"31.458\" x2=\"23.7017\" y2=\"2.1292\" id=\"linearGradient2721\" xlink:href=\"#XMLID_18_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"23.7017\" y1=\"32.068401\" x2=\"23.7017\" y2=\"1.5501\" id=\"linearGradient2724\" xlink:href=\"#XMLID_17_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"23.700701\" y1=\"40.502899\" x2=\"23.700701\" y2=\"29.894501\" id=\"linearGradient2727\" xlink:href=\"#XMLID_16_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"23.700701\" y1=\"41.6758\" x2=\"23.700701\" y2=\"14.3296\" id=\"linearGradient2730\" xlink:href=\"#XMLID_15_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n<linearGradient x1=\"-6.4966002\" y1=\"-38.180698\" x2=\"-6.3817\" y2=\"-37.491199\" id=\"linearGradient2363\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.7071,-0.7071,0.7071,0.7071,71.522,44.5771)\">\n<stop style=\"stop-color:#72c296;stop-opacity:1\" offset=\"0\" id=\"stop2365\" />\n<stop style=\"stop-color:#009f81;stop-opacity:1\" offset=\"1\" id=\"stop2367\" />\n<a:midPointStop id=\"midPointStop1134\" style=\"stop-color:#72C296\" offset=\"0\" />\n<a:midPointStop id=\"midPointStop1135\" style=\"stop-color:#72C296\" offset=\"0.5\" />\n<a:midPointStop id=\"midPointStop1136\" style=\"stop-color:#009F81\" offset=\"1\" />\n</linearGradient>\n<linearGradient x1=\"-6.3134999\" y1=\"-38.7192\" x2=\"-6.3134999\" y2=\"-38.1609\" id=\"linearGradient2370\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.7071,-0.7071,0.7071,0.7071,71.522,44.5771)\">\n<stop style=\"stop-color:#ffffff;stop-opacity:1\" offset=\"0\" id=\"stop2372\" />\n<stop style=\"stop-color:#33cc66;stop-opacity:1\" offset=\"1\" id=\"stop2374\" />\n<a:midPointStop id=\"midPointStop1141\" style=\"stop-color:#FFFFFF\" offset=\"0\" />\n<a:midPointStop id=\"midPointStop1142\" style=\"stop-color:#FFFFFF\" offset=\"0.5\" />\n<a:midPointStop id=\"midPointStop1143\" style=\"stop-color:#33CC66\" offset=\"1\" />\n</linearGradient>\n<linearGradient x1=\"-6.3134999\" y1=\"-38.7192\" x2=\"-6.3134999\" y2=\"-38.1609\" id=\"linearGradient4679\" xlink:href=\"#XMLID_23_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.4041619,-0.4041619,0.4041619,0.4041619,43.371006,27.527358)\" />\n<linearGradient x1=\"-6.4966002\" y1=\"-38.180698\" x2=\"-6.3817\" y2=\"-37.491199\" id=\"linearGradient4682\" xlink:href=\"#XMLID_22_\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.4041619,-0.4041619,0.4041619,0.4041619,43.371006,27.527358)\" />\n<radialGradient cx=\"15.784926\" cy=\"11.76775\" r=\"7.2251477\" fx=\"15.784926\" fy=\"11.76775\" id=\"radialGradient3193\" xlink:href=\"#linearGradient3187\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(2.1212989,0,0,2.1212989,-17.666242,-13.896121)\" />\n<linearGradient x1=\"4.0578675\" y1=\"19.052357\" x2=\"16.877344\" y2=\"11.927357\" id=\"linearGradient4342\" xlink:href=\"#linearGradient4336\" gradientUnits=\"userSpaceOnUse\" />\n<linearGradient x1=\"2.7473981\" y1=\"14.081594\" x2=\"33.384041\" y2=\"20.708118\" id=\"linearGradient5335\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(-0.5687476,-1.9462526)\" />\n<linearGradient x1=\"31.103237\" y1=\"14.087626\" x2=\"0.34384245\" y2=\"24\" id=\"linearGradient5343\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(-6.8747618e-2,-1.9445436)\" />\n<linearGradient x1=\"6.092978\" y1=\"5.2999663\" x2=\"29.600527\" y2=\"10.294057\" id=\"linearGradient10260\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.9996554,0,0,1.0846543,-6.3240762e-2,-3.9459744)\" />\n<linearGradient x1=\"-1.2017846\" y1=\"9.6328125\" x2=\"23.174219\" y2=\"5.453125\" id=\"linearGradient10268\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" />\n<linearGradient x1=\"12.116117\" y1=\"27.353554\" x2=\"19.441942\" y2=\"26.911612\" id=\"linearGradient10429\" xlink:href=\"#linearGradient4336\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(-6.8747618e-2,-1.9445436)\" />\n<linearGradient x1=\"-1.2017846\" y1=\"9.6328125\" x2=\"23.174219\" y2=\"5.453125\" id=\"linearGradient11418\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" />\n<linearGradient x1=\"-1.2017846\" y1=\"9.6328125\" x2=\"23.174219\" y2=\"5.453125\" id=\"linearGradient11420\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" />\n<linearGradient x1=\"6.092978\" y1=\"5.2999663\" x2=\"29.600527\" y2=\"10.294057\" id=\"linearGradient2186\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"matrix(0.9996554,0,0,1.0846543,-6.3240762e-2,-3.9459744)\" />\n<linearGradient x1=\"12.116117\" y1=\"27.353554\" x2=\"19.441942\" y2=\"26.911612\" id=\"linearGradient2190\" xlink:href=\"#linearGradient4336\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(-6.8747618e-2,-1.9445436)\" />\n<linearGradient x1=\"2.7473981\" y1=\"14.081594\" x2=\"33.384041\" y2=\"20.708118\" id=\"linearGradient2196\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(-0.5687476,-1.9462526)\" />\n<linearGradient x1=\"31.103237\" y1=\"14.087626\" x2=\"0.34384245\" y2=\"24\" id=\"linearGradient2199\" xlink:href=\"#linearGradient4118\" gradientUnits=\"userSpaceOnUse\" gradientTransform=\"translate(-6.8747618e-2,-1.9445436)\" />\n<g id=\"ZoomToolIcon\" style=\"shape-rendering:auto\">\n<path d=\"M 19.259813,11.066793 C 19.259813,14.78099 16.248862,17.791941 12.534665,17.791941 C 8.8204686,17.791941 5.8095174,14.78099 5.8095174,11.066793 C 5.8095174,7.3525964 8.8204686,4.3416452 12.534665,4.3416452 C 16.248862,4.3416452 19.259813,7.3525964 19.259813,11.066793 z \" style=\"opacity:1;fill:url(#radialGradient3193);fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path2206\" />\n<path d=\"M 24.7505,24.525549 C 24.7505,24.525549 27,27 27,27\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:1;stroke-dasharray:none;stroke-opacity:1\" id=\"path3335\" />\n<path d=\"M 26.063147,25.936853 L 17.083686,16.111708\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path5509\" />\n</g>\n<g id=\"UndoZoomToolIcon\" style=\"shape-rendering:auto\"><path d=\"M 19.259813,11.066793 C 19.259813,14.78099 16.248862,17.791941 12.534665,17.791941 C 8.8204686,17.791941 5.8095174,14.78099 5.8095174,11.066793 C 5.8095174,7.3525964 8.8204686,4.3416452 12.534665,4.3416452 C 16.248862,4.3416452 19.259813,7.3525964 19.259813,11.066793 z \" style=\"fill:url(#radialGradient3193);fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path2206\" /><path d=\"M 24.7505,24.525549 C 24.7505,24.525549 27,27 27,27\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:round;stroke-linejoin:miter;marker-start:none;marker-mid:none;marker-end:none;stroke-miterlimit:1;stroke-dasharray:none;stroke-opacity:1\" id=\"path3335\" /><path d=\"M 25.782971,25.703373 L 16.80351,15.878228\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path5509\" /> <path id=\"path2261\" d=\"M 9.1057211,11.041261 L 16.156818,11.041261\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" /></g>\n<g id=\"DeNovoToolIcon\" style=\"shape-rendering:crispEdges\"><path d=\"M 5,11 L 5,21\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" id=\"path2170\" /> <path d=\"M 27,11 L 27,21\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" id=\"path2172\" /> <path d=\"M 5,16 L 27,16\" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" id=\"path2174\" /></g>\n<g id=\"FilterToolIcon\" style=\"shape-rendering:auto\">\n<path d=\"M 12.931252,22.055456 L 15.931252,22.055456 L 15.931252,8.0554564 C 15.931252,8.0554564 5.9312524,8.0554564 3.9312524,6.0554564 L 12.931252,22.055456 z \" style=\"opacity:0.72222218;fill:url(#linearGradient2199);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" id=\"path4356\" />\n<path d=\"M 18.931252,22.055456 L 15.931252,22.055456 L 15.931252,8.0554564 C 15.931252,8.0554564 25.931252,8.0554564 27.931252,6.0554565 L 18.931252,22.055456 z \" style=\"opacity:0.66666667;fill:url(#linearGradient2196);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" id=\"path4358\" />\n<path d=\"M 12.931252,22.055456 L 12.975446,29.071922 C 15.815136,28.758809 17.770942,28.114239 18.931252,26.055456 L 18.931252,22.055456 L 12.931252,22.055456\" style=\"opacity:0.93888891;fill:url(#linearGradient2190);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.375\" id=\"path10421\" />\n<path d=\"M 3.9937524,6.0476439 L 12.931252,22.055456 L 12.931252,29.055456 C 15.439329,28.886854 17.707429,28.325565 18.931252,26.055456 L 18.931252,22.055456 L 27.868752,6.0554564\" style=\"fill:#ffffff;fill-opacity:0;fill-rule:evenodd;stroke:#666666;stroke-width:0.1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path10439\" />\n<g transform=\"translate(-6.8747618e-2,-1.9445436)\" style=\"stroke:#666666\" id=\"g10324\">\n<g style=\"opacity:1;fill:url(#linearGradient11418);fill-opacity:1;fill-rule:evenodd;stroke:#666666;stroke-width:0.20825759;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-opacity:1\" id=\"g10326\" />\n<path d=\"M 15.982465,5.557254 C 9.3693678,5.557254 4.0234379,6.5291042 4.0234379,7.7265626 C 4.0234379,8.9240209 9.3693678,9.8958712 15.982465,9.8958712\" style=\"opacity:1;fill:url(#linearGradient11420);fill-opacity:1;fill-rule:evenodd;stroke:#666666;stroke-width:0.20825759;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-opacity:1\" id=\"path9283\" />\n</g>\n<path d=\"M 15.91172,3.6127102 C 22.524815,3.6127102 27.895871,4.5845605 27.895871,5.7820188 C 27.895871,6.9794772 22.524815,7.9513274 15.91172,7.9513274\" style=\"fill:url(#linearGradient2186);fill-opacity:1;fill-rule:evenodd;stroke:#666666;stroke-width:0.20825759;stroke-linecap:butt;stroke-linejoin:bevel;stroke-miterlimit:4;stroke-opacity:1\" id=\"path7324\" />\n</g>\n<g id=\"PrintToolIcon\" style=\"shape-rendering:auto\">\n<path d=\"M 10.0538,10.488028 L 10.0538,10.488028 C 9.6731297,10.522323 9.3593341,10.808682 9.2896017,11.18478 C 6.7798085,11.475712 5.2657018,11.903252 4.6758346,12.493691 C 3.4892414,13.680284 3.3120526,16.486154 3.3120526,18.053417 C 3.3120526,20.680384 3.7898907,23.949802 4.6758346,24.836318 C 5.5377723,25.698256 11.336418,25.873158 16.048496,25.869729 C 19.903781,25.866871 26.503777,25.729121 27.396008,24.836318 C 28.337967,23.893788 28.762648,20.275707 28.762648,18.009406 C 28.762648,16.459861 28.584888,13.683142 27.396008,12.494262 C 26.799854,11.898679 25.288034,11.469425 22.790243,11.179636 C 22.720511,10.802967 22.407287,10.516607 22.026045,10.482884 C 18.401106,10.15537 13.702174,10.157657 10.0538,10.488028 z M 9.2896017,11.185352 L 9.2896017,11.185923 C 9.2896017,11.185352 9.2896017,11.185352 9.2896017,11.185352 z \" style=\"fill:url(#linearGradient2730)\" id=\"path1071\" />\n<path d=\"M "
                    << "5.092514,24.625978 C 6.2568158,25.790279 25.847607,25.757128 26.978757,24.625978 C 28.109908,23.494827 28.974132,15.113227 26.978757,13.117852 C 24.983383,11.121907 7.0553084,11.155058 5.092514,13.117852 C 3.1302912,15.080075 3.9287839,23.462247 5.092514,24.625978 z \" style=\"fill:url(#linearGradient2727)\" id=\"path1084\" />\n<path d=\"M 16.037636,19.961912 C 20.872604,19.961912 25.208584,19.017667 28.159635,17.522422 C 28.092189,15.559628 27.7481,13.771165 26.978757,12.970386 C 24.983383,10.893847 7.0553084,10.928714 5.092514,12.970386 C 4.3328886,13.760876 3.9870847,15.553912 3.9156376,17.522994 C 6.8672597,19.017667 11.203241,19.961912 16.037636,19.961912 z \" style=\"fill:url(#linearGradient2724)\" id=\"path1095\" />\n<path d=\"M 16.037636,19.629254 C 20.872604,19.629254 25.208584,18.72159 28.159635,17.285218 C 28.092189,15.398443 27.7481,13.679712 26.978757,12.91037 C 24.983383,10.914424 7.0553084,10.947576 5.092514,12.91037 C 4.3328886,13.669995 3.9870847,15.392728 3.9156376,17.28579 C 6.8672597,18.722162 11.203241,19.629254 16.037636,19.629254 z \" style=\"fill:url(#linearGradient2721)\" id=\"path1105\" />\n<rect width=\"17.154732\" height=\"0.42753938\" x=\"7.5234299\" y=\"23.126732\" style=\"opacity:0.8;fill:#ffffff\" id=\"rect1106\" />\n<path d=\"M 9.8228828,21.549752 C 9.6113994,21.549752 9.4290665,21.780097 9.406775,21.987008 C 9.4073465,21.979578 9.4079181,21.972147 9.4079181,21.964717 C 9.4079181,21.956714 9.4010592,21.952142 9.399916,21.94414 C 9.3118932,22.233358 8.8574898,23.385085 8.3133487,24.758012 C 7.1924868,27.583887 7.1461891,27.740499 7.1461891,27.892538 C 7.1461891,28.121169 7.3319515,28.307503 7.5611538,28.307503 L 24.576421,28.307503 C 24.80448,28.307503 24.991385,28.121741 24.991385,27.892538 C 24.991385,27.738213 24.943944,27.582172 23.798505,24.770015 C 23.316094,23.58628 22.90513,22.572303 22.738801,22.119614 C 22.701649,22.086462 22.675928,22.040736 22.669641,21.98758 C 22.647349,21.78124 22.464445,21.549752 22.253533,21.549752 L 9.8228828,21.549752 z M 9.0209607,21.890983 C 9.0392512,21.969861 9.0924078,22.037307 9.175858,22.052739 C 9.2707397,22.069887 9.3559046,22.014444 9.3942003,21.929279 C 9.3776246,21.842399 9.3153227,21.768666 9.2221557,21.758377 C 9.1295603,21.748661 9.0558269,21.808676 9.0209607,21.890983 z \" style=\"fill:url(#linearGradient2717)\" id=\"path1113\" />\n<path d=\"M 24.151168,20.316289 L 24.151168,23.281629 C 24.360365,23.281629 24.506688,23.281629 24.574706,23.281629 C 24.575277,22.552297 24.151168,20.316289 24.151168,20.316289 z M 7.5011383,23.281629 C 7.577158,23.281629 7.7211953,23.281629 7.920104,23.281629 L 7.920104,20.316289 C 7.920104,20.316289 7.5011383,22.552297 7.5011383,23.281629 z \" style=\"opacity:0.8;fill:url(#linearGradient2714)\" id=\"path1120\" />\n<rect width=\"16.231064\" height=\"2.4612093\" x=\"7.9201035\" y=\"20.760405\" style=\"fill:url(#linearGradient2711)\" id=\"rect1127\" />\n<path d=\"M 21.961457,13.309331 C 23.895101,13.309331 25.751011,13.431076 27.478887,13.654563 C 27.337136,13.355628 27.171379,13.102991 26.978186,12.91037 C 24.982812,10.914424 7.0547368,10.947576 5.0919425,12.91037 C 4.332317,13.669995 3.9865131,15.392728 3.915066,17.28579 C 4.4614934,17.551573 5.0553616,17.799637 5.6903833,18.026553 C 7.5034246,15.317279 14.099991,13.309331 21.961457,13.309331 z \" style=\"opacity:0.5;fill:#ffffff\" id=\"path1128\" />\n<circle cx=\"39.937\" cy=\"22.176001\" r=\"0.972\" transform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" style=\"fill:#4d4d4d\" id=\"circle1130\" />\n<path d=\"M 25.488085,14.278725 C 25.282889,14.296444 24.980525,14.505641 24.881643,14.760564 C 24.783903,15.014915 24.940515,15.185817 25.145711,15.168098 C 25.351479,15.150951 25.654414,14.941182 25.752154,14.68683 C 25.849893,14.432479 25.693281,14.261577 25.488085,14.278725 z \" style=\"fill:url(#linearGradient4682)\" id=\"path1137\" />\n<path d=\"M 25.4898,14.273009 C 25.314898,14.288441 25.053687,14.467345 24.965093,14.683973 C 24.948517,14.724554 24.939372,14.762279 24.937085,14.797145 C 25.059403,14.765136 25.186865,14.719982 25.306324,14.663967 C 25.523523,14.562227 25.662988,14.449054 25.696711,14.36046 C 25.653843,14.298158 25.577823,14.265007 25.4898,14.273009 z \" style=\"fill:url(#linearGradient4679);fill-opacity:1\" id=\"path1144\" />\n<path d=\"M 28.159063,17.262355 C 28.149918,17.036011 28.138487,16.812524 28.121911,16.592467 C 28.138487,16.812524 28.15049,17.036582 28.159063,17.262355 z \" style=\"fill:#ffffff\" id=\"path1145\" />\n<path d=\"M 28.159063,17.262355 C 28.159063,17.269785 28.159063,17.277788 28.159063,17.285218 C 28.159635,17.285218 28.159635,17.285218 28.159635,17.285218 C 28.159635,17.277788 28.159063,17.269785 28.159063,17.262355 z \" style=\"fill:#ffffff\" id=\"path1146\" />\n<path d=\"M 23.373823,18.876488 C 23.061742,16.620474 22.609054,13.49052 22.211808,11.287092 C 22.190088,11.168776 22.09292,11.080181 21.974032,11.069321 C 18.379958,10.745809 13.721607,10.747524 10.107528,11.075609 C 9.9886401,11.086469 9.891472,11.175063 9.8697521,11.292808 C 9.4673621,13.497951 9.0003839,16.621618 8.6774431,18.872487 C 10.883158,19.355469 13.384949,19.629254 16.037636,19.629254 C 18.680035,19.629254 21.173824,19.357184 23.373823,18.876488 z \" style=\"fill:#ffffff\" id=\"path1147\" />\n<path d=\"M 10.131534,11.338534 C 9.7142832,13.609408 9.2238704,16.897117 8.9335095,18.902209 C 11.09064,19.33032 13.498121,19.569239 16.037636,19.569239 C 18.568006,19.569239 20.966342,19.331463 23.116614,18.907353 C 22.837684,16.901119 22.363276,13.605979 21.950026,11.332247 C 18.357095,11.011021 13.725037,11.015022 10.131534,11.338534 z \" style=\"fill:url(#linearGradient2694)\" id=\"path1154\" />\n<path d=\"M 10.735119,2.9180661 C 10.505917,2.9180661 10.320155,3.1038286 10.320155,3.3330308 L 10.320155,16.265525 C 10.320155,16.494156 10.505917,16.68049 10.735119,16.68049 L 21.33901,16.68049 C 21.567641,16.68049 21.754546,16.494727 21.754546,16.265525 L 21.754546,3.3330308 C 21.754546,3.1038286 21.568212,2.9180661 21.33901,2.9180661 L 10.735119,2.9180661 L 10.735119,2.9180661 z \" style=\"fill:url(#linearGradient2691)\" id=\"path1161\" />\n<path d=\"M 10.735119,3.3330308 C 10.735119,3.565091 10.735119,16.034037 10.735119,16.265525 C 10.966036,16.265525 21.108665,16.265525 21.33901,16.265525 C 21.33901,16.034037 21.33901,3.565091 21.33901,3.3330308 C 21.108665,3.3330308 10.966036,3.3330308 10.735119,3.3330308 z \" style=\"fill:#ffffff\" id=\"path1162\" />\n<path d=\"M 9.8228828,21.964717 C 9.8228828,22.191061 7.5611538,27.666766 7.5611538,27.892538 C 8.129301,27.892538 24.008273,27.892538 24.575849,27.892538 C 24.575849,27.666194 22.252961,22.190489 22.252961,21.964717 C 21.685386,21.964717 10.39103,21.964717 9.8228828,21.964717 z \" style=\"fill:#ffffff\" id=\"path1173\" />\n<path d=\"M 10.361308,13.192157 C 9.9600612,14.843442 9.489082,17.233776 9.2101526,18.691868 C 11.28269,19.002806 13.596432,19.177137 16.037636,19.177137 C 18.469124,19.177137 20.774292,19.003949 22.841114,18.695298 C 22.572473,17.236634 22.115783,14.841156 21.719109,13.188156 C 18.265642,12.95381 13.814774,12.957239 10.361308,13.192157 z \" style=\"fill:#b3b3b3\" id=\"path1181\" />\n<path d=\"M 10.362327,13.128429 C 9.9610807,14.797433 9.4901007,17.213488 9.2111717,18.688728 C 11.283709,19.003095 13.597451,19.178569 16.038655,19.178569 C 18.470143,19.178569 20.775311,19.003666 22.842133,18.691585 C 22.573492,17.216918 22.116802,14.795147 21.720128,13.123857 C 18.266661,12.887796 13.815793,12.890654 10.362327,13.128429 z \" style=\"fill:url(#linearGradient2685);fill-opacity:1\" id=\"path1194\" />\n<path d=\"M 21.732256,14.169195 C 21.770552,14.169195 21.809419,14.169767 21.848287,14.170338 C 21.793987,13.923989 21.74083,13.686213 21.688817,13.462726 C 18.23535,13.222092 13.784482,13.22495 10.331016,13.467299 C 9.9486313,15.086004 9.5033731,17.393459 9.2210142,18.90528 C 11.075209,16.142278 15.976479,14.169195 21.732256,14.169195 z \" style=\"opacity:0.4;fill:#f2f2f2\" id=\"path1195\" />\n<path d=\"M 22.527318,23.265625 C 22.359846,22.500284 22.253533,21.979578 22.253533,21.893269 C 21.685957,21.893269 10.391602,21.893269 9.8234544,21.893269 C 9.8234544,21.979578 9.7194274,22.500855 9.5570996,23.265625 L 22.527318,23.265625 L 22.527318,23.265625 z \" style=\"opacity:0.2\" id=\"path1196\" />\n<polyline points=\"0,48 0,0 48,0 48,48 \" style=\"fill:none\" id=\"_x3C_Slice_x3E_\" transform=\"matrix(0.5715767,0,0,0.5715767,2.4906969,2.0481264)\" />\n</g>\n<g id=\"GrabViewToolIcon\" style=\"shape-rendering:auto\"><path d=\"M 13.109612,12.537571 C 6.3438304,-2.6903937 5.951431,9.3271772 9.1579317,14.639031 C 10.578434,17.021675 10.20255,19.702015 8.7829112,17.935596 C 2.367401,9.9529522 2.337874,19.357898 6.4466763,22.294166 C 8.8502929,24.123805 10.82332,26.334141 11.353485,29.083115 L 23.127422,29.147745 C 22.749335,23.763645 25.767764,19.218647 26.876022,14.799657 C 29.704182,6.5034404 26.580905,4.0917396 23.127422,14.282609 C 25.955348,-0.62441464 20.721427,-1.5013276 18.150833,12.602202 C 17.910427,1.2784354 11.102327,-3.1053766 13.109612,12.537571 z \" style=\"fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1.21829498px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" id=\"path2245\" /></g>\n<g id=\"OptionsToolIcon\" style=\"shape-rendering:auto\"><rect width=\"5\" height=\"5\" x=\"5\" y=\"4.25\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect2180\" /><path d=\"M 6.0315735,6.2789858 L 7.0315735,8.2158388 L 9,5.3105592\" style=\"fill:none;fill-rule:evenodd;stroke:#808080;stroke-width:0.8;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path4130\" /><rect width=\"10\" height=\"5\" x=\"15\" y=\"4.25\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect5109\" /><rect width=\"3\" height=\"2\" x=\"25.9375\" y=\"4.515625\" style=\"fill:#808080;fill-rule:evenodd;stroke:black;stroke-width:0.1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect5113\" />\n<path d=\"M 26.782812,5.9361979 L 27.442969,5.0559896 L 28.103125,5.9361979\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;stroke-dasharray:none;stroke-opacity:1\" id=\"path5144\" /><path d=\"M 23.175324,8.25 L 22.783549,8.25 L 22.783549,5.753524 C 22.689232,5.84349 22.565533,5.933452 22.412451,6.023413 C 22.259368,6.113378 22.121885,6.180851 22,6.22583 L 22,5.847115 C 22.219102,5.744095 22.410637,5.619308 22.574603,5.472752 C 22.738567,5.326202 22.854648,5.184003 22.922847,5.046153 L 23.175324,5.046153 L 23.175324,8.25 z \" style=\"font-family:Arial\" id=\"flowRoot5154\" /><path d=\"M 23.9375,17.581309 L 23.9375,18 L 21.592349,18 C 21.589121,17.895126 21.606063,17.794285 21.643172,17.697478 C 21.70287,17.537747 21.798467,17.380436 21.929963,17.225543 C 22.061459,17.070653 22.251442,16.89156 22.499915,16.688264 C 22.885528,16.37203 23.1461,16.121541 23.281632,15.9368 C 23.41716,15.752062 23.484925,15.577405 23.484927,15.412831 C 23.484925,15.240195 23.42321,15.094581 23.299783,14.975989 C 23.176353,14.857404 23.015411,14.79811 22.816958,14.798106 C 22.607208,14.79811 22.439409,14.861034 22.313561,14.98688 C 22.187712,15.112732 22.12398,15.286985 22.122367,15.509638 L 21.674635,15.463655 C 21.70529,15.129673 21.820652,14.875152 22.02072,14.700089 C 22.220787,14.525033 22.489427,14.437504 22.826639,14.4375 C 23.167075,14.437504 23.436521,14.53189 23.634978,14.720661 C 23.83343,14.909438 23.932657,15.143388 23.93266,15.422512 C 23.932657,15.564498 23.903615,15.704061 23.845533,15.841203 C 23.787447,15.978348 23.691043,16.122752 23.556322,16.274414 C 23.421597,16.42608 23.197731,16.634215 22.884723,16.898819 C 22.623343,17.11825 22.455544,17.267091 22.381326,17.345342 C 22.307107,17.423595 22.245796,17.502251 22.197393,17.581309 L 23.9375,17.581309 z \" style=\"fill:black;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter\" id=\"text5168\" /><path d=\"M 21.709947,26.588238 L 22.139332,26.530986 C 22.188631,26.774305 22.27252,26.949638 22.390999,27.056983 C 22.509477,27.16433 22.653798,27.218003 22.823962,27.218002 C 23.02593,27.218003 23.196492,27.14803 23.335646,27.008081 C 23.474796,26.868134 23.544373,26.69479 23.544375,26.488048 C 23.544373,26.29085 23.479966,26.12824 23.351152,26.000219 C 23.222335,25.8722 23.058532,25.80819 22.859745,25.808189 C 22.778637,25.80819 22.677652,25.824094 22.556789,25.855898 L 22.604498,25.478994 C 22.633123,25.482175 22.656182,25.483766 22.673677,25.483764 C 22.856562,25.483766 23.02116,25.436057 23.16747,25.340636 C 23.313778,25.245219 23.386931,25.098115 23.386933,24.899323 C 23.386931,24.741885 23.333657,24.611479 23.227107,24.508106 C 23.120554,24.404739 22.982992,24.353053 22.81442,24.353051 C 22.647436,24.353053 22.508284,24.405534 22.396963,24.510492 C 22.28564,24.615455 22.214076,24.772896 22.182271,24.982816 L 21.752886,24.90648 C 21.805365,24.618636 21.924639,24.395594 22.110706,24.237355 C 22.296772,24.079122 22.528162,24.000004 22.804878,24 C 22.995715,24.000004 23.171444,24.040954 23.332068,24.122853 C 23.492688,24.204757 23.61554,24.316476 23.700624,24.458011 C 23.785703,24.599552 23.828244,24.749837 23.828246,24.908865 C 23.828244,25.059948 23.787691,25.19751 23.706587,25.321552 C 23.625479,25.445599 23.505411,25.544198 23.346381,25.617351 C 23.55312,25.665062 23.713741,25.764059 23.828246,25.914342 C 23.942747,26.064629 23.999998,26.252683 24,26.478506 C 23.999998,26.783847 23.888676,27.042671 23.666034,27.254977 C 23.443388,27.467284 23.161903,27.573438 22.821577,27.573438 C 22.514645,27.573438 22.259798,27.481995 22.057033,27.299109 C 21.854267,27.116223 21.738572,26.879266 21.709947,26.588238 L 21.709947,26.588238 z \" style=\"fill:black;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter\" id=\"text5172\" /><rect width=\"3\" height=\"2\" x=\"25.9375\" y=\"-8.765625\" "
                    << "transform=\"scale(1,-1)\" style=\"fill:#808080;fill-rule:evenodd;stroke:black;stroke-width:0.1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect5178\" /><path d=\"M 26.782813,7.3450522 L 27.44297,8.2252605 L 28.103126,7.3450522\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;stroke-dasharray:none;stroke-opacity:1\" id=\"path5180\" /><rect width=\"5\" height=\"5\" x=\"5\" y=\"13.75\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6151\" /><path d=\"M 6.0315735,15.778986 L 7.0315735,17.715839 L 9,14.810559\" style=\"fill:none;fill-rule:evenodd;stroke:#808080;stroke-width:0.8;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path6153\" /><rect width=\"10\" height=\"5\" x=\"15\" y=\"13.75\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6155\" /><rect width=\"3\" height=\"2\" x=\"25.9375\" y=\"14.015625\" style=\"fill:#808080;fill-rule:evenodd;stroke:black;stroke-width:0.1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6157\" /><path d=\"M 26.782812,15.436198 L 27.442969,14.55599 L 28.103125,15.436198\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;stroke-dasharray:none;stroke-opacity:1\" id=\"path6159\" /><rect width=\"3\" height=\"2\" x=\"25.9375\" y=\"-18.265625\" transform=\"scale(1,-1)\" style=\"fill:#808080;fill-rule:evenodd;stroke:black;stroke-width:0.1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6163\" /><path d=\"M 26.782813,16.845052 L 27.44297,17.72526 L 28.103126,16.845052\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;stroke-dasharray:none;stroke-opacity:1\" id=\"path6165\" /><rect width=\"5\" height=\"5\" x=\"5\" y=\"23.25\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6167\" /><path d=\"M 6.0315735,25.278986 L 7.0315735,27.215839 L 9,24.310559\" style=\"fill:none;fill-rule:evenodd;stroke:#808080;stroke-width:0.8;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" id=\"path6169\" /><rect width=\"10\" height=\"5\" x=\"15\" y=\"23.25\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6171\" /><rect width=\"3\" height=\"2\" x=\"25.9375\" y=\"23.515625\" style=\"fill:#808080;fill-rule:evenodd;stroke:black;stroke-width:0.1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6173\" /><path d=\"M 26.782812,24.936198 L 27.442969,24.05599 L 28.103125,24.936198\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;stroke-dasharray:none;stroke-opacity:1\" id=\"path6175\" /><rect width=\"3\" height=\"2\" x=\"25.9375\" y=\"-27.765625\" transform=\"scale(1,-1)\" style=\"fill:#808080;fill-rule:evenodd;stroke:black;stroke-width:0.1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" id=\"rect6179\" /><path d=\"M 26.782813,26.345052 L 27.44297,27.22526 L 28.103126,26.345052\" style=\"fill:none;fill-rule:evenodd;stroke:black;stroke-width:0.2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;stroke-dasharray:none;stroke-opacity:1\" id=\"path6181\" /></g>\n<symbol id=\"checkBoxRect\" overflow=\"visible\" style=\"shape-rendering:auto\"><rect x=\"-8\" y=\"-8\" width=\"16\" height=\"16\" fill=\"white\" stroke=\"black\" stroke-width=\"2\" cursor=\"pointer\"/></symbol>\n<symbol id=\"checkBoxCross\" overflow=\"visible\" style=\"shape-rendering:auto\"><g pointer-events=\"none\" stroke=\"dimgray\" stroke-width=\"1\"><line x1=\"-6\" y1=\"-6\" x2=\"6\" y2=\"6\"/><line x1=\"6\" y1=\"-6\" x2=\"-6\" y2=\"6\"/></g></symbol>\n</defs></svg>";

            return svgOut.str();
        }

        void writeToSvgFile( const string& svgFilenameSuffix,
                             const map< double, string >* peakLabelMap = NULL,
                             const map< double, string >* peakColorMap = NULL,
                             const map< double, int >* peakWidthMap = NULL )
        {
            stringstream svgFilename;
            svgFilename << id << svgFilenameSuffix << ".svg";

            ofstream svgFile( svgFilename.str().c_str(), ios::binary );
            svgFile << writeToSvg( peakLabelMap, peakColorMap, peakWidthMap );
        }

        typedef BasePeakData< PeakDataType > PeakData;

        double                  basePeakMz;
        double                  basePeakIntensity;

        PeakPreData                peakPreData;              // map of m/z ratios to intensities
        PeakData                peakData;                    // map of m/z ratios to application-specific type
        BasePeakData<float>        filteredPeaks;            // map of m/z ratios of n (default n = 50) most intense peaks
    };

    /**
        This function reads a raw file and splits it into small batches according to the
        variable ResultsPerBatch in the RunTimeConfig. This function can be used to split
        searches for raw files with lots of spectra (like velos).
    */
    inline vector<size_t> estimateSpectrumBatches( size_t maxResultsPerBatch,
                                 size_t maxResultsPerSpectrum,
                                 bool duplicateChargeState,
                                 int numChargeStates, 
                                 const string& filename, 
                                 int startSpectraIndex = 0,
                                 int endSpectraIndex = -1,
                                 int minMsLevel = 2 ) {

        //cout << "maxResultsPerBatch:" << maxResultsPerBatch << ", maxResultsPerSpectrum:" << maxResultsPerSpectrum << endl;

        // Set up the reading
        using namespace pwiz;
        using namespace pwiz::msdata;
        using namespace pwiz::analysis;
        using namespace pwiz::util;

        FullReaderList readers;

        MSDataFile msd(filename, & readers);
        
        SpectrumList& spectrumList = *msd.run.spectrumListPtr;
        string sourceName = GetFilenameWithoutExtension( GetFilenameFromFilepath( filename ) );

        // Spectral indices
        size_t firstIndex = max((size_t)startSpectraIndex, (size_t)0);
        size_t maxIndex = spectrumList.size()-1;
        size_t lastIndex = endSpectraIndex > 0 ? min((size_t)endSpectraIndex, maxIndex) : maxIndex;
        // A running counter to keep number of expected results based on spectrum count.
        size_t expectedResultsSoFar = 0;
        vector<size_t> partitions;
        partitions.push_back(firstIndex);
        // For each spectrum
        for( size_t curIndex = firstIndex; curIndex <= lastIndex; ++curIndex )
        {
            SpectrumPtr spectrum = spectrumList.spectrum(curIndex, true);
            if( spectrum->cvParam(MS_MSn_spectrum).empty() &&
                spectrum->cvParam(MS_MS1_spectrum).empty() )
                continue;

            CVParam spectrumMsLevel = spectrum->cvParam(MS_ms_level);
            if( spectrumMsLevel == CVID_Unknown )
                continue;

            int msLevel = spectrumMsLevel.valueAs<int>();
            // Check its MS level
            if( msLevel >= minMsLevel ) {
                // Init the minimum number of expected results for
                // this spectrum
                size_t resultSize = maxResultsPerSpectrum;
                int spectrumCharge = 0;
                // Extract its charge
                if( !spectrum->precursors.empty() &&
                    !spectrum->precursors.front().selectedIons.empty() )
                {
                    SelectedIon& precursorIon = spectrum->precursors.front().selectedIons.front();
                    spectrumCharge = precursorIon.cvParam(MS_charge_state).valueAs<int>();
                }
                // If spectral duplication is turned on, then we need to
                // adjust the expected number of results
                if(spectrumCharge == 0 && duplicateChargeState)
                    resultSize += (numChargeStates-1)*maxResultsPerSpectrum;
                expectedResultsSoFar+=resultSize;
                // If the total expected results so far exceed the user set threshold
                // then we need to put a partition here.
                if(expectedResultsSoFar>maxResultsPerBatch) {
                    partitions.push_back(curIndex-1);
                    expectedResultsSoFar = resultSize;
                }
            }
        }
        // return the partitions.
        partitions.push_back(lastIndex);
        return partitions;
    }

    template< class SpectrumType, class SpectraListType >
    struct PeakSpectraList : public virtual BaseSpectraList< SpectrumType, SpectraListType >
    {
        //typedef PeakSpectraList< SpectrumType >                   ListType;
        typedef BaseSpectraList< SpectrumType, SpectraListType >    BaseList;
        typedef typename BaseList::ListConstIterator                ListConstIterator;
        typedef typename BaseList::ListIterator                     ListIterator;

        void readPeaks( const string& filename,
                        int startSpectraIndex = 0,
                        int endSpectraIndex = -1,
                        int minMsLevel = 2,
                        const string& spectrumListFilters = "",
                        int numChargeStates = 3)
        {
            using namespace pwiz::cv;
            using namespace pwiz::data;
            using namespace pwiz::msdata;
            using namespace pwiz::analysis;
            using namespace pwiz::util;

            FullReaderList readers;
            //cout << filename;
            MSDataFile msd(filename, &readers);

            vector<string> wrappers;
            if (!spectrumListFilters.empty())
                bal::split(wrappers, spectrumListFilters, bal::is_any_of(";"));

            // a chargeStatePredictor is required
            if (!bal::contains(spectrumListFilters, "chargeStatePredictor"))
            {
                numChargeStates = max(2, numChargeStates);
                wrappers.push_back("chargeStatePredictor maxMultipleCharge=" + lexical_cast<string>(numChargeStates));
            }

            SpectrumListFactory::wrap(msd, wrappers);

            SpectrumList& spectrumList = *msd.run.spectrumListPtr;

            string sourceName = GetFilenameWithoutExtension( GetFilenameFromFilepath( filename ) );

            size_t firstIndex = max((size_t)startSpectraIndex, (size_t)0);
            size_t maxIndex = spectrumList.size()-1;
            size_t lastIndex = endSpectraIndex > 0 ? min((size_t)endSpectraIndex, maxIndex) : maxIndex;

            bool needHeuristicScanRange = false;
            double minObservedMz = numeric_limits<double>::max();
            double maxObservedMz = 0;

            for( size_t curIndex = firstIndex; curIndex <= lastIndex; ++curIndex )
            {
                SpectrumPtr spectrum = spectrumList.spectrum(curIndex, true);
                //cout << curIndex << "\n";
                //exit(1);

                if( spectrum->cvParam(MS_MSn_spectrum).empty() &&
                    spectrum->cvParam(MS_MS1_spectrum).empty() )
                    continue;

                CVParam spectrumMsLevel = spectrum->cvParam(MS_ms_level);
                if( spectrumMsLevel == CVID_Unknown )
                    continue;

                int msLevel = spectrumMsLevel.valueAs<int>();
                if( msLevel < minMsLevel )
                    continue;

                SpectrumType* s = new SpectrumType();
                s->nativeID = spectrum->id;
                s->title = spectrum->cvParam(MS_spectrum_title).value;
                try 
                {
                    if( !spectrum->precursors.empty() &&
                        !spectrum->precursors[0].selectedIons.empty() )
                    {
                        Precursor& precursor = spectrum->precursors[0];
                        IsolationWindow& isolationWindow = precursor.isolationWindow;
                        SelectedIon& selectedIon = precursor.selectedIons[0];
                        Activation& activation = precursor.activation;

                        s->id.set( sourceName, spectrum->id );

                        CVParam isolationMz = isolationWindow.cvParam(MS_isolation_window_target_m_z);
                        CVParam selectedIonMz = selectedIon.cvParam(MS_selected_ion_m_z);
                        if( selectedIonMz.empty() ) selectedIonMz = selectedIon.cvParam(MS_m_z);

                        // either m/z being empty() or isolationMz == selectedIonMz suggests average mass
                        if (isolationMz.empty() && !selectedIonMz.empty())
                        {
                            s->precursorMzType = MassType_Average;
                            s->mzOfPrecursor = selectedIonMz.valueAs<double>();
                        }
                        else if((!isolationMz.empty() && selectedIonMz.empty()) ||
                                isolationMz.value == selectedIonMz.value)
                        {
                            s->precursorMzType = MassType_Average;
                            s->mzOfPrecursor = isolationMz.valueAs<double>();
                        }
                        else if (!selectedIonMz.empty())
                        {
                            s->precursorMzType = MassType_Monoisotopic;
                            s->mzOfPrecursor = selectedIonMz.valueAs<double>();
                        }

                        //cout << s->id << "\t" << s->nativeID << "\t" << s->mzOfPrecursor << endl;

                        if( s->mzOfPrecursor == 0 )
                            std::cerr << "Warning: precursor m/z for scan " << curIndex << " is 0" << endl;

                        BOOST_FOREACH(const CVParam& chargeState, selectedIon.cvParamChildren(MS_charge_state))
                            s->possibleChargeStates.push_back(chargeState.valueAs<int>());

                        // there SHOULD be zero or one MS_charge_state; use it if it's available
                        if (s->possibleChargeStates.size() == 1)
                            s->id.setCharge(s->possibleChargeStates.back());

                        BOOST_FOREACH(const CVParam& chargeState, selectedIon.cvParamChildren(MS_possible_charge_state))
                                s->possibleChargeStates.push_back(chargeState.valueAs<int>());

                        std::sort(s->possibleChargeStates.begin(), s->possibleChargeStates.end());

                        BOOST_FOREACH(const CVParam& cvParam, activation.cvParamChildren(MS_dissociation_method))
                            s->dissociationTypes.insert(cvParam.cvid);
                    } else
                    {
                        s->id.set( sourceName, spectrum->id );
                        s->mzOfPrecursor = 0;
                    }

                    Scan& firstScan = spectrum->scanList.scans[0];

                    s->retentionTime = firstScan.cvParam(MS_scan_start_time).timeInSeconds() / 60.0;
                    if( !firstScan.scanWindows.empty() )
                    {
                        s->mzLowerBound = firstScan.scanWindows.front().cvParam(MS_scan_window_lower_limit).valueAs<double>();
                        s->mzUpperBound = firstScan.scanWindows.front().cvParam(MS_scan_window_upper_limit).valueAs<double>();
                    }
                    s->totalIonCurrent = spectrum->cvParam(MS_total_ion_current).valueAs<double>();

                    s->peakPreCount = spectrum->defaultArrayLength;
                    if( s->peakPreCount > 0 )
                    {
                        const vector<double>& mzData = spectrum->getMZArray()->data;
                        const vector<double>& intensityData = spectrum->getIntensityArray()->data;
                        s->basePeakIntensity = 0;
                        for( int i=0; i < s->peakPreCount; ++i )
                        {
                            if( intensityData[i] > s->basePeakIntensity )
                            {
                                s->basePeakMz = mzData[i];
                                s->basePeakIntensity = intensityData[i];
                            }
                            s->peakPreData[ mzData[i] ] = intensityData[i];
                        }

                        // if first or last observed peak falls outside the scan range,
                        // we use all spectra to calculate the scan range heuristically
                        needHeuristicScanRange = s->mzLowerBound > s->peakPreData.begin()->first ||
                                                 s->mzUpperBound < s->peakPreData.rbegin()->first;
                        minObservedMz = min(minObservedMz, s->peakPreData.begin()->first);
                        maxObservedMz = max(maxObservedMz, s->peakPreData.rbegin()->first);
                    }
                    s->totalPeakSpace = s->mzUpperBound - s->mzLowerBound;
                } catch(std::exception& e)
                {
                    std::cerr << "Encountered exception while parsing spectrum:" << s->nativeID << endl;
                    std::cerr << "[Error message] " << e.what() << endl;
                    return;
                }
                //cout << s->id.toString() << endl;
                this->push_back(s);
            }
            //cout << "File read in " << readTime.End() << " seconds." << endl;

            if (needHeuristicScanRange)
            {
                BOOST_FOREACH(SpectrumType* s, *this)
                {
                    s->mzLowerBound = minObservedMz;
                    s->mzUpperBound = maxObservedMz;
                    s->totalPeakSpace = s->mzUpperBound - s->mzLowerBound;
                }
            }
        }

        void readPeaks( const string& filename,
                        int index )
        {
            readPeaks( filename, index, index );
        }

        void writePeaks( const string& outputSuffix = "",
                            const string& header = "" ) const
        {
        }

        size_t filterByPeakCount( size_t minPeakCount = 1, bool deleteSpectra = true )
        {
            size_t sizeBefore = BaseList::size();

            vector< ListIterator > trimmedItrs;
            for( ListIterator sItr = BaseList::begin(); sItr != BaseList::end(); ++sItr )
                if( (*sItr)->peakPreData.size() < minPeakCount && (*sItr)->peakData.size() < minPeakCount )
                    trimmedItrs.push_back( sItr );

            for( size_t i=0; i < trimmedItrs.size(); ++i )
                this->erase(trimmedItrs[i], deleteSpectra);

            return sizeBefore - BaseList::size();
        }
    };
}

namespace std
{
    //ostream&      operator<< ( ostream& o, const PeakPreInfo& rhs );

    /*template< class T >
    ostream&        operator<< ( ostream& o, const BasePeakInfo<T>& rhs )
    {
        return ( o << rhs.data );
    }*/
}

namespace boost {
namespace serialization {

using boost::container::flat_map;

template<class Archive, class Key, class Value>
inline void save(Archive& ar, const flat_map<Key, Value>& m, const unsigned int version)
{
    vector< pair<Key,Value> > v(m.begin(),m.end());
    ar << v;
}

template<class Archive, class Key, class Value>
inline void load(Archive& ar, flat_map<Key, Value>& m, const unsigned int version)
{
    vector< pair<Key, Value> > v;
    ar >> v;
    m = flat_map<Key,Value>(boost::container::ordered_unique_range, v.begin(), v.end());
}

template<class Archive, class Key, class Value>
inline void serialize( Archive & ar, flat_map<Key, Value>& m, const unsigned int file_version)
{
    split_free(ar, m, file_version); 
}

} // namespace serialization
} // namespace boost

//BOOST_CLASS_IMPLEMENTATION( freicore::PeakPreInfo, boost::serialization::object_serializable )
BOOST_CLASS_IMPLEMENTATION( freicore::PeakPreData, boost::serialization::object_serializable )
//BOOST_CLASS_TRACKING( freicore::PeakPreInfo, boost::serialization::track_never )
BOOST_CLASS_TRACKING( freicore::PeakPreData, boost::serialization::track_never )

#endif
