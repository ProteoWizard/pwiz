#
# $Id$
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#
# The Original Code is the IDPicker build system.
#
# The Initial Developer of the Original Code is Matt Chambers.
#
# Copyright 2009 Vanderbilt University
#
# Contributor(s): Surendra Dasaris
#

# Usage:
#
#   bjam [options]
#
#   Builds and installs the IDPicker protein assembly filtering and presentation suite.
#
# Targets and Related Options:
#
#   build                   Build Bumbershoot libraries and applications
#   =====


import os ;
import modules ;
import common ;
import package ;
import errors : error ;
import feature ;
import path ;
import testing ; # needed to enable unit-test rule


local application-name = "IDPicker" ;


# set version info (used for tarball filenames)
import svnrev sequence numbers string ;

constant MAJOR : 3 ;
constant MINOR : 1 ;

path-constant IDPICKER_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Bumbershoot/idpicker ;

# rule for generating a C++/CLI or C# AssemblyInfo file
rule generate-AssemblyInfo ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? : cpp-cli ? :
                             AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    local extension = "cs" ;
    local using-namespace = "using" ;
    local namespace-delimiter = "." ;
    local attribute-suffix = "" ;
    local attribute-line-terminator = "" ;
    if $(cpp-cli)
    {
        extension = "cpp" ;
        using-namespace = "using namespace" ;
        namespace-delimiter = "::" ;
        attribute-suffix = "Attribute" ;
        attribute-line-terminator = ";" ;
    }

    # default filepath is "Properties/AssemblyInfo" in the current directory
    filepath ?= Properties/AssemblyInfo.$(extension) ;

    if $(print-revision-info) { echo Generating/updating version in $(filepath) ; }

    local existing-revision-info ;
    if [ path.exists $(filepath) ]
    {
        existing-revision-info = [ svnrev.get-revision-info $(filepath) ] ;
        if $(print-revision-info) { echo Existing maximum revision: $(existing-revision-info) ; }
    }

    sources-with-rcs-keywords = [ sequence.transform path.native : $(sources-with-rcs-keywords) ] ;
    local revision-info = [ svnrev.get-revision-info $(sources-with-rcs-keywords)
                                : $(warn-on-missing) : $(print-revision-info) ] ;

    if $(print-revision-info) { echo Current maximum revision: $(revision-info) ; }

    if ! $(existing-revision-info) ||
       $(existing-revision-info[1]) != $(revision-info[1])
    {
        if [ path.exists $(filepath) ]
        {
            local rm = [ common.rm-command ] ;
            rm = $(rm:J=" ") ;
            SHELL "$(rm) \"$(filepath)\"" ;
        }

        local AssemblyCopyright = "Copyright © $(AssemblyCompany) $(revision-info[2])" ;

        local header-text =
"// This file was generated by the \"svnrev\" utility
// You should not modify it manually, as it may be re-generated.
//
// $Revision: $(revision-info[1]) $
// $Date: $(revision-info[2])-$(revision-info[3])-$(revision-info[4]) $
//

$(using-namespace) System$(namespace-delimiter)Reflection;
$(using-namespace) System$(namespace-delimiter)Runtime$(namespace-delimiter)CompilerServices;
$(using-namespace) System$(namespace-delimiter)Runtime$(namespace-delimiter)InteropServices;

[assembly: AssemblyTitle$(attribute-suffix)(\"$(AssemblyTitle)\")]$(attribute-line-terminator)
[assembly: AssemblyDescription$(attribute-suffix)(\"$(AssemblyDescription)\")]$(attribute-line-terminator)
[assembly: AssemblyCompany$(attribute-suffix)(\"$(AssemblyCompany)\")]$(attribute-line-terminator)
[assembly: AssemblyProduct$(attribute-suffix)(\"$(AssemblyProduct)\")]$(attribute-line-terminator)
[assembly: AssemblyCopyright$(attribute-suffix)(\"$(AssemblyCopyright)\")]$(attribute-line-terminator)
[assembly: AssemblyVersion$(attribute-suffix)(\"$(MAJOR).$(MINOR).$(revision-info[1])\")]$(attribute-line-terminator)
[assembly: AssemblyFileVersion$(attribute-suffix)(\"$(MAJOR).$(MINOR).$(revision-info[1])\")]$(attribute-line-terminator)
[assembly: ComVisible$(attribute-suffix)(false)]$(attribute-line-terminator)
" ;

        header-text = @($(filepath):E=$(header-text)) ;
    }

    return $(revision-info) ;
}

# rule for generating a C# AssemblyInfo file
rule generate-AssemblyInfo.cs ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? :
                                AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    generate-AssemblyInfo $(filepath) : $(sources-with-rcs-keywords) : $(warn-on-missing) : $(print-revision-info) : :
                          "$(AssemblyTitle)" "$(AssemblyDescription)" "$(AssemblyCompany)" "$(AssemblyProduct)" ;
}

# rule for generating a C++/CLI AssemblyInfo file
rule generate-AssemblyInfo.cpp ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? :
                                 AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    generate-AssemblyInfo $(filepath) : $(sources-with-rcs-keywords) : $(warn-on-missing) : $(print-revision-info) : cpp-cli :
                          "$(AssemblyTitle)" "$(AssemblyDescription)" "$(AssemblyCompany)" "$(AssemblyProduct)" ;
}

# rule for generating a native rc file with version info and optional icons
rule generate-rc ( filepath ? : sources-with-rcs-keywords + : warn-on-missing ? : print-revision-info ? : 
                   Title Description Company Product : Icons * )
{
    # default filepath is "Properties/Resources.rc" in the current directory
    filepath ?= Properties/Resources.rc ;

    if $(print-revision-info) { echo Generating/updating version in $(filepath) ; }

    local existing-revision-info ;
    if [ path.exists $(filepath) ]
    {
        existing-revision-info = [ svnrev.get-revision-info $(filepath) ] ;
        if $(print-revision-info) { echo Existing maximum revision: $(existing-revision-info) ; }
    }

    sources-with-rcs-keywords = [ sequence.transform path.native : $(sources-with-rcs-keywords) ] ;
    local revision-info = [ svnrev.get-revision-info $(sources-with-rcs-keywords)
                                : $(warn-on-missing) : $(print-revision-info) ] ;

    if $(print-revision-info) { echo Current maximum revision: $(revision-info) ; }

    if ! $(existing-revision-info) ||
       $(existing-revision-info[1]) != $(revision-info[1])
    {
        if [ path.exists $(filepath) ]
        {
            local rm = [ common.rm-command ] ;
            rm = $(rm:J=" ") ;
            SHELL "$(rm) \"$(filepath)\"" ;
        }

        local copyright = "Copyright © $(Company) $(revision-info[2])" ;

        local icons-text = "" ;
        local resourceId = 101 ;
        for icon in $(Icons)
        {
            icons-text += "$(resourceId) ICON \"$(icon)\"\n" ;
            resourceId = [ numbers.increment $(resourceId) ] ;
        }
        icons-text = [ string.join $(icons-text) ] ;

        local header-text =
"// This file was generated by the \"svnrev\" utility
// You should not modify it manually, as it may be re-generated.
//
// $Revision: $(revision-info[1]) $
// $Date: $(revision-info[2])-$(revision-info[3])-$(revision-info[4]) $
//

#include <windows.h>

//1 RT_MANIFEST \"App.manifest\"

$(icons-text)

VS_VERSION_INFO VERSIONINFO
FILEVERSION     $(MAJOR),$(MINOR),$(revision-info[1]),0
PRODUCTVERSION  $(MAJOR),$(MINOR),$(revision-info[1]),0
FILEFLAGSMASK   VS_FFI_FILEFLAGSMASK
FILEFLAGS       0
FILEOS          VOS__WINDOWS32
FILETYPE        VFT_APP
FILESUBTYPE     VFT2_UNKNOWN
BEGIN
    BLOCK \"StringFileInfo\"
    BEGIN
        BLOCK \"040904E4\" // en-US/cp-1252
        BEGIN
            VALUE \"CompanyName\",      \"$(Company)\"
            VALUE \"ProductName\",      \"$(Product)\"
            VALUE \"ProductVersion\",   \"$(MAJOR).$(MINOR).$(revision-info[1])\"
            VALUE \"FileVersion\",      \"$(MAJOR).$(MINOR).$(revision-info[1])\"
            VALUE \"FileDescription\",  \"$(Description)\"
            VALUE \"LegalCopyright\",   \"$(copyright)\"
        END
    END
        BLOCK \"VarFileInfo\"
        BEGIN
            VALUE \"Translation\", 0x409, 1252 // en-US in ANSI (cp-1252)
        END
    END
END
" ;

        header-text = @($(filepath):E=$(header-text)) ;
    }

    return $(revision-info) ;
}

constant COMPANY_AND_PRODUCT : "Vanderbilt University" "IDPicker" ;

generate-AssemblyInfo.cs $(IDPICKER_PATH)/Util/Properties/AssemblyInfo.cs : [ path.glob-tree $(IDPICKER_PATH)/Util : *.jam *.?pp *.h *.cs ] $(IDPICKER_PATH)/App.config : : : "IDPicker.Util" "IDPicker utilities." $(COMPANY_AND_PRODUCT) ;
generate-AssemblyInfo.cs $(IDPICKER_PATH)/Model/Properties/AssemblyInfo.cs : [ path.glob-tree $(IDPICKER_PATH)/Model : *.jam *.?pp *.h *.cs ] : : : "IDPicker.DataModel" "IDPicker data model." $(COMPANY_AND_PRODUCT) ;
generate-AssemblyInfo.cs $(IDPICKER_PATH)/Controls/Properties/AssemblyInfo.cs : [ path.glob-tree $(IDPICKER_PATH)/Controls : *.jam *.?pp *.h *.cs ] : : : "IDPicker.Controls" "IDPicker custom controls." $(COMPANY_AND_PRODUCT) ;
generate-AssemblyInfo.cs $(IDPICKER_PATH)/CustomDataSourceDialog/Properties/AssemblyInfo.cs : [ path.glob-tree $(IDPICKER_PATH)/CustomDataSourceDialog : *.jam *.?pp *.h *.cs ] : : : "IDPicker.CustomDataSourceDialog" "IDPicker custom open file dialog." $(COMPANY_AND_PRODUCT) ;

generate-rc $(IDPICKER_PATH)/Resources/Resources.rc :
        [ path.glob-tree $(IDPICKER_PATH) : *.jam
                                            *.?pp *.h
                                            *.cs
                                            *.R
                                            #*.html
                                            #*.vdproj
            : freicore* build-*-* _Resharper.* Version.cpp idp*.cpp Resources.Designer.cs Settings.Designer.cs AssemblyInfo.cs bin obj waffles* ]
        $(IDPICKER_PATH)/App.config
    : warn-on-missing : : "IDPicker" "IDPicker" $(COMPANY_AND_PRODUCT)
    : IDPicker.ico IDPickerDatabase.ico IDPickerInputFile.ico
      BlankIcon.ico PeptideViewIcon.ico ProteinViewIcon.ico SpectrumViewIcon.ico ;
      
constant numeric-version-tag : $(MAJOR) $(MINOR) $(PWIZ_BUILD_TIMESTAMP) ;
constant version-tag : $(numeric-version-tag) $(PWIZ_GIT_REV) ;

# revision-info is a sequence: <max revision> <max year> <max month> <max day> <number of modified files in working copy>

local year = $(revision-info[2]) ;
local month = $(revision-info[3]) ;
local day = $(revision-info[4]) ;

constant SVNREV : $(revision-info[1]) ;
constant SVNREVDATE : "(last modified $(year)-$(month)-$(day))" ;
constant version-tag : $(MAJOR) $(MINOR) $(SVNREV) ;

if $(revision-info[5]) > 0
{
    version-tag += "modified" ;
}

# create an IDPICKER_VERSION file which can be used by TC to parse the canonical IDPicker version
make IDPICKER_VERSION : : @make_IDPICKER_VERSION : <location>$(PWIZ_BUILD_PATH) ;
actions make_IDPICKER_VERSION { @($(STDOUT):E=$(version-tag:J=.)) > "$(<)" }

rule idpicker-requirements ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        local variants = [ feature.get-values <variant> : $(properties) ] ;
        local location = <location>$(PWIZ_BUILD_PATH)/IDPicker/obj/$(PLATFORM)/$(variants[1]) ;
        return <assembly>$(IDPICKER_PATH)/Qonverter/CLI//InteropQonverter
               <dependency>$(IDPICKER_PATH)/Qonverter/CLI//InteropQonverter/$(location) 
               <dependency>$(PWIZ_ROOT_PATH)/pwiz_tools/SeeMS//seems ;
    }
}

msbuild IDPicker
    : # sources
        IDPicker.csproj
    : # requirements
        <conditional>@install-location
        <conditional>@idpicker-requirements
        <conditional>@pwiz-bindings-dependency
        <conditional>@msvc-requirement
    ;


rule test-properties ( targets + : sources * : properties * )
{
    if <variant>debug in $(properties)
    {
        CONFIGURATION on $(<[1]) = "Debug" ;
    }
    else
    {
        CONFIGURATION on $(<[1]) = "Release" ;
    }

    local location = [ path.make [ feature.get-values location : $(properties) ] ] ;
    OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
    INTERMEDIATE_PATH on $(<[1]) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/Test/$(PLATFORM)/" ;
    JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
}

rule do_IDPicker_test ( targets + : sources * : properties * )
{
    return [ test-properties $(targets) : $(sources) : $(properties) ] ;
}

actions do_IDPicker_test
{
    IF EXIST "%VS100COMNTOOLS%" CALL "%VS100COMNTOOLS%\..\..\VC\vcvarsall.bat" >nul
    IF EXIST "%VS120COMNTOOLS%" CALL "%VS120COMNTOOLS%\..\..\VC\vcvarsall.bat" >nul
    echo Unit testing IDPicker in $(CONFIGURATION:L) configuration...
    set name="IDPicker unit test"
    $(TEST_PRECOMMAND)
    msbuild $(IDPICKER_PATH)/IDPicker.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:Test /nologo /verbosity:minimal
    set status=%ERRORLEVEL%
    REM IF %status%==0 (msbuild $(IDPICKER_PATH)/Test/Test.csproj /p:SolutionDir=$(IDPICKER_PATH);Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);TestProject=Test /nologo /verbosity:minimal && set status=%ERRORLEVEL%)
    IF %status%==0 (mstest /testcontainer:$(OUTPUT_PATH)/Test.dll /noisolation /nologo /verbosity:minimal && set status=%ERRORLEVEL%)
    $(TEST_POSTCOMMAND)
}

make IDPickerTest.passed
    : # sources
    : # actions
        @do_IDPicker_test
    : # requirements
        <link>shared:<build>no
        <conditional>@no-express-requirement
        <conditional>@msvc-dotnet-requirement
        <conditional>@build-location
        <dependency>.//IDPicker
    ;
explicit IDPickerTest.passed ;


rule dotNET-dependencies ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        local location = [ install-location $(properties) ] ;
        return <dependency>IDPicker/$(location) ;
    }
}

rule gcc-install-dll-path ( properties * )
{
    if <toolset>gcc in $(properties) && <target-os>linux in $(properties)
    {
        return <dll-path>'$ORIGIN' ;
    }
}

install data_dependencies
    : # sources
        Qonverter//gene2protein.db3 
    : # requirements
        <conditional>@install-location
        <conditional>@install-identdata-dependencies
    ;

rule install-requirements ( properties * )
{
    return [ install-location $(properties) ]
           [ install-vendor-api-dependencies $(properties) ]
           <dependency>data_dependencies/<install-dependencies>off
           <install-dependencies>on
           <install-type>SHARED_LIB
           <install-type>EXE ;
}

install install_cli
    : # sources
        Qonverter//idpQonvert
        Qonverter//idpQuery
        Qonverter//idpAssemble
    : # requirements
        <conditional>@install-requirements
        <conditional>@gcc-install-dll-path
    ;

install install
    : # sources
        Qonverter//idpQonvert
        Qonverter//idpQuery
        Qonverter//idpAssemble
    : # requirements
        <conditional>@dotNET-dependencies
        <conditional>@install-requirements
        <conditional>@gcc-install-dll-path
    ;

# TODO: figure out why this hangs on TeamCity 64-bit builds, but works fine with 32-bit builds
#build-project Deploy ;
