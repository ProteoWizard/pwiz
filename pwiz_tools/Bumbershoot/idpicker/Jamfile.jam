#
# $Id$
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#
# The Original Code is the IDPicker build system.
#
# The Initial Developer of the Original Code is Matt Chambers.
#
# Copyright 2009 Vanderbilt University
#
# Contributor(s): Surendra Dasaris
#

# Usage:
#
#   bjam [options]
#
#   Builds and installs the IDPicker protein assembly filtering and presentation suite.
#
# Targets and Related Options:
#
#   build                   Build Bumbershoot libraries and applications
#   =====


import os ;
import modules ;
import common ;
import package ;
import errors : error ;
import feature ;
import path ;
import testing ; # needed to enable unit-test rule


local application-name = "IDPicker" ;


# set version info (used for tarball filenames)
import generate-version sequence numbers string ;

constant MAJOR : 3 ;
constant MINOR : 1 ;

path-constant IDPICKER_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Bumbershoot/idpicker ;

constant COMPANY_AND_PRODUCT : "Vanderbilt University" "IDPicker" ;

generate-version.AssemblyInfo.cs $(IDPICKER_PATH)/Util/Properties/AssemblyInfo.cs : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV) : "IDPicker.Util" "IDPicker utilities." $(COMPANY_AND_PRODUCT) ;
generate-version.AssemblyInfo.cs $(IDPICKER_PATH)/Model/Properties/AssemblyInfo.cs : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV) : "IDPicker.DataModel" "IDPicker data model." $(COMPANY_AND_PRODUCT) ;
generate-version.AssemblyInfo.cs $(IDPICKER_PATH)/Controls/Properties/AssemblyInfo.cs : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV) : "IDPicker.Controls" "IDPicker custom controls." $(COMPANY_AND_PRODUCT) ;
generate-version.AssemblyInfo.cs $(IDPICKER_PATH)/CustomDataSourceDialog/Properties/AssemblyInfo.cs : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV) : "IDPicker.CustomDataSourceDialog" "IDPicker custom open file dialog." $(COMPANY_AND_PRODUCT) ;
generate-version.AssemblyInfo.cs $(IDPICKER_PATH)/Properties/AssemblyInfo.cs : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV) : "IDPicker" "Filtering, assembling, and reporting of parsimonious protein identifications." $(COMPANY_AND_PRODUCT) ;

generate-version.rc $(IDPICKER_PATH)/Resources/Resources.rc : $(MAJOR) : $(MINOR) : $(PWIZ_BUILD_TIMESTAMP) : $(PWIZ_GIT_REV)
    : "IDPicker" "IDPicker" $(COMPANY_AND_PRODUCT)
    : IDPicker.ico IDPickerDatabase.ico IDPickerInputFile.ico
      BlankIcon.ico PeptideViewIcon.ico ProteinViewIcon.ico SpectrumViewIcon.ico ;

constant numeric-version-tag : $(MAJOR) $(MINOR) $(PWIZ_BUILD_TIMESTAMP) ;
constant version-tag : $(numeric-version-tag) $(PWIZ_GIT_REV) ;

# create an IDPICKER_VERSION file which can be used by TC to parse the canonical IDPicker version
make IDPICKER_VERSION : : @make_IDPICKER_VERSION : <location>$(PWIZ_BUILD_PATH) ;
actions make_IDPICKER_VERSION { @($(STDOUT):E=$(version-tag:J=.)) > "$(<)" }

rule idpicker-requirements ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        local variants = [ feature.get-values <variant> : $(properties) ] ;
        local location = <location>$(PWIZ_BUILD_PATH)/IDPicker/obj/$(PLATFORM)/$(variants[1]) ;
        return <assembly>$(IDPICKER_PATH)/Qonverter/CLI//InteropQonverter
               <dependency>$(IDPICKER_PATH)/Qonverter/CLI//InteropQonverter/$(location) 
               <dependency>$(PWIZ_ROOT_PATH)/pwiz_tools/SeeMS//seems ;
    }
}

msbuild IDPicker
    : # sources
        IDPicker.csproj
    : # requirements
        <conditional>@install-location
        <conditional>@idpicker-requirements
        <conditional>@pwiz-bindings-dependency
        <conditional>@msvc-requirement
    ;


rule test-properties ( targets + : sources * : properties * )
{
    if <variant>debug in $(properties)
    {
        CONFIGURATION on $(<[1]) = "Debug" ;
    }
    else
    {
        CONFIGURATION on $(<[1]) = "Release" ;
    }

    local location = [ feature.get-values location : $(properties) ] ;
    if ! $(location)
    {
        if <runtime-debugging>on in $(properties)
        {
            location = $(PWIZ_BUILD_PATH)/bin/$(PLATFORM)/Debug ;
        }
        else
        {
            location = $(PWIZ_BUILD_PATH)/bin/$(PLATFORM)/Release ;
        }
    }
    OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
    INTERMEDIATE_PATH on $(<[1]) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/Test/$(PLATFORM)/" ;
    JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
}

rule do_IDPicker_test ( targets + : sources * : properties * )
{
    return [ test-properties $(targets) : $(sources) : $(properties) ] ;
}

actions do_IDPicker_test
{
    $(MSVC_CURRENT_SETUP_SCRIPT)
    echo Unit testing IDPicker in $(CONFIGURATION:L) configuration...
    set name="IDPicker unit test"
    $(TEST_PRECOMMAND)
    msbuild $(IDPICKER_PATH)/IDPicker.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH) /t:Test /nologo /verbosity:minimal
    set status=%ERRORLEVEL%
    REM IF %status%==0 (msbuild $(IDPICKER_PATH)/Test/Test.csproj /p:SolutionDir=$(IDPICKER_PATH);Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);TestProject=Test /nologo /verbosity:minimal && set status=%ERRORLEVEL%)
    REM IF %status%==0 (mstest /testcontainer:$(OUTPUT_PATH)/Test.dll /noisolation /nologo && set status=%ERRORLEVEL%)
    IF %status%==0 (vstest.console.exe $(OUTPUT_PATH)/Test.dll /Platform:$(PLATFORM) /Framework:.NETFramework,Version=4.7.2)
    $(TEST_POSTCOMMAND)
}

make IDPickerTest.passed
    : # sources
    : # actions
        @do_IDPicker_test
    : # requirements
        <link>shared:<build>no
        <conditional>@no-express-requirement
        <conditional>@msvc-dotnet-requirement
        #<conditional>@test-properties
        <dependency>.//IDPicker
    ;
explicit IDPickerTest.passed ;


rule dotNET-dependencies ( properties * )
{
    if <toolset>msvc in $(properties)
    {
        local location = [ install-location $(properties) ] ;
        return <dependency>IDPicker/$(location) ;
    }
}

rule gcc-install-dll-path ( properties * )
{
    if <toolset>gcc in $(properties) && <target-os>linux in $(properties)
    {
        return <dll-path>'$ORIGIN' ;
    }
}

install data_dependencies
    : # sources
        Qonverter//gene2protein.db3 
    : # requirements
        <conditional>@install-location
        <conditional>@install-identdata-dependencies
    ;

install extension_dependencies
    : # sources
        Qonverter//IdpSqlExtensions
    : # requirements
        <conditional>@install-location
        <install-dependencies>on
        <install-type>SHARED_LIB
    ;

rule install-requirements ( properties * )
{
    return [ install-location $(properties) ]
           [ install-vendor-api-dependencies $(properties) ]
           <dependency>data_dependencies
           <dependency>extension_dependencies
           <dependency>$(PWIZ_ROOT_PATH)//install-msvc-runtime-dlls
           <install-dependencies>off
           <install-type>EXE ;
}

install install_cli
    : # sources
        Qonverter//idpQonvert
        Qonverter//idpQuery
        Qonverter//idpAssemble
        Qonverter//gene2protein.db3 
    : # requirements
        <conditional>@install-requirements
        <conditional>@gcc-install-dll-path
    ;

install install
    : # sources
        Qonverter//idpQonvert
        Qonverter//idpQuery
        Qonverter//idpAssemble
    : # requirements
        <conditional>@dotNET-dependencies
        <conditional>@install-requirements
        <conditional>@gcc-install-dll-path
    ;

# TODO: figure out why this hangs on TeamCity 64-bit builds, but works fine with 32-bit builds
#build-project Deploy ;
