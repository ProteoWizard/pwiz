#
# $Id$
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#
# The Original Code is the IDPicker build system.
#
# The Initial Developer of the Original Code is Matt Chambers.
#
# Copyright 2009 Vanderbilt University
#
# Contributor(s): Surendra Dasari
#


import modules path feature ;

path-constant THIS_PATH : . ;

# read these from global module
TEST_PRECOMMAND = [ modules.peek : TEST_PRECOMMAND ] ;
TEST_POSTCOMMAND = [ modules.peek : TEST_POSTCOMMAND ] ;

rule msbuild_deploy ( targets + : sources * : properties * )
{
    local address-model = [ feature.get-values <address-model> : $(properties) ] ;

    if $(address-model) = 64
    {
        ARTIFACT_NAME on $(targets) = IDPicker-$(version-tag:J=.)-x86_64 ;
        ARCH on $(targets) = x64 ;
    }
    else
    {
        ARTIFACT_NAME on $(targets) = IDPicker-$(version-tag:J=.)-x86 ;
        ARCH on $(targets) = x86 ;
    }

    ADDRESS_MODEL on $(targets) = $(address-model:E=32) ;
    LOCATION on $(targets) = [ path.native [ feature.get-values <location> : $(properties) ]  ] ;
    TOOLSET on $(targets) = [ feature.get-values <toolset-msvc:version> : $(properties) ] ;
    OUTPUT_PATH on $(targets) = [ path.native $(PWIZ_BUILD_PATH)/IDPickerDeploy/ ] ; # OutDir requires trailing slash
    INTERMEDIATE_PATH on $(targets) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/obj/" ;
}

actions msbuild_deploy
{
    $(MSVC_CURRENT_SETUP_SCRIPT)
    echo Building SetupDeployProject...
    msbuild $(THIS_PATH)/SetupDeployProject.csproj /p:Configuration=Release;Platform=AnyCPU;$(INTERMEDIATE_PATH);OutDir=$(OUTPUT_PATH) /nologo /verbosity:minimal
    $(OUTPUT_PATH)SetupDeployProject.exe "$(THIS_PATH)/Deploy.wxs.template" "$(LOCATION)" $(version-tag:J=.) $(numeric-version-tag:J=.) $(ADDRESS_MODEL)
    pushd $(PWIZ_BUILD_PATH)
    "%WIX%\bin\candle.exe" $(ARTIFACT_NAME).wxs -nologo -arch $(ARCH) -dAddressModel=$(ADDRESS_MODEL) -dToolset=$(TOOLSET)
    "%WIX%\bin\light.exe" $(ARTIFACT_NAME).wixObj -nologo -ext WixUIExtension -ext WixNetFxExtension -cultures:en-us
    set EXIT=%ERRORLEVEL%
    if %EXIT% NEQ 0 exit %EXIT%
    echo Built $(ARTIFACT_NAME).msi > $(LOCATION)\\setup.exe
    popd
}


rule build-location ( properties * )
{
    local result ;
    # don't override the location when it's already set
    if ! <location> in $(properties:G)
    {
        return [ install-location $(properties) ] ;
    }
    else
    {
        return $(properties) ;
    }
}

make setup.exe
    : # sources
    : # actions
        @msbuild_deploy
    : # requirements
        <variant>debug:<build>no # don't make debug installs
        <dependency>..//install
        <dependency>..//IDPicker
        <dependency>..//IDPICKER_VERSION
        <conditional>@build-location
        <conditional>@msvc-requirement
    ;


rule test_msi ( targets + : sources * : properties * )
{
    local address-model = [ feature.get-values <address-model> : $(properties) ] ;
    
    if $(address-model) = 64
    {
        ARTIFACT_NAME on $(targets) = IDPicker-$(version-tag:J=.)-x86_64 ;
        INSTALL_PATH on $(targets) = "%LocalAppData%\\Apps\\IDPicker $(version-tag:J=.) 64-bit" ;
    }
    else
    {
        ARTIFACT_NAME on $(targets) = IDPicker-$(version-tag:J=.)-x86 ;
        INSTALL_PATH on $(targets) = "%LocalAppData%\\Apps\\IDPicker $(version-tag:J=.) 32-bit" ;
    }

    LOCATION on $(targets) = [ path.native [ feature.get-values <location> : $(properties) ]  ] ;
}

actions test_msi
{
    set name=DeployTest
    $(TEST_PRECOMMAND)

    $(MSVC_CURRENT_SETUP_SCRIPT)
    echo Installing $(ARTIFACT_NAME)...
    pushd $(PWIZ_BUILD_PATH)
    start /wait msiexec /qn /l* $(ARTIFACT_NAME).log /norestart /i $(ARTIFACT_NAME).msi REBOOT=ReallySuppress ALLUSERS=2 MSIINSTALLPERUSER=1
    set EXIT=%ERRORLEVEL%
    IF %EXIT% NEQ 0 echo Install failed with code %EXIT%.
    set status=%EXIT%
    IF %EXIT% NEQ 0 (
      $(TEST_POSTCOMMAND)
      exit %EXIT%
    )

    set PATH_TMP=%PATH%
    set PATH=
    "$(INSTALL_PATH)\IDPicker.exe" --test --headless
    set TEST_EXIT=%ERRORLEVEL%
    IF %TEST_EXIT% NEQ 0 echo Deployment test failed with code %TEST_EXIT%.
    set PATH=%PATH_TMP%

    echo Uninstalling $(ARTIFACT_NAME)...
    start /wait msiexec /qn /l* $(ARTIFACT_NAME).log /norestart /x $(ARTIFACT_NAME).msi REBOOT=ReallySuppress
    set EXIT=%ERRORLEVEL%
    IF %TEST_EXIT% NEQ 0 IF %EXIT% NEQ 0 set status=%EXIT%
    IF %EXIT% NEQ 0 echo Uninstall failed with code %EXIT%.
    
    set status=%TEST_EXIT%
    $(TEST_POSTCOMMAND)
    IF %TEST_EXIT% EQU 0 echo Deployment test passed.
    IF %TEST_EXIT% EQU 0 echo Deployment test passed. > $(LOCATION)\Test.passed

    IF %TEST_EXIT% NEQ 0 exit 1
}

make Test.passed
    : # sources
    : # actions
        @test_msi
    : # requirements
        <variant>debug:<build>no # don't test debug installs
        <dependency>setup.exe
        <conditional>@build-location
        <conditional>@msvc-requirement
    ;
explicit Test.passed ;
alias Test : Test.passed ;