<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SVG</name>
    </assembly>
    <members>
        <member name="T:SvgNet.Elements.SvgElement">
            <summary>
            The base class for SVG elements.  It represents some part of an SVG document, either an element (rect, circle etc) or a text item.  Duties include:
            <list type="bulleted">
            <item>
            <description>
            Maintains a list of child elements and a list of attributes.
            </description>
            </item>
            <item>
            <description>
            Writes itself and its children to an Xml document.
            </description>
            </item>
            <item>
            <description>
            Reads itself and its children from an Xml document.
            </description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:SvgNet.Elements.SvgElement.Attributes">
            <summary>
            A hashtable containing this element's attributes.  Keys are strings but values can be any type; they will only be
            reduced to strings when this element needs to convert itself to XML.
            </summary>
        </member>
        <member name="P:SvgNet.Elements.SvgElement.Children">
            <summary>
            An ArrayList containing this element's children
            </summary>
        </member>
        <member name="P:SvgNet.Elements.SvgElement.Name">
            <summary>
            The name of the XML element that this SVG element represents.
            </summary>
        </member>
        <member name="P:SvgNet.Elements.SvgElement.Item(System.String)">
            <summary>
            The element whose child this element is; can be null, because SvgElements may only be inserted into a full SVG tree
            long after they are created.
            </summary>
            <summary>
            A quick way to get and set attributes.
            </summary>
        </member>
        <member name="M:SvgNet.Elements.SvgElement.AddChild(SvgNet.Elements.SvgElement)">
            <summary>
            Adds a child, and sets the child's parent to this element.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:SvgNet.Elements.SvgElement.AddChildren(SvgNet.Elements.SvgElement[])">
            <summary>
            Adds a variable number of children
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:SvgNet.Elements.SvgElement.ReadXmlElement(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Given a document and a current node, read this element from the node.
            </summary>
            <param name="doc"></param>
            <param name="el"></param>
        </member>
        <member name="M:SvgNet.Elements.SvgElement.ToString">
            <summary>
            A simple ToString() for use in debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SvgNet.Elements.SvgElement.WriteSVGString(System.Boolean)">
            <summary>
            Get a string that contains a complete SVG document.  XML version, DOCTYPE etc are included.
            </summary>
            <returns></returns>
            <param name="compressAttributes">Should usually be set true.  Causes the XML output to be optimized so that
            long attributes like styles and transformations are represented with entities.</param>
        </member>
        <member name="M:SvgNet.Elements.SvgElement.WriteSVGString(System.Boolean,System.Nullable{System.Drawing.SizeF})">
            <summary>
            Get a string that contains a complete SVG document.  XML version, DOCTYPE etc are included.
            </summary>
            <returns></returns>
            <param name="compressAttributes">Should usually be set true.  Causes the XML output to be optimized so that
            long attributes like styles and transformations are represented with entities.</param>
            <param name="bounds">Width/Height values to add as attributes to the svg element</param>
        </member>
        <member name="M:SvgNet.Elements.SvgElement.WriteXmlElements(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Given an XML document and a parent node, write out this node and its descendants as XmlElements.
            </summary>
            <param name="doc">A document</param>
            <param name="parent">A node, or null if this element is to be the root element</param>
        </member>
        <member name="T:SvgNet.Elements.SvgEllipseElement">
            <summary>
            Represents an <c>ellipse</c> element.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgAElement">
            <summary>
            Represents an <c>a</c> element.  It has an xref and a target.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgClipPathElement">
            <summary>
            Represents a <c>clippath</c> element.  It has no particular properties of its own.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgDefsElement">
            <summary>
            Represents a <c>defs</c> element.  It has no particular properties of its own.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgGenericElement">
            <summary>
            Represents an element that is not yet represented by a class of its own.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgGroupElement">
            <summary>
            Represents a <c>g</c> element.  It has no particular properties of its own.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgSwitchElement">
            <summary>
            Represents a <c>switch</c> element.  It has no particular properties of its own.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgLinearGradientElement">
            <summary>
            Represents an SVG linearGradient element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgLineElement">
            <summary>
            Represents a <c>line</c> element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgPathElement">
            <summary>
            Represents a <c>path</c> element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgPatternElement">
            <summary>
            Represents an SVG pattern element, which defines a fill pattern by defining a viewport onto a subscene.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgPolygonElement">
            <summary>
            Represents a <c>polygon</c> element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgPolylineElement">
            <summary>
            Represents a <c>polyline</c> element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgRadialGradientElement">
            <summary>
            Represents an svg radialGradient element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgRectElement">
            <summary>
            Represents a <c>rect</c> element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgStopElement">
            <summary>
            Represents an SVG stop element, which specifies one color in a gradient.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgStyledTransformedElement">
            <summary>
            This is an SvgElement that can have a CSS style and an SVG transformation list.  It contains special properties to make reading and setting the style
            and the transformation easier.  All SVG elements that actually represent visual entities or groups of entities are <c>SvgStyledTransformedElements</c>.
            </summary>
        </member>
        <member name="P:SvgNet.Elements.SvgStyledTransformedElement.Style">
            <summary>
            Provides an easy way to get the attribute called "style" as an <c>SvgStyle</c> object.  If no such attribute has been set, one is created when
            this property is read.
            </summary>
        </member>
        <member name="P:SvgNet.Elements.SvgStyledTransformedElement.Transform">
            <summary>
            Provides an easy way to get the attribute called "transform" as an <c>SvgTransformList</c> object.  If no such attribute has been set, one is created when
            this property is read.
            </summary>
        </member>
        <member name="M:SvgNet.Elements.SvgStyledTransformedElement.ReadXmlElement(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Given a document and a current node, read this element from the node.
            </summary>
            <param name="doc"></param>
            <param name="el"></param>
        </member>
        <member name="M:SvgNet.Elements.SvgStyledTransformedElement.WriteXmlElements(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overridden in this class to provide special handling for the style and transform attributes,
            which are often long and complicated.  For instance, it may be desirable for styles to be written as entities or as separate
            attributes.
            </summary>
            <param name="doc"></param>
            <param name="parent"></param>
        </member>
        <member name="T:SvgNet.Elements.SvgSvgElement">
            <summary>
            Represents a <c>svg</c> element
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgImageElement">
            <summary>
            Represents an SVG <c>image</c> element.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgSymbolElement">
            <summary>
            Represents an SVG <c>symbol</c> element.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgUseElement">
            <summary>
            Represents an SVG <c>use</c> element.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgTextElement">
            <summary>
            Represents a <c>text</c> element.  The SVG text element is unusual in that it expects actual XML text nodes below
            it, rather than consisting only of attributes and child elements  (other elements like this are title, desc, and tspan).
            <c>SvgTextElement</c> therefore has to be serialized
            to XML slightly differently.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgDescElement">
            <summary>
            Represents an SVG <c>desc</c> element.  As with the SvgTextElement, the payload is in the enclosed text rather than in attributes and
            subelements, so we need to specially add text when serializing.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgTitleElement">
            <summary>
            Represents an SVG <c>desc</c> element.  As with the SvgTextElement, the payload is in the enclosed text rather than in attributes and
            subelements, so we need to specially add text when serializing.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgTrefElement">
            <summary>
            Represents a <c>tref</c> element.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.SvgTspanElement">
            <summary>
            Represents a <c>tspan</c> element.  The tspan element is unique in that it expects actual XML text nodes below
            it, rather than consisting only of attributes and child elements.  <c>SvgTextElement</c> therefore has to be serialized
            to XML slightly differently.
            </summary>
        </member>
        <member name="T:SvgNet.Elements.TextNode">
            <summary>
            Represents the text contained in a title, desc, text, or tspan element.  Maps to an XmlText object in an XML document.  It is inherited from
            </summary>
        </member>
        <member name="M:SvgNet.Elements.TextNode.AddChild(SvgNet.Elements.SvgElement)">
            <summary>
            Adds a child, and sets the child's parent to this element.
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:SvgNet.Elements.TextNode.AddChildren(SvgNet.Elements.SvgElement[])">
            <summary>
            Adds a variable number of children
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:SvgNet.Elements.TextNode.ReadXmlElement(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Given a document and a current node, read this element from the node.
            </summary>
            <param name="doc"></param>
            <param name="el"></param>
        </member>
        <member name="M:SvgNet.Elements.TextNode.WriteXmlElements(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overridden to simply create an XML text node below the parent.
            </summary>
            <param name="doc"></param>
            <param name="parent"></param>
        </member>
        <member name="T:SvgNet.Exceptions.SvgException">
            <summary>
            A general-purpose exception for problems that occur in SvgNet.
            </summary>
        </member>
        <member name="P:SvgNet.Exceptions.SvgException.Ctx">
            <summary>
            A string intended to supply context information.
            </summary>
        </member>
        <member name="P:SvgNet.Exceptions.SvgException.Msg">
            <summary>
            A message describing the problem.
            </summary>
        </member>
        <member name="T:SvgNet.Exceptions.SvgGdiNotImplementedException">
            <summary>
            Exception thrown when a GDI+ operation is attempted on an IGraphics implementor that does not support the operation.
            For instance, <c>SvgGraphics</c> does not support any of the <c>MeasureString</c> methods.
            </summary>
        </member>
        <member name="T:SvgNet.GdiGraphics">
            <summary>
            An IGraphics implementation that simply passes every call through to a GDI+ <c>Graphics</c> object.
            </summary>
        </member>
        <member name="M:SvgNet.GdiGraphics.#ctor(System.Drawing.Graphics)">
            <summary>
            An IGraphics implementation that simply passes every call through to a GDI+ <c>Graphics</c> object.
            </summary>
        </member>
        <member name="T:SvgNet.SvgGraphics">
            <summary>
            This is an IGraphics implementor that builds up an SVG scene.  Use it like a regular <c>Graphics</c> object, and call
            <c>WriteXMLString</c> to output SVG.  In this way, whatever you would normally draw becomes available as an SVG document.
            <para>
            SvgGraphics has to do quite a lot of work to convert GDI instructions to SVG equivalents.  Some things are approximated and slight differences will
            be noticed.  Also, in several places GDI+ does not do what it is supposed to (e.g. arcs of non-circular ellipses, truncating bitmaps).  In these cases
            SvgGraphics does do the right thing, so the result will be different.
            </para>
            <para>
            Some GDI instructions such as <c>MeasureString</c>
            are meaningless in SVG, usually because there is no physical display device to refer to.  When such a method is called an <see cref="T:SvgNet.Exceptions.SvgGdiNotImplementedException"/> exception is thrown.
            </para>
            <para>
            Many parameters used by GDI have no SVG equivalent -- for instance, GDI allows some fine control over how font hints are used.  This detailed information is
            thrown away.
            </para>
            <para>
            Some aspects of GDI that can be implemented in SVG are not.  The most important omission is that only solid brushes are supported.
            </para>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.WriteSVGString">
            <summary>
            Get a string containing an SVG document.  The very heart of SvgGdi.  It calls <c>WriteSVGString</c> on the <see cref="T:SvgNet.Elements.SvgElement"/>
            at the root of this <c>SvgGraphics</c> and returns the resulting string.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.WriteSVGString(System.Drawing.SizeF)">
            <summary>
            Get a string containing an SVG document.  The very heart of SvgGdi.  It calls <c>WriteSVGString</c> on the <see cref="T:SvgNet.Elements.SvgElement"/>
            at the root of this <c>SvgGraphics</c> and returns the resulting string.
            </summary>
            <param name="bounds">Width/Height values to add as attributes to the svg element</param>
        </member>
        <member name="M:SvgNet.SvgGraphics.WriteSVGString(System.Single,System.Single)">
            <summary>
            Get a string containing an SVG document.  The very heart of SvgGdi.  It calls <c>WriteSVGString</c> on the <see cref="T:SvgNet.Elements.SvgElement"/>
            at the root of this <c>SvgGraphics</c> and returns the resulting string.
            </summary>
            <param name="width">Width value to add as attribute to the svg element</param>
            <param name="height">Height value to add as attribute to the svg element</param>
        </member>
        <member name="P:SvgNet.SvgGraphics.Clip">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.ClipBounds">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.CompositingMode">
            <summary>
            Get is not implemented (throws an exception).  Set does nothing.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.CompositingQuality">
            <summary>
            Get is not implemented (throws an exception).  Set does nothing.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.DpiX">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.DpiY">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.InterpolationMode">
            <summary>
            Get is not implemented (throws an exception).  Set does nothing.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.IsClipEmpty">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.IsVisibleClipEmpty">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.PageScale">
            <summary>
            Get is not implemented (throws an exception).  Set does nothing.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.PageUnit">
            <summary>
            Get is not implemented (throws an exception).  Set does nothing.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.PixelOffsetMode">
            <summary>
            Get is not implemented (throws an exception).  Set does nothing.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.RenderingOrigin">
            <summary>
            Get is not implemented (throws an exception).  Set does nothing.
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.TextContrast">
            <summary>
            Get is not implemented (throws an exception).
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.TextRenderingHint">
            <summary>
            Get is not implemented (throws an exception).
            </summary>
        </member>
        <member name="P:SvgNet.SvgGraphics.VisibleClipBounds">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.AddMetafileComment(System.Byte[])">
            <summary>
            Does nothing.  Should perhaps insert a comment into the SVG XML output, but is this really analogous
            to a metafile comment.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.BeginContainer">
            <summary>
            Implemented, but returns null as SVG has a proper scenegraph, unlike GDI+.  The effect of calling <c>BeginContainer</c> is to create a new SVG group
            and apply transformations etc to produce the effect that a GDI+ container would produce.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.BeginContainer(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.Clear(System.Drawing.Color)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawArc(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented.  <c>DrawArc</c> functions work correctly and thus produce different output from GDI+ if the ellipse is not circular.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawArc(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawArc(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawBezier(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawBezier(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawBezier(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawBeziers(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Implemented.  The <c>DrawClosedCurve</c> functions emulate GDI behavior by drawing a coaligned cubic bezier.  This seems to produce
            a very good approximation so probably GDI+ does the same thing -- a
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawClosedCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Implemented.  The <c>DrawCurve</c> functions emulate GDI behavior by drawing a coaligned cubic bezier.  This seems to produce
            a very good approximation so probably GDI+ does the same.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Int32,System.Int32,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawCurve(System.Drawing.Pen,System.Drawing.Point[],System.Int32,System.Int32,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawEllipse(System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawEllipse(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawIcon(System.Drawing.Icon,System.Int32,System.Int32)">
            <summary>
            Implemented.  The <c>DrawIcon</c> group of functions emulate drawing a bitmap by creating many SVG <c>rect</c> elements.  This is quite effective but
            can lead to a very big SVG file.  Alpha and stretching are handled correctly.  No antialiasing is done.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawIcon(System.Drawing.Icon,System.Drawing.Rectangle)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawIconUnstretched(System.Drawing.Icon,System.Drawing.Rectangle)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.PointF)">
            <summary>
            Implemented.  The <c>DrawImage</c> group of functions emulate drawing a bitmap by creating many SVG <c>rect</c> elements.  This is quite effective but
            can lead to a very big SVG file.  Alpha and stretching are handled correctly.  No antialiasing is done.
            <para>
            The GDI+ documentation suggests that the 'Unscaled' functions should truncate the image.  GDI+ does not actually do this, but <c>SvgGraphics</c> does.
            </para>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Point)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[])">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Point[])">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes,System.Drawing.Graphics.DrawImageAbort)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Point[],System.Drawing.Rectangle,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImage(System.Drawing.Image,System.Drawing.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.GraphicsUnit,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Point)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImageUnscaled(System.Drawing.Image,System.Drawing.Rectangle)">
            <summary>
            Implemented.  There seems to be a GDI bug in that the image is *not* clipped to the rectangle.  We do clip it.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawImageUnscaled(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawLine(System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawLine(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawLine(System.Drawing.Pen,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawLines(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Implemented
            </summary>
            <remarks>
            Mainly based on the libgdi+ implementation: https://github.com/mono/libgdiplus/blob/master/src/graphics-cairo.c
            and this SO question reply: https://stackoverflow.com/questions/1790862/how-to-determine-endpoints-of-arcs-in-graphicspath-pathpoints-and-pathtypes-arra
            from SiliconMind.
            </remarks>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawPie(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented.  <c>DrawPie</c> functions work correctly and thus produce different output from GDI+ if the ellipse is not circular.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawPie(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawPie(System.Drawing.Pen,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawPolygon(System.Drawing.Pen,System.Drawing.Point[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawRectangle(System.Drawing.Pen,System.Drawing.Rectangle)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawRectangle(System.Drawing.Pen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawRectangles(System.Drawing.Pen,System.Drawing.Rectangle[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF)">
            <summary>
            Implemented.
            <para>In general, DrawString functions work, but it is impossible to guarantee that an SVG renderer will have a certain font and draw it in the
            same way as GDI+.
            </para>
            <para>
            SVG does not do word wrapping and SvgGdi does not emulate it yet (although clipping is working).  The plan is to wait till SVG 1.2 becomes available, since 1.2 contains text
            wrapping/flowing attributes.
            </para>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single,System.Drawing.StringFormat)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)">
            <summary>
            The effect of calling this method is to pop out of the closest SVG group.  This simulates restoring GDI+ state from a <c>GraphicsContainer</c>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.ExcludeClip(System.Drawing.Rectangle)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.ExcludeClip(System.Drawing.Region)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillClosedCurve(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillEllipse(System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillEllipse(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPie(System.Drawing.Brush,System.Drawing.Rectangle,System.Single,System.Single)">
            <summary>
            Implemented <c>FillPie</c> functions work correctly and thus produce different output from GDI+ if the ellipse is not circular.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPie(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillPolygon(System.Drawing.Brush,System.Drawing.Point[],System.Drawing.Drawing2D.FillMode)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillRectangle(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillRectangle(System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillRectangle(System.Drawing.Brush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillRectangles(System.Drawing.Brush,System.Drawing.Rectangle[])">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.FillRegion(System.Drawing.Brush,System.Drawing.Region)">
            <summary>
            Not implemented, because GDI+ regions/paths are not emulated.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.Flush">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.Flush(System.Drawing.Drawing2D.FlushIntention)">
            <summary>
            Does nothing
            </summary>
            <param name="intention"></param>
        </member>
        <member name="M:SvgNet.SvgGraphics.GetNearestColor(System.Drawing.Color)">
            <summary>
            Not meaningful when there is no actual display device.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IntersectClip(System.Drawing.Rectangle)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IntersectClip(System.Drawing.RectangleF)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IntersectClip(System.Drawing.Region)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Int32,System.Int32)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Drawing.Point)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Single,System.Single)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Drawing.PointF)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Drawing.Rectangle)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsVisible(System.Drawing.RectangleF)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureCharacterRanges(System.String,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
             This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat,System.Int32@,System.Int32@)">
            <summary>
            This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.PointF,System.Drawing.StringFormat)">
            <summary>
            This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF)">
            <summary>
            This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureString(System.String,System.Drawing.Font,System.Drawing.SizeF,System.Drawing.StringFormat)">
            <summary>
            This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureString(System.String,System.Drawing.Font)">
            <summary>
             This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureString(System.String,System.Drawing.Font,System.Int32)">
            <summary>
             This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MeasureString(System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat)">
            <summary>
            This method is implemented and produces a result which is often correct, but it is impossible to guarantee because 'MeasureString' is a fundamentally inapplicable to device independent output like SVG.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Implemented, but ignores <c>order</c>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.ResetClip">
            <summary>
            Implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.ResetTransform">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.Restore(System.Drawing.Drawing2D.GraphicsState)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.RotateTransform(System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Implemented, but ignores <c>order</c>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.Save">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.ScaleTransform(System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Implemented, but ignores <c>order</c>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.Graphics)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.Graphics,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.Rectangle)">
            <summary>
            Implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.Rectangle,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.RectangleF)">
            <summary>
            Implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.  Only rectangular clip regions work.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Point[])">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.TranslateClip(System.Single,System.Single)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.TranslateClip(System.Int32,System.Int32)">
            <summary>
            Not implemented, because SvgGdi does not try and emulate GDI+ regions.
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.TranslateTransform(System.Single,System.Single)">
            <summary>
            Implemented
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Implemented, but ignores <c>order</c>
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.IsEndAnchorSimple(System.Drawing.Drawing2D.LineCap)">
            <summary>
            Decides whether the pen's anchor type is simple enough to be drawn by a fast approximation using the DrawEndAnchor
            </summary>
        </member>
        <member name="M:SvgNet.SvgGraphics.HandleBrush(System.Drawing.Brush)">
            <summary>
            When a GDI instruction with a brush parameter is called, there can be a lot we have to do to emulate the brush.  The aim is to return a
            style that represents the brush.
            <para>
            Solid brush is very easy.
            </para>
            <para>
            Linear grad brush:  we ignore the blend curve and the transformation (and therefore the rotation parameter if any)
            Hatch brush:
            </para>
            <para>
            Other types of brushes are too hard to emulate and are rendered pink.
            </para>
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="T:SvgNet.SvgGraphics.MatrixStack">
            <summary>
            This class is needed because GDI+ does not maintain a proper scene graph; rather it maintains a single transformation matrix
            which is applied to each new object.  The matrix is saved and reloaded when 'begincontainer' and 'endcontainer' are called.  SvgGraphics has to
            emulate this behaviour.
            <para>
            This matrix stack caches it's 'result' (ie. the current transformation, the product of all matrices).  The result is
            recalculated when necessary.
            </para>
            </summary>
        </member>
        <member name="T:SvgNet.Interfaces.IElementWithText">
            <summary>
            Interface for SvgElements that have a text node.
            </summary>
        </member>
        <member name="T:SvgNet.Interfaces.IElementWithXRef">
            <summary>
            Interface for SvgElements that xlink to another element, e.g. <c>use</c>
            </summary>
        </member>
        <member name="T:SvgNet.Interfaces.IGraphics">
            <summary>
            An interface that contains exactly the same methods as the GDI+ Graphics object.  If your drawing routines draw to an <c>IGraphics</c> interface, then you can supply either
            a <c>GdiGraphics</c> object to render to the screen, or an <see cref="T:SvgNet.SvgGraphics" /> object to render to an SVG file.
            <para>
            It's a pity that <c>Graphics</c> is a sealed class.  Otherwise there'd be no need to have this interface or the <see cref="T:SvgNet.GdiGraphics"/> class; we could simply
            derive a class from <c>Graphics</c> to do SVG output.
            </para>
            </summary>
        </member>
        <member name="M:SvgNet.MetafileTools.EmfTools.BinaryReaderExtensions.Skip(System.IO.BinaryReader,System.Int32)">
            <summary>
            Skips excess bytes. Work-around for some WMF files that contain undocumented fields.
            </summary>
            <param name="reader"></param>
            <param name="excess"></param>
        </member>
        <member name="T:SvgNet.MetafileTools.EmfTools.EmfBinaryRecord">
            <summary>
            Implements a EMF META record
            </summary>
        </member>
        <member name="P:SvgNet.MetafileTools.EmfTools.EmfBinaryRecord.RecordSize">
            <summary>
            Gets or sets record length
            </summary>
        </member>
        <member name="P:SvgNet.MetafileTools.EmfTools.EmfBinaryRecord.RecordType">
            <summary>
            Gets or sets record type (aka RecordFunction)
            </summary>
        </member>
        <member name="M:SvgNet.MetafileTools.EmfTools.EmfBinaryRecord.Read(System.IO.BinaryReader)">
            <summary>
            Reads a record from binary stream. If this method is not overridden it will skip this record and go to next record.
            NOTE: When overriding this method remove the base.Read(reader) line from code.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:SvgNet.MetafileTools.EmfTools.EmfReader">
            <summary>
            Low-level EMF parser
            </summary>
        </member>
        <member name="M:SvgNet.MetafileTools.EmfTools.EmfReader.#ctor(System.IO.Stream)">
            <summary>
            Low-level EMF parser
            </summary>
        </member>
        <member name="T:SvgNet.MetafileTools.MetafileParser.EmfStockObject">
            <summary>
            https://msdn.microsoft.com/en-us/library/cc231191 without the 0x80000000 bit
            </summary>
        </member>
        <member name="T:SvgNet.SvgFactory">
            <summary>
            Static methods to produce/write/copy Svg documents reside in this class.
            </summary>
        </member>
        <member name="M:SvgNet.SvgFactory.BuildElementNameDictionary">
            <summary>
            Used by LoadFromXML
            </summary>
        </member>
        <member name="M:SvgNet.SvgFactory.CloneElement(SvgNet.Elements.SvgElement)">
            <summary>
            Create a complete deep copy of the given tree of <c>SvgElement</c> objects.
            A new set of elements is created, and if the attributes are cloneable they are deep-copied too.
            Since strings and all SvgType classes are cloneable, the new tree is independant of the old.
            </summary>
            <param name="el"></param>
            <returns></returns>
        </member>
        <member name="M:SvgNet.SvgFactory.LoadFromXML(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Given an xml document and (optionally) a particular element to start from, read the xml nodes and construct
            a tree of <see cref="T:SvgNet.Elements.SvgElement"/> objects.  Xml tags that do not correspond to a particular class will be
            represented by an <see cref="T:SvgNet.Elements.SvgGenericElement"/>.  This means that literally any XML input can be read in
            and written out, even if it has nothing to do with Svg.  More usefully, it means that new and unsupported tags
            and attributes will be represented in the <c>SvgElement</c> tree and written out correctly even if SvgNet does
            not understand them.
            </summary>
            <param name="doc"></param>
            <param name="el"></param>
            <returns></returns>
        </member>
        <member name="M:SvgNet.SvgFactory.CompressXML(System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Helper function to compress long xml attributes into entities.
            <para>
            This would work on any XML, it is not SVG specific, so it should eventually be in some 'xml tools' class.
            </para>
            </summary>
            <param name="doc"></param>
            <param name="el"></param>
            <returns>A string of entities which can be inserted into the DOCTYPE when the document is written.</returns>
        </member>
        <member name="M:SvgNet.SvgFactory.RecCompXML(System.Collections.Hashtable,System.Collections.Hashtable,System.Xml.XmlDocument,System.Xml.XmlElement,System.Int32@)">
            <summary>
            Used by CompressXML
            </summary>
            <param name="entities">Map of attribute to entity name</param>
            <param name="singletons">Output: List of single use attributes to 'uncompress'</param>
            <param name="doc"></param>
            <param name="el"></param>
            <param name="idx">Number that is incremented to provide new entity names</param>
        </member>
        <member name="M:SvgNet.SvgFactory.RecLoadFromXML(SvgNet.Elements.SvgElement,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Used by LoadFromXML
            </summary>
            <param name="e"></param>
            <param name="doc"></param>
            <param name="el"></param>
        </member>
        <member name="T:SvgNet.Types.PathSeg">
            <summary>
            A segment in an Svg path.  This is not a real SVG type; it is not in the SVG spec.  It is provided for making paths
            easier to specify and parse.
            </summary>
        </member>
        <member name="M:SvgNet.Types.PathSeg.#ctor(SvgNet.Types.SvgPathSegType,System.Boolean,System.Single[])">
            <summary>
            A segment in an Svg path.  This is not a real SVG type; it is not in the SVG spec.  It is provided for making paths
            easier to specify and parse.
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgAngle">
            <summary>
            An angle, as found here and there throughout the SVG spec
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgAngleType">
            <summary>
            The units in which an SvgAngle can be specified
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgColor">
            <summary>
            A color, as found in CSS2 and used in SVG.  As well as a GDI Color object, SvgColor stores
            the string it was initialized from, so that when a color specified as 'black' is written out,
            it will be written 'black' rather than '#000000'
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgColor.ToString">
            <summary>
            If the SvgColor was constructed from a string, use that string; otherwise use rgb() form
            </summary>
            <returns></returns>
        </member>
        <member name="M:SvgNet.Types.SvgColor.FromString(System.String)">
            <summary>
            As well as parsing the four types of CSS color descriptor (rgb, #xxxxxx, color name, and system color name),
            the FromString of this type stores the original string
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:SvgNet.Types.SvgLength">
            <summary>
            A length or coordinate component (in SVG 1.1 the specification says they are the same)
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgLengthType">
            <summary>
            The various units in which an SvgLength can be specified.
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgNumber">
            <summary>
            A number, as specified in the SVG standard.  It is stored as a float.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgNumber.FromString(System.String)">
            <summary>
            float.Parse is used to parse the string.  float.Parse does not follow the exact rules of the SVG spec.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SvgNet.Types.SvgNumber.ToString">
            <summary>
            float.ToString is used to output a string.  This is true for all numbers in SvgNet.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SvgNet.Types.SvgNumList">
            <summary>
            A number list, as used in the SVG spec for e.g. the value of a viewBox attribute.  Basically a list of numbers in
            any format separated by whitespace and commas.
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgPath">
            <summary>
            A path, composed of segments, as described in the SVG 1.1 spec section 8.3
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgPath.FromString(System.String)">
            <summary>
            The parsing of the path is not completely perfect yet.  You can only have one space between path elements.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:SvgNet.Types.SvgPathSegType">
            <summary>
            The various different types of segment that make up an SVG path, as listed in the SVG Path grammar.
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgPoints">
            <summary>
            A list of points, as specified in the SVG 1.1 spec section 9.8.  Only used in polygon and polyline elements.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgPoints.#ctor(System.Single[])">
            <summary>
            The array must have an even length
            </summary>
            <param name="pts"></param>
        </member>
        <member name="M:SvgNet.Types.SvgPoints.FromString(System.String)">
            <summary>
            The standard boils down to a list of numbers in any format separated by any amount of wsp and commas;
            in other words it looks the same as a SvgNumList
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:SvgNet.Types.SvgStyle">
            <summary>
            Represents a CSS2 style, as applied to an SVG element.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.#ctor(System.Drawing.Pen)">
            <summary>
            Creates a style from a GDI+ pen object.  Most properties of the pen are implemented, but GDI+ allows fine control over line-capping which
            has no equivalent in SVG.
            </summary>
            <param name="pen"></param>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.#ctor(System.Drawing.SolidBrush)">
            <summary>
            Creates a style based on a GDI brush object.  Only works for solid brushes; pattern brushes are not yet emulated.
            </summary>
            <param name="brush"></param>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.#ctor(System.Drawing.Font)">
            <summary>
            Creates a style based on a GDI+ font object.  GDI+ allows many subtle specifications which have no SVG equivalent.
            </summary>
            <param name="font"></param>
        </member>
        <member name="P:SvgNet.Types.SvgStyle.Keys">
            <summary>
            A basic way to enumerate the styles.
            </summary>
        </member>
        <member name="P:SvgNet.Types.SvgStyle.Item(System.String)">
            <summary>
            A quick way to get and set style elements.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.op_Addition(SvgNet.Types.SvgStyle,SvgNet.Types.SvgStyle)">
            <summary>
            Adds two SvgStyles together, resulting in a new object that contains all the attributes of both styles.
            Attributes are copied deeply, i.e. cloned if they are <c>ICloneable</c>.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.Clone">
            <summary>
            Creates a new style, but does not do a deep copy on the members in the style.  Thus if any of these are
            not strings, they meay be left referred to by more than one style or element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.FromString(System.String)">
            <summary>
            Parses a CSS string representation as used in SVG.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.Get(System.String)">
            <summary>
            Gets the value for a given key.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.Set(System.String,System.Object)">
            <summary>
            Sets a style.  The key must be a string but the value can be anything (e.g. SvgColor).  If and when the element that owns this style is written out
            to XML, <c>ToString</c> will be called on the value.
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:SvgNet.Types.SvgStyle.ToString">
            <summary>
            Outputs a CSS string representation as used in SVG.
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgTransform">
            <summary>
            Represents a single element in an SVG transformation list.  The transformation is represented internally as a
            GDI+ Matrix object.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgTransform.FromString(System.String)">
            <summary>
            Parse a transformation according to the SVG standard.  This is complex enough that it makes
            me wish it was worth using a real parser, but antlr is so unwieldy.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgTransform.ToString">
            <summary>
            Currently, we always output as matrix() no matter how the transform was specified.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SvgNet.Types.SvgTransformList">
            <summary>
            Represents an SVG transform-list, as specified in section 7.6 of the SVG 1.1 standard.
            </summary>
        </member>
        <member name="M:SvgNet.Types.SvgTransformList.FromString(System.String)">
            <summary>
            Parse a string containing a whitespace-separated list of transformations as per the SVG
            standard
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgUriReference">
            <summary>
            Represents a URI reference within a style.  Local uri references are generally strings of the form
            <c>url(#elementID)</c>.   This class should not be confused with <see cref="T:SvgNet.Types.SvgXRef"/> which represents
            the xlink:* properties of, for example, an <c>a</c> element.
            </summary>
        </member>
        <member name="T:SvgNet.Types.SvgXRef">
            <summary>
            Represents a URI reference.  Unlike most svg types, uri references are represented by more than one attribute
            of an element.  This means special measures are required to get and set uri references.
            </summary>
        </member>
    </members>
</doc>
