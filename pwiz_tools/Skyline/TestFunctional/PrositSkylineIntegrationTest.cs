/*
 * Original author: Tobias Rohde <tobiasr .at. uw.edu>,
 *                  MacCoss Lab, Department of Genome Sciences, UW
 *
 * Copyright 2019 University of Washington - Seattle, WA
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Google.Protobuf.Collections;
using Grpc.Core;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using pwiz.Skyline;
using pwiz.Skyline.Alerts;
using pwiz.Skyline.Controls;
using pwiz.Skyline.Controls.Graphs;
using pwiz.Skyline.Controls.SeqNode;
using pwiz.Skyline.Model;
using pwiz.Skyline.Model.Lib;
using pwiz.Skyline.Model.Prosit;
using pwiz.Skyline.Model.Prosit.Communication;
using pwiz.Skyline.Model.Prosit.Config;
using pwiz.Skyline.Model.Prosit.Models;
using pwiz.Skyline.Properties;
using pwiz.Skyline.SettingsUI;
using pwiz.Skyline.ToolsUI;
using pwiz.Skyline.Util;
using pwiz.SkylineTestUtil;
using Tensorflow;
using Tensorflow.Serving;

namespace pwiz.SkylineTestFunctional
{
    [TestClass]
    public class PrositSkylineIntegrationTest : AbstractFunctionalTestEx
    {
        private bool RecordData { get { return false; } }


        public static PrositQuery PING_QUERY_MS2 = new PrositIntensityQuery(
            new[]
            {
                new PrositIntensityInput("PING", 0.3200f, 1)
            },
            new[]
            {
                new[]
                {
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                }
            }
        );

        public static PrositQuery PING_QUERY_IRT = new PrositRetentionTimeQuery(
            new[]
            {
                "PING"
            },
            new[] {0.0f});

        private static List<PrositQuery> QUERIES = new List<PrositQuery>(new PrositQuery[] {
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2500f, 2)
                },
                new[] {
                    new[] {
                        02.7065f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.1312f,
                        00.0547f, 00.0000f, 00.3962f, 00.8615f, 00.0000f, 00.1920f,
                        00.1094f, 00.0000f, 00.2935f, 01.2940f, 00.0000f, 00.1636f,
                        00.2286f, 00.0000f, 00.1851f, 00.0000f, 00.0000f, 00.2193f,
                        00.1242f, 00.0000f, 00.0000f, 02.2329f, 00.0000f, 00.2332f,
                        00.3376f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.2044f,
                        00.5388f, 00.0000f, 00.0000f, 00.1027f, 00.0000f, 00.1928f,
                        00.4974f, 00.0000f, 00.0000f, 00.4388f, 00.0000f, 00.1903f,
                        00.0000f, 00.0000f, 00.0000f, 00.5365f, 00.0000f, 00.1959f,
                        04.6350f, 00.2769f, 00.0000f, 00.6684f, 00.1292f, 00.0592f,
                        00.0000f, 00.0000f, 00.0000f, 00.2068f, 00.1374f, 00.2790f,
                        00.0000f, 01.4514f, 00.8129f, 00.8150f, 00.1397f, 00.1908f,
                        00.0000f, 00.0000f, 00.0230f, 00.1897f, 00.0013f, 00.1799f,
                        00.0000f, 00.0000f, 00.0000f, 01.3128f, 00.0242f, 00.1212f,
                        00.0397f, 00.2031f, 00.0000f, 01.0146f, 00.3139f, 00.1500f,
                        00.0000f, 00.3301f, 00.0000f, 00.0391f, 00.1806f, 00.2935f,
                        00.0000f, 00.0692f, 00.0000f, 00.0000f, 00.0000f, 00.4034f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.6166f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.4693f,
                        00.0990f, 00.0000f, 00.3782f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0390f, 01.2914f, 00.4004f, 00.0000f, 00.0000f,
                        00.0000f, 00.8711f, 02.5637f, 00.5392f, 00.0000f, 00.0000f,
                        00.0000f, 01.3059f, 03.5145f, 02.2064f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 04.1777f, 02.3881f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 04.3525f, 02.6121f, 00.0000f, 00.0000f,
                        02.0565f, 00.0000f, 04.9462f, 06.1795f, 01.2043f, 00.0000f,
                        01.5243f, 00.0000f, 02.4337f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.3037f, 01.7031f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 01.3759f, 06.6724f, 00.0000f, 00.0141f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "CSLPRPWALTFSYGR"
                },
                new[] {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2600f, 2)
                },
                new[] {
                    new[] {
                        02.9479f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.1358f,
                        00.1239f, 00.0000f, 00.3696f, 01.1136f, 00.0000f, 00.1859f,
                        00.1675f, 00.0000f, 00.3022f, 01.4638f, 00.0000f, 00.1554f,
                        00.3027f, 00.0000f, 00.1644f, 00.0000f, 00.0000f, 00.2076f,
                        00.1878f, 00.0000f, 00.0000f, 02.3082f, 00.0000f, 00.2212f,
                        00.4359f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.1947f,
                        00.6277f, 00.0000f, 00.0000f, 00.1609f, 00.0000f, 00.1832f,
                        00.6080f, 00.0000f, 00.0000f, 00.5198f, 00.0000f, 00.1814f,
                        00.0000f, 00.0000f, 00.0000f, 00.6266f, 00.0112f, 00.1885f,
                        05.3370f, 00.3215f, 00.0000f, 00.8345f, 00.1911f, 00.0280f,
                        00.0000f, 00.0000f, 00.0000f, 00.3039f, 00.1807f, 00.2743f,
                        00.0000f, 01.5845f, 00.8871f, 00.8679f, 00.1695f, 00.2118f,
                        00.0000f, 00.0000f, 00.0000f, 00.2837f, 00.0223f, 00.1881f,
                        00.0000f, 00.0335f, 00.0000f, 01.3894f, 00.0255f, 00.1286f,
                        00.0553f, 00.2413f, 00.0000f, 01.0587f, 00.2533f, 00.1723f,
                        00.0000f, 00.3773f, 00.0000f, 00.0535f, 00.1474f, 00.3019f,
                        00.0000f, 00.1010f, 00.0000f, 00.0000f, 00.0000f, 00.3821f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.5539f,
                        00.0000f, 00.0000f, 00.0658f, 00.0000f, 00.0000f, 00.3369f,
                        00.1582f, 00.0000f, 00.8251f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0219f, 02.2645f, 00.5306f, 00.0000f, 00.0000f,
                        00.1029f, 01.0964f, 04.1266f, 01.0470f, 00.0000f, 00.0000f,
                        00.0000f, 01.6618f, 05.1014f, 03.3660f, 00.0000f, 00.0000f,
                        00.0000f, 00.2472f, 05.4700f, 03.1781f, 00.0000f, 00.1938f,
                        00.0000f, 00.0000f, 04.9665f, 03.0916f, 00.0000f, 00.1857f,
                        00.0000f, 00.0000f, 03.7349f, 05.2528f, 02.9787f, 00.0000f,
                        01.4385f, 00.1601f, 03.4375f, 00.3215f, 00.1083f, 00.0000f,
                        00.3835f, 00.5911f, 02.2657f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 01.4777f, 02.2136f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "CSLPRPWALTFSYGR"
                },
                new[] {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2600f, 2)
                },
                new[] {
                    new[] {
                        01.1753f, 00.0000f, 00.0255f, 00.0000f, 00.0000f, 00.0890f,
                        02.8214f, 00.0000f, 00.5992f, 03.9895f, 00.0000f, 00.0000f,
                        04.7079f, 00.0000f, 00.0000f, 02.1472f, 00.0000f, 00.0000f,
                        02.0359f, 00.0001f, 00.0000f, 02.8442f, 00.0000f, 00.0000f,
                        11.5266f, 00.0000f, 00.0000f, 02.1043f, 00.0000f, 00.0000f,
                        07.1053f, 00.0390f, 00.0000f, 01.8099f, 00.0000f, 00.0000f,
                        07.0693f, 00.2669f, 00.0000f, 00.5677f, 00.0321f, 00.0000f,
                        01.2982f, 00.1723f, 00.0000f, 00.4490f, 00.0045f, 00.0000f,
                        05.5559f, 00.7857f, 00.0000f, 00.2580f, 00.0000f, 00.0000f,
                        09.4965f, 00.8089f, 00.0000f, 00.2154f, 00.0140f, 00.0000f,
                        07.6129f, 01.1750f, 00.0000f, 00.2108f, 00.0039f, 00.0000f,
                        03.6408f, 02.8106f, 00.0438f, 00.3270f, 00.0172f, 00.0000f,
                        04.0563f, 04.0705f, 00.6959f, 00.5067f, 00.0848f, 00.0000f,
                        06.9249f, 02.2006f, 00.7846f, 00.7598f, 00.1330f, 00.0000f,
                        06.5360f, 01.1550f, 00.9829f, 01.4156f, 00.1907f, 00.0000f,
                        08.3633f, 00.9448f, 00.5071f, 02.5810f, 00.1482f, 00.0000f,
                        07.1340f, 01.1244f, 00.0000f, 02.9186f, 00.1936f, 00.0000f,
                        05.9489f, 01.1874f, 00.0000f, 00.4662f, 00.1363f, 00.0000f,
                        02.3698f, 01.5297f, 00.0000f, 00.8107f, 00.1634f, 00.0000f,
                        03.8289f, 01.2489f, 00.0962f, 01.1602f, 00.3061f, 00.0000f,
                        09.4913f, 01.6460f, 00.2217f, 00.1192f, 00.2950f, 00.0000f,
                        08.6516f, 04.0817f, 01.7418f, 00.1255f, 00.2970f, 00.0000f,
                        03.9564f, 13.8413f, 05.7802f, 00.0000f, 00.3477f, 00.0000f,
                        08.7759f, 08.6748f, 04.4983f, 03.3672f, 00.0000f, 00.0000f,
                        06.0241f, 05.0766f, 00.0576f, 08.4273f, 00.0583f, 00.0000f,
                        11.1881f, 03.4154f, 00.0000f, 04.8480f, 00.1314f, 00.0000f,
                        08.2150f, 03.2976f, 00.0000f, 01.5688f, 00.1915f, 00.0000f,
                        07.6837f, 05.9245f, 00.0936f, 01.1111f, 00.0031f, 00.0000f,
                        14.3257f, 08.1581f, 04.2569f, 00.9787f, 00.1524f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "LGGEEVSVACK"
                },
                new[] {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2700f, 2)
                },
                new[] {
                    new[] {
                        01.2001f, 00.0000f, 00.0297f, 00.0000f, 00.0000f, 00.0865f,
                        03.1309f, 00.0000f, 00.6921f, 04.1637f, 00.0000f, 00.0000f,
                        04.9597f, 00.0000f, 00.0000f, 02.3777f, 00.0000f, 00.0000f,
                        02.1258f, 00.0000f, 00.0000f, 02.7272f, 00.0000f, 00.0000f,
                        11.8386f, 00.0000f, 00.0000f, 01.9358f, 00.0000f, 00.0000f,
                        07.3578f, 00.0468f, 00.0000f, 01.5186f, 00.0011f, 00.0000f,
                        07.2697f, 00.2759f, 00.0000f, 00.5135f, 00.0334f, 00.0000f,
                        01.3888f, 00.1744f, 00.0000f, 00.3669f, 00.0065f, 00.0000f,
                        05.7812f, 00.5915f, 00.0000f, 00.2039f, 00.0000f, 00.0000f,
                        10.3678f, 00.6447f, 00.0000f, 00.1695f, 00.0151f, 00.0000f,
                        08.2329f, 00.9806f, 00.0000f, 00.1708f, 00.0000f, 00.0000f,
                        03.8091f, 02.3633f, 00.0000f, 00.2858f, 00.0000f, 00.0110f,
                        04.0784f, 03.2144f, 00.5578f, 00.4843f, 00.0315f, 00.0000f,
                        07.2090f, 01.5937f, 00.6465f, 00.6973f, 00.0524f, 00.0000f,
                        07.8010f, 00.7801f, 00.7084f, 01.3804f, 00.0982f, 00.0000f,
                        09.0837f, 00.5460f, 00.0299f, 02.4289f, 00.0908f, 00.0000f,
                        08.2416f, 00.6703f, 00.0000f, 02.3254f, 00.1488f, 00.0000f,
                        07.7887f, 00.7822f, 00.0000f, 00.3756f, 00.0936f, 00.0000f,
                        04.9870f, 01.3845f, 00.0000f, 00.3661f, 00.0868f, 00.0000f,
                        01.6557f, 00.6523f, 00.0000f, 00.9193f, 00.0494f, 00.0000f,
                        04.1267f, 00.4645f, 00.0229f, 00.8983f, 00.2762f, 00.0000f,
                        10.2361f, 01.0516f, 00.0000f, 00.2218f, 00.3141f, 00.0000f,
                        07.5631f, 03.1065f, 01.1011f, 00.2286f, 00.2657f, 00.0000f,
                        06.7648f, 11.3413f, 03.6166f, 00.5273f, 00.2270f, 00.0000f,
                        07.5019f, 02.3187f, 01.9466f, 04.4037f, 00.0665f, 00.0000f,
                        07.5991f, 01.3050f, 00.2516f, 06.8577f, 00.1161f, 00.0000f,
                        09.7545f, 01.3100f, 00.2265f, 02.0953f, 00.2235f, 00.0000f,
                        08.0150f, 01.5923f, 00.2322f, 00.4829f, 00.1725f, 00.0000f,
                        02.0093f, 02.0546f, 00.4196f, 01.2210f, 00.0933f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "LGGEEVSVACK"
                },
                new[] {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2700f, 2)
                },
                new[] {
                    new[] {
                        01.5074f, 00.0000f, 00.0416f, 00.0000f, 00.0058f, 00.3123f,
                        03.9536f, 00.0000f, 00.2011f, 00.4314f, 00.0000f, 00.0000f,
                        03.3629f, 00.0000f, 00.0000f, 01.0413f, 00.0000f, 00.0000f,
                        07.5332f, 00.0000f, 00.0000f, 02.7324f, 00.0000f, 00.0000f,
                        04.2465f, 00.0000f, 00.0000f, 03.5259f, 00.0000f, 00.0000f,
                        03.1437f, 00.0000f, 00.0000f, 00.7837f, 00.0000f, 00.0000f,
                        09.6615f, 00.0000f, 00.0000f, 00.4643f, 00.0000f, 00.0000f,
                        13.8088f, 00.1971f, 00.0000f, 00.5316f, 00.0000f, 00.0000f,
                        06.1919f, 00.5215f, 00.0000f, 00.4920f, 00.0073f, 00.0000f,
                        04.2106f, 00.6379f, 00.0000f, 00.3867f, 00.0319f, 00.0000f,
                        00.2553f, 01.4885f, 00.0000f, 00.2772f, 00.0225f, 00.2477f,
                        00.0000f, 00.1297f, 00.0118f, 00.2078f, 00.0375f, 00.3071f,
                        00.0000f, 00.0121f, 00.3272f, 00.1895f, 00.0000f, 00.2729f,
                        00.2562f, 00.0000f, 00.0000f, 00.5178f, 00.0000f, 00.0000f,
                        01.0910f, 00.0000f, 00.0000f, 00.3582f, 00.0000f, 00.0000f,
                        03.3241f, 00.0000f, 00.0000f, 00.5644f, 00.0000f, 00.0000f,
                        06.2392f, 00.0000f, 00.0000f, 01.4870f, 00.0000f, 00.0000f,
                        05.2562f, 00.0000f, 00.0000f, 00.3753f, 00.0000f, 00.0000f,
                        06.5860f, 00.0000f, 00.0000f, 00.0837f, 00.0000f, 00.0000f,
                        08.3914f, 00.0000f, 00.0000f, 00.1577f, 00.0000f, 00.0000f,
                        06.1801f, 00.1096f, 00.0000f, 00.2193f, 00.0000f, 00.0000f,
                        03.2690f, 00.6300f, 00.0000f, 00.2680f, 00.0000f, 00.0000f,
                        00.8106f, 00.4836f, 00.0000f, 00.0406f, 00.0000f, 00.1270f,
                        00.0565f, 00.1735f, 00.0000f, 00.1718f, 00.0000f, 00.2232f,
                        00.0000f, 00.1827f, 00.0926f, 00.1694f, 00.0000f, 00.2019f,
                        00.5847f, 00.0000f, 00.0000f, 00.5101f, 00.0000f, 00.0000f,
                        01.5006f, 00.0000f, 00.0000f, 00.5080f, 00.0000f, 00.0000f,
                        04.2328f, 00.0000f, 00.0000f, 00.4028f, 00.0000f, 00.0000f,
                        07.2125f, 00.0000f, 00.0000f, 01.0871f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "GSYNLQDLLAQAK"
                },
                new[] {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2800f, 2)
                },
                new[] {
                    new[] {
                        01.5784f, 00.0000f, 00.0425f, 00.0000f, 00.0036f, 00.3137f,
                        04.0217f, 00.0000f, 00.2322f, 00.4861f, 00.0000f, 00.0000f,
                        03.4199f, 00.0000f, 00.0000f, 01.0904f, 00.0000f, 00.0000f,
                        08.0363f, 00.0000f, 00.0000f, 02.7388f, 00.0000f, 00.0000f,
                        04.5245f, 00.0000f, 00.0000f, 03.3779f, 00.0000f, 00.0000f,
                        03.4030f, 00.0000f, 00.0000f, 00.7038f, 00.0000f, 00.0000f,
                        10.1399f, 00.0000f, 00.0000f, 00.4320f, 00.0000f, 00.0000f,
                        14.0828f, 00.2168f, 00.0000f, 00.4830f, 00.0000f, 00.0000f,
                        06.4538f, 00.4837f, 00.0000f, 00.3934f, 00.0061f, 00.0000f,
                        04.3536f, 00.4970f, 00.0000f, 00.3141f, 00.0290f, 00.0000f,
                        00.2813f, 01.0668f, 00.0000f, 00.1989f, 00.0136f, 00.2495f,
                        00.0000f, 00.0865f, 00.0000f, 00.1527f, 00.0294f, 00.3045f,
                        00.0000f, 00.0000f, 00.1349f, 00.1860f, 00.0000f, 00.2769f,
                        00.1678f, 00.0000f, 00.0000f, 00.4420f, 00.0000f, 00.0000f,
                        00.8349f, 00.0000f, 00.0000f, 00.3448f, 00.0000f, 00.0000f,
                        02.8001f, 00.0000f, 00.0000f, 00.5443f, 00.0000f, 00.0000f,
                        05.4801f, 00.0000f, 00.0000f, 01.1109f, 00.0000f, 00.0000f,
                        05.8228f, 00.0000f, 00.0000f, 00.2646f, 00.0000f, 00.0000f,
                        06.7092f, 00.0000f, 00.0000f, 00.1064f, 00.0000f, 00.0000f,
                        08.0636f, 00.0000f, 00.0000f, 00.0685f, 00.0000f, 00.0000f,
                        06.2093f, 00.0749f, 00.0000f, 00.1398f, 00.0000f, 00.0000f,
                        02.8279f, 00.4059f, 00.0000f, 00.1739f, 00.0000f, 00.0000f,
                        00.7102f, 00.2477f, 00.0000f, 00.0108f, 00.0000f, 00.1132f,
                        00.0258f, 00.0942f, 00.0000f, 00.1195f, 00.0000f, 00.2209f,
                        00.0000f, 00.0695f, 00.0000f, 00.0972f, 00.0000f, 00.2035f,
                        00.3786f, 00.0000f, 00.0000f, 00.3821f, 00.0000f, 00.0000f,
                        01.0310f, 00.0000f, 00.0000f, 00.4180f, 00.0000f, 00.0000f,
                        03.3174f, 00.0000f, 00.0000f, 00.4184f, 00.0000f, 00.0000f,
                        06.2367f, 00.0000f, 00.0000f, 00.8009f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "GSYNLQDLLAQAK"
                },
                new[] {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.2800f, 2)
                },
                new[] {
                    new[] {
                        01.5798f, 00.0000f, 00.0919f, 00.0378f, 00.0087f, 00.3111f,
                        05.1002f, 00.0053f, 00.3946f, 02.6579f, 00.0000f, 00.0000f,
                        03.2989f, 00.0000f, 00.0000f, 01.6681f, 00.0000f, 00.0000f,
                        04.0979f, 00.0000f, 00.0000f, 01.6865f, 00.0000f, 00.0000f,
                        07.5181f, 00.0000f, 00.0000f, 02.0938f, 00.0000f, 00.0000f,
                        12.2386f, 00.2991f, 00.0000f, 00.4374f, 00.0000f, 00.0000f,
                        05.5725f, 01.1725f, 00.0000f, 00.3850f, 00.0101f, 00.0000f,
                        04.2006f, 01.8945f, 00.0000f, 00.2804f, 00.0136f, 00.0000f,
                        00.8559f, 03.0017f, 00.0000f, 00.2403f, 00.0263f, 00.1107f,
                        00.3503f, 00.8727f, 00.3910f, 00.0620f, 00.0306f, 00.2326f,
                        00.0088f, 00.7777f, 01.7038f, 00.1941f, 00.0000f, 00.1246f,
                        02.1195f, 00.2989f, 00.3598f, 00.0443f, 00.0000f, 00.0000f,
                        03.0503f, 00.0140f, 00.0000f, 00.2935f, 00.0000f, 00.0000f,
                        04.4611f, 00.0000f, 00.0000f, 00.6433f, 00.0000f, 00.0000f,
                        08.6951f, 00.0223f, 00.0000f, 00.5394f, 00.0000f, 00.0000f,
                        05.9613f, 00.4489f, 00.0000f, 00.3184f, 00.0000f, 00.0000f,
                        04.2976f, 02.2063f, 00.0000f, 00.0540f, 00.0000f, 00.0000f,
                        03.2639f, 01.1890f, 00.0000f, 00.1311f, 00.0000f, 00.0000f,
                        01.1491f, 00.8943f, 00.5708f, 00.0795f, 00.0000f, 00.0000f,
                        00.6197f, 00.6306f, 00.5212f, 00.0096f, 00.0278f, 00.0638f,
                        01.8776f, 00.6816f, 01.2566f, 00.0000f, 00.0000f, 00.0000f,
                        04.3672f, 00.0000f, 00.1525f, 00.3639f, 00.0000f, 00.0000f,
                        05.3799f, 00.0000f, 00.0000f, 00.3355f, 00.0111f, 00.0000f,
                        09.5854f, 00.2026f, 00.0000f, 00.2715f, 00.0282f, 00.0000f,
                        09.5417f, 00.5259f, 00.0581f, 00.3452f, 00.0000f, 00.0000f,
                        04.7327f, 00.5713f, 00.9512f, 00.0452f, 00.0000f, 00.0000f,
                        03.8145f, 00.9695f, 00.9876f, 00.0000f, 00.0000f, 00.0000f,
                        03.1632f, 01.1592f, 00.7197f, 00.3791f, 00.0418f, 00.0000f,
                        01.0052f, 00.7485f, 00.7077f, 00.3439f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[] {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.2900f, 2)
                },
                new[] {
                    new[] {
                        01.6962f, 00.0012f, 00.0996f, 00.0497f, 00.0082f, 00.3112f,
                        05.1274f, 00.0088f, 00.4203f, 02.9496f, 00.0000f, 00.0000f,
                        03.4016f, 00.0000f, 00.0000f, 01.6719f, 00.0000f, 00.0000f,
                        04.6616f, 00.0000f, 00.0000f, 01.5591f, 00.0000f, 00.0000f,
                        08.2831f, 00.0000f, 00.0000f, 01.8311f, 00.0000f, 00.0000f,
                        12.7176f, 00.3571f, 00.0000f, 00.3189f, 00.0000f, 00.0000f,
                        05.9361f, 01.2140f, 00.0000f, 00.3103f, 00.0082f, 00.0000f,
                        04.3755f, 01.5975f, 00.0000f, 00.2006f, 00.0118f, 00.0000f,
                        00.9174f, 02.1127f, 00.0000f, 00.1725f, 00.0232f, 00.0988f,
                        00.3797f, 00.6259f, 00.1870f, 00.0344f, 00.0298f, 00.2256f,
                        00.0120f, 00.5691f, 01.0135f, 00.1839f, 00.0000f, 00.1125f,
                        01.7810f, 00.1504f, 00.0778f, 00.0755f, 00.0000f, 00.0000f,
                        02.6755f, 00.0000f, 00.0000f, 00.3003f, 00.0000f, 00.0000f,
                        03.6140f, 00.0000f, 00.0000f, 00.3940f, 00.0000f, 00.0000f,
                        07.2128f, 00.0000f, 00.0000f, 00.3520f, 00.0000f, 00.0000f,
                        06.1558f, 00.1003f, 00.0000f, 00.0845f, 00.0000f, 00.0000f,
                        04.1224f, 01.1685f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.6306f, 00.9316f, 00.0000f, 00.0509f, 00.0000f, 00.0000f,
                        00.8650f, 00.6291f, 00.0000f, 00.0427f, 00.0000f, 00.0000f,
                        00.5185f, 00.3562f, 00.0305f, 00.0000f, 00.0165f, 00.0817f,
                        01.0585f, 00.2763f, 00.3837f, 00.0115f, 00.0000f, 00.0033f,
                        02.4536f, 00.0000f, 00.0000f, 00.1862f, 00.0000f, 00.0000f,
                        02.9694f, 00.0000f, 00.0000f, 00.2326f, 00.0000f, 00.0000f,
                        05.9161f, 00.0000f, 00.0000f, 00.1708f, 00.0000f, 00.0000f,
                        07.1012f, 00.0232f, 00.0000f, 00.1240f, 00.0000f, 00.0000f,
                        04.1668f, 00.2032f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        03.2571f, 00.4034f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.0726f, 00.6601f, 00.0000f, 00.1583f, 00.0107f, 00.0000f,
                        00.5947f, 00.3412f, 00.2227f, 00.0219f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[] {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2500f, 2)
                },
                new[] {
                    new[] {
                        02.7065f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.1312f,
                        00.0547f, 00.0000f, 00.3962f, 00.8615f, 00.0000f, 00.1920f,
                        00.1094f, 00.0000f, 00.2935f, 01.2940f, 00.0000f, 00.1636f,
                        00.2286f, 00.0000f, 00.1851f, 00.0000f, 00.0000f, 00.2193f,
                        00.1242f, 00.0000f, 00.0000f, 02.2329f, 00.0000f, 00.2332f,
                        00.3376f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.2044f,
                        00.5388f, 00.0000f, 00.0000f, 00.1027f, 00.0000f, 00.1928f,
                        00.4974f, 00.0000f, 00.0000f, 00.4388f, 00.0000f, 00.1903f,
                        00.0000f, 00.0000f, 00.0000f, 00.5365f, 00.0000f, 00.1959f,
                        04.6350f, 00.2769f, 00.0000f, 00.6684f, 00.1292f, 00.0592f,
                        00.0000f, 00.0000f, 00.0000f, 00.2068f, 00.1374f, 00.2790f,
                        00.0000f, 01.4514f, 00.8129f, 00.8150f, 00.1397f, 00.1908f,
                        00.0000f, 00.0000f, 00.0230f, 00.1897f, 00.0013f, 00.1799f,
                        00.0000f, 00.0000f, 00.0000f, 01.3128f, 00.0242f, 00.1212f,
                        00.0397f, 00.2031f, 00.0000f, 01.0146f, 00.3139f, 00.1500f,
                        00.0000f, 00.3301f, 00.0000f, 00.0391f, 00.1806f, 00.2935f,
                        00.0000f, 00.0692f, 00.0000f, 00.0000f, 00.0000f, 00.4034f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.6166f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.4693f,
                        00.0990f, 00.0000f, 00.3782f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0390f, 01.2914f, 00.4004f, 00.0000f, 00.0000f,
                        00.0000f, 00.8711f, 02.5637f, 00.5392f, 00.0000f, 00.0000f,
                        00.0000f, 01.3059f, 03.5145f, 02.2064f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 04.1777f, 02.3881f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 04.3525f, 02.6121f, 00.0000f, 00.0000f,
                        02.0565f, 00.0000f, 04.9462f, 06.1795f, 01.2043f, 00.0000f,
                        01.5243f, 00.0000f, 02.4337f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.3037f, 01.7031f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 01.3759f, 06.6724f, 00.0000f, 00.0141f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "CSLPRPWALTFSYGR"
                },
                new[] {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2600f, 2)
                },
                new[] {
                    new[] {
                        02.9479f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.1358f,
                        00.1239f, 00.0000f, 00.3696f, 01.1136f, 00.0000f, 00.1859f,
                        00.1675f, 00.0000f, 00.3022f, 01.4638f, 00.0000f, 00.1554f,
                        00.3027f, 00.0000f, 00.1644f, 00.0000f, 00.0000f, 00.2076f,
                        00.1878f, 00.0000f, 00.0000f, 02.3082f, 00.0000f, 00.2212f,
                        00.4359f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.1947f,
                        00.6277f, 00.0000f, 00.0000f, 00.1609f, 00.0000f, 00.1832f,
                        00.6080f, 00.0000f, 00.0000f, 00.5198f, 00.0000f, 00.1814f,
                        00.0000f, 00.0000f, 00.0000f, 00.6266f, 00.0112f, 00.1885f,
                        05.3370f, 00.3215f, 00.0000f, 00.8345f, 00.1911f, 00.0280f,
                        00.0000f, 00.0000f, 00.0000f, 00.3039f, 00.1807f, 00.2743f,
                        00.0000f, 01.5845f, 00.8871f, 00.8679f, 00.1695f, 00.2118f,
                        00.0000f, 00.0000f, 00.0000f, 00.2837f, 00.0223f, 00.1881f,
                        00.0000f, 00.0335f, 00.0000f, 01.3894f, 00.0255f, 00.1286f,
                        00.0553f, 00.2413f, 00.0000f, 01.0587f, 00.2533f, 00.1723f,
                        00.0000f, 00.3773f, 00.0000f, 00.0535f, 00.1474f, 00.3019f,
                        00.0000f, 00.1010f, 00.0000f, 00.0000f, 00.0000f, 00.3821f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.5539f,
                        00.0000f, 00.0000f, 00.0658f, 00.0000f, 00.0000f, 00.3369f,
                        00.1582f, 00.0000f, 00.8251f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0219f, 02.2645f, 00.5306f, 00.0000f, 00.0000f,
                        00.1029f, 01.0964f, 04.1266f, 01.0470f, 00.0000f, 00.0000f,
                        00.0000f, 01.6618f, 05.1014f, 03.3660f, 00.0000f, 00.0000f,
                        00.0000f, 00.2472f, 05.4700f, 03.1781f, 00.0000f, 00.1938f,
                        00.0000f, 00.0000f, 04.9665f, 03.0916f, 00.0000f, 00.1857f,
                        00.0000f, 00.0000f, 03.7349f, 05.2528f, 02.9787f, 00.0000f,
                        01.4385f, 00.1601f, 03.4375f, 00.3215f, 00.1083f, 00.0000f,
                        00.3835f, 00.5911f, 02.2657f, 00.0000f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 01.4777f, 02.2136f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "CSLPRPWALTFSYGR"
                },
                new[] {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2600f, 2)
                },
                new[] {
                    new[] {
                        01.1753f, 00.0000f, 00.0255f, 00.0000f, 00.0000f, 00.0890f,
                        02.8214f, 00.0000f, 00.5992f, 03.9895f, 00.0000f, 00.0000f,
                        04.7079f, 00.0000f, 00.0000f, 02.1472f, 00.0000f, 00.0000f,
                        02.0359f, 00.0001f, 00.0000f, 02.8442f, 00.0000f, 00.0000f,
                        11.5266f, 00.0000f, 00.0000f, 02.1043f, 00.0000f, 00.0000f,
                        07.1053f, 00.0390f, 00.0000f, 01.8099f, 00.0000f, 00.0000f,
                        07.0693f, 00.2669f, 00.0000f, 00.5677f, 00.0321f, 00.0000f,
                        01.2982f, 00.1723f, 00.0000f, 00.4490f, 00.0045f, 00.0000f,
                        05.5559f, 00.7857f, 00.0000f, 00.2580f, 00.0000f, 00.0000f,
                        09.4965f, 00.8089f, 00.0000f, 00.2154f, 00.0140f, 00.0000f,
                        07.6129f, 01.1750f, 00.0000f, 00.2108f, 00.0039f, 00.0000f,
                        03.6408f, 02.8106f, 00.0438f, 00.3270f, 00.0172f, 00.0000f,
                        04.0563f, 04.0705f, 00.6959f, 00.5067f, 00.0848f, 00.0000f,
                        06.9249f, 02.2006f, 00.7846f, 00.7598f, 00.1330f, 00.0000f,
                        06.5360f, 01.1550f, 00.9829f, 01.4156f, 00.1907f, 00.0000f,
                        08.3633f, 00.9448f, 00.5071f, 02.5810f, 00.1482f, 00.0000f,
                        07.1340f, 01.1244f, 00.0000f, 02.9186f, 00.1936f, 00.0000f,
                        05.9489f, 01.1874f, 00.0000f, 00.4662f, 00.1363f, 00.0000f,
                        02.3698f, 01.5297f, 00.0000f, 00.8107f, 00.1634f, 00.0000f,
                        03.8289f, 01.2489f, 00.0962f, 01.1602f, 00.3061f, 00.0000f,
                        09.4913f, 01.6460f, 00.2217f, 00.1192f, 00.2950f, 00.0000f,
                        08.6516f, 04.0817f, 01.7418f, 00.1255f, 00.2970f, 00.0000f,
                        03.9564f, 13.8413f, 05.7802f, 00.0000f, 00.3477f, 00.0000f,
                        08.7759f, 08.6748f, 04.4983f, 03.3672f, 00.0000f, 00.0000f,
                        06.0241f, 05.0766f, 00.0576f, 08.4273f, 00.0583f, 00.0000f,
                        11.1881f, 03.4154f, 00.0000f, 04.8480f, 00.1314f, 00.0000f,
                        08.2150f, 03.2976f, 00.0000f, 01.5688f, 00.1915f, 00.0000f,
                        07.6837f, 05.9245f, 00.0936f, 01.1111f, 00.0031f, 00.0000f,
                        14.3257f, 08.1581f, 04.2569f, 00.9787f, 00.1524f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "LGGEEVSVACK"
                },
                new[] {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2700f, 2)
                },
                new[] {
                    new[] {
                        01.2001f, 00.0000f, 00.0297f, 00.0000f, 00.0000f, 00.0865f,
                        03.1309f, 00.0000f, 00.6921f, 04.1637f, 00.0000f, 00.0000f,
                        04.9597f, 00.0000f, 00.0000f, 02.3777f, 00.0000f, 00.0000f,
                        02.1258f, 00.0000f, 00.0000f, 02.7272f, 00.0000f, 00.0000f,
                        11.8386f, 00.0000f, 00.0000f, 01.9358f, 00.0000f, 00.0000f,
                        07.3578f, 00.0468f, 00.0000f, 01.5186f, 00.0011f, 00.0000f,
                        07.2697f, 00.2759f, 00.0000f, 00.5135f, 00.0334f, 00.0000f,
                        01.3888f, 00.1744f, 00.0000f, 00.3669f, 00.0065f, 00.0000f,
                        05.7812f, 00.5915f, 00.0000f, 00.2039f, 00.0000f, 00.0000f,
                        10.3678f, 00.6447f, 00.0000f, 00.1695f, 00.0151f, 00.0000f,
                        08.2329f, 00.9806f, 00.0000f, 00.1708f, 00.0000f, 00.0000f,
                        03.8091f, 02.3633f, 00.0000f, 00.2858f, 00.0000f, 00.0110f,
                        04.0784f, 03.2144f, 00.5578f, 00.4843f, 00.0315f, 00.0000f,
                        07.2090f, 01.5937f, 00.6465f, 00.6973f, 00.0524f, 00.0000f,
                        07.8010f, 00.7801f, 00.7084f, 01.3804f, 00.0982f, 00.0000f,
                        09.0837f, 00.5460f, 00.0299f, 02.4289f, 00.0908f, 00.0000f,
                        08.2416f, 00.6703f, 00.0000f, 02.3254f, 00.1488f, 00.0000f,
                        07.7887f, 00.7822f, 00.0000f, 00.3756f, 00.0936f, 00.0000f,
                        04.9870f, 01.3845f, 00.0000f, 00.3661f, 00.0868f, 00.0000f,
                        01.6557f, 00.6523f, 00.0000f, 00.9193f, 00.0494f, 00.0000f,
                        04.1267f, 00.4645f, 00.0229f, 00.8983f, 00.2762f, 00.0000f,
                        10.2361f, 01.0516f, 00.0000f, 00.2218f, 00.3141f, 00.0000f,
                        07.5631f, 03.1065f, 01.1011f, 00.2286f, 00.2657f, 00.0000f,
                        06.7648f, 11.3413f, 03.6166f, 00.5273f, 00.2270f, 00.0000f,
                        07.5019f, 02.3187f, 01.9466f, 04.4037f, 00.0665f, 00.0000f,
                        07.5991f, 01.3050f, 00.2516f, 06.8577f, 00.1161f, 00.0000f,
                        09.7545f, 01.3100f, 00.2265f, 02.0953f, 00.2235f, 00.0000f,
                        08.0150f, 01.5923f, 00.2322f, 00.4829f, 00.1725f, 00.0000f,
                        02.0093f, 02.0546f, 00.4196f, 01.2210f, 00.0933f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "LGGEEVSVACK"
                },
                new[] {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2700f, 2)
                },
                new[] {
                    new[] {
                        01.5074f, 00.0000f, 00.0416f, 00.0000f, 00.0058f, 00.3123f,
                        03.9536f, 00.0000f, 00.2011f, 00.4314f, 00.0000f, 00.0000f,
                        03.3629f, 00.0000f, 00.0000f, 01.0413f, 00.0000f, 00.0000f,
                        07.5332f, 00.0000f, 00.0000f, 02.7324f, 00.0000f, 00.0000f,
                        04.2465f, 00.0000f, 00.0000f, 03.5259f, 00.0000f, 00.0000f,
                        03.1437f, 00.0000f, 00.0000f, 00.7837f, 00.0000f, 00.0000f,
                        09.6615f, 00.0000f, 00.0000f, 00.4643f, 00.0000f, 00.0000f,
                        13.8088f, 00.1971f, 00.0000f, 00.5316f, 00.0000f, 00.0000f,
                        06.1919f, 00.5215f, 00.0000f, 00.4920f, 00.0073f, 00.0000f,
                        04.2106f, 00.6379f, 00.0000f, 00.3867f, 00.0319f, 00.0000f,
                        00.2553f, 01.4885f, 00.0000f, 00.2772f, 00.0225f, 00.2477f,
                        00.0000f, 00.1297f, 00.0118f, 00.2078f, 00.0375f, 00.3071f,
                        00.0000f, 00.0121f, 00.3272f, 00.1895f, 00.0000f, 00.2729f,
                        00.2562f, 00.0000f, 00.0000f, 00.5178f, 00.0000f, 00.0000f,
                        01.0910f, 00.0000f, 00.0000f, 00.3582f, 00.0000f, 00.0000f,
                        03.3241f, 00.0000f, 00.0000f, 00.5644f, 00.0000f, 00.0000f,
                        06.2392f, 00.0000f, 00.0000f, 01.4870f, 00.0000f, 00.0000f,
                        05.2562f, 00.0000f, 00.0000f, 00.3753f, 00.0000f, 00.0000f,
                        06.5860f, 00.0000f, 00.0000f, 00.0837f, 00.0000f, 00.0000f,
                        08.3914f, 00.0000f, 00.0000f, 00.1577f, 00.0000f, 00.0000f,
                        06.1801f, 00.1096f, 00.0000f, 00.2193f, 00.0000f, 00.0000f,
                        03.2690f, 00.6300f, 00.0000f, 00.2680f, 00.0000f, 00.0000f,
                        00.8106f, 00.4836f, 00.0000f, 00.0406f, 00.0000f, 00.1270f,
                        00.0565f, 00.1735f, 00.0000f, 00.1718f, 00.0000f, 00.2232f,
                        00.0000f, 00.1827f, 00.0926f, 00.1694f, 00.0000f, 00.2019f,
                        00.5847f, 00.0000f, 00.0000f, 00.5101f, 00.0000f, 00.0000f,
                        01.5006f, 00.0000f, 00.0000f, 00.5080f, 00.0000f, 00.0000f,
                        04.2328f, 00.0000f, 00.0000f, 00.4028f, 00.0000f, 00.0000f,
                        07.2125f, 00.0000f, 00.0000f, 01.0871f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "GSYNLQDLLAQAK"
                },
                new[] {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2800f, 2)
                },
                new[] {
                    new[] {
                        01.5784f, 00.0000f, 00.0425f, 00.0000f, 00.0036f, 00.3137f,
                        04.0217f, 00.0000f, 00.2322f, 00.4861f, 00.0000f, 00.0000f,
                        03.4199f, 00.0000f, 00.0000f, 01.0904f, 00.0000f, 00.0000f,
                        08.0363f, 00.0000f, 00.0000f, 02.7388f, 00.0000f, 00.0000f,
                        04.5245f, 00.0000f, 00.0000f, 03.3779f, 00.0000f, 00.0000f,
                        03.4030f, 00.0000f, 00.0000f, 00.7038f, 00.0000f, 00.0000f,
                        10.1399f, 00.0000f, 00.0000f, 00.4320f, 00.0000f, 00.0000f,
                        14.0828f, 00.2168f, 00.0000f, 00.4830f, 00.0000f, 00.0000f,
                        06.4538f, 00.4837f, 00.0000f, 00.3934f, 00.0061f, 00.0000f,
                        04.3536f, 00.4970f, 00.0000f, 00.3141f, 00.0290f, 00.0000f,
                        00.2813f, 01.0668f, 00.0000f, 00.1989f, 00.0136f, 00.2495f,
                        00.0000f, 00.0865f, 00.0000f, 00.1527f, 00.0294f, 00.3045f,
                        00.0000f, 00.0000f, 00.1349f, 00.1860f, 00.0000f, 00.2769f,
                        00.1678f, 00.0000f, 00.0000f, 00.4420f, 00.0000f, 00.0000f,
                        00.8349f, 00.0000f, 00.0000f, 00.3448f, 00.0000f, 00.0000f,
                        02.8001f, 00.0000f, 00.0000f, 00.5443f, 00.0000f, 00.0000f,
                        05.4801f, 00.0000f, 00.0000f, 01.1109f, 00.0000f, 00.0000f,
                        05.8228f, 00.0000f, 00.0000f, 00.2646f, 00.0000f, 00.0000f,
                        06.7092f, 00.0000f, 00.0000f, 00.1064f, 00.0000f, 00.0000f,
                        08.0636f, 00.0000f, 00.0000f, 00.0685f, 00.0000f, 00.0000f,
                        06.2093f, 00.0749f, 00.0000f, 00.1398f, 00.0000f, 00.0000f,
                        02.8279f, 00.4059f, 00.0000f, 00.1739f, 00.0000f, 00.0000f,
                        00.7102f, 00.2477f, 00.0000f, 00.0108f, 00.0000f, 00.1132f,
                        00.0258f, 00.0942f, 00.0000f, 00.1195f, 00.0000f, 00.2209f,
                        00.0000f, 00.0695f, 00.0000f, 00.0972f, 00.0000f, 00.2035f,
                        00.3786f, 00.0000f, 00.0000f, 00.3821f, 00.0000f, 00.0000f,
                        01.0310f, 00.0000f, 00.0000f, 00.4180f, 00.0000f, 00.0000f,
                        03.3174f, 00.0000f, 00.0000f, 00.4184f, 00.0000f, 00.0000f,
                        06.2367f, 00.0000f, 00.0000f, 00.8009f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "GSYNLQDLLAQAK"
                },
                new[] {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2800f, 2)
                },
                new[] {
                    new[] {
                        01.5784f, 00.0000f, 00.0425f, 00.0000f, 00.0036f, 00.3137f,
                        04.0217f, 00.0000f, 00.2322f, 00.4861f, 00.0000f, 00.0000f,
                        03.4199f, 00.0000f, 00.0000f, 01.0904f, 00.0000f, 00.0000f,
                        08.0363f, 00.0000f, 00.0000f, 02.7388f, 00.0000f, 00.0000f,
                        04.5245f, 00.0000f, 00.0000f, 03.3779f, 00.0000f, 00.0000f,
                        03.4030f, 00.0000f, 00.0000f, 00.7038f, 00.0000f, 00.0000f,
                        10.1399f, 00.0000f, 00.0000f, 00.4320f, 00.0000f, 00.0000f,
                        14.0828f, 00.2168f, 00.0000f, 00.4830f, 00.0000f, 00.0000f,
                        06.4538f, 00.4837f, 00.0000f, 00.3934f, 00.0061f, 00.0000f,
                        04.3536f, 00.4970f, 00.0000f, 00.3141f, 00.0290f, 00.0000f,
                        00.2813f, 01.0668f, 00.0000f, 00.1989f, 00.0136f, 00.2495f,
                        00.0000f, 00.0865f, 00.0000f, 00.1527f, 00.0294f, 00.3045f,
                        00.0000f, 00.0000f, 00.1349f, 00.1860f, 00.0000f, 00.2769f,
                        00.1678f, 00.0000f, 00.0000f, 00.4420f, 00.0000f, 00.0000f,
                        00.8349f, 00.0000f, 00.0000f, 00.3448f, 00.0000f, 00.0000f,
                        02.8001f, 00.0000f, 00.0000f, 00.5443f, 00.0000f, 00.0000f,
                        05.4801f, 00.0000f, 00.0000f, 01.1109f, 00.0000f, 00.0000f,
                        05.8228f, 00.0000f, 00.0000f, 00.2646f, 00.0000f, 00.0000f,
                        06.7092f, 00.0000f, 00.0000f, 00.1064f, 00.0000f, 00.0000f,
                        08.0636f, 00.0000f, 00.0000f, 00.0685f, 00.0000f, 00.0000f,
                        06.2093f, 00.0749f, 00.0000f, 00.1398f, 00.0000f, 00.0000f,
                        02.8279f, 00.4059f, 00.0000f, 00.1739f, 00.0000f, 00.0000f,
                        00.7102f, 00.2477f, 00.0000f, 00.0108f, 00.0000f, 00.1132f,
                        00.0258f, 00.0942f, 00.0000f, 00.1195f, 00.0000f, 00.2209f,
                        00.0000f, 00.0695f, 00.0000f, 00.0972f, 00.0000f, 00.2035f,
                        00.3786f, 00.0000f, 00.0000f, 00.3821f, 00.0000f, 00.0000f,
                        01.0310f, 00.0000f, 00.0000f, 00.4180f, 00.0000f, 00.0000f,
                        03.3174f, 00.0000f, 00.0000f, 00.4184f, 00.0000f, 00.0000f,
                        06.2367f, 00.0000f, 00.0000f, 00.8009f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "GSYNLQDLLAQAK"
                },
                new[] {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2900f, 2)
                },
                new[] {
                    new[] {
                        01.6631f, 00.0000f, 00.0457f, 00.0000f, 00.0017f, 00.3151f,
                        04.1243f, 00.0000f, 00.2375f, 00.5476f, 00.0000f, 00.0000f,
                        03.5341f, 00.0000f, 00.0000f, 01.1146f, 00.0000f, 00.0000f,
                        08.4241f, 00.0000f, 00.0000f, 02.6149f, 00.0000f, 00.0000f,
                        04.9141f, 00.0000f, 00.0000f, 03.0356f, 00.0000f, 00.0000f,
                        03.7886f, 00.0000f, 00.0000f, 00.5790f, 00.0000f, 00.0000f,
                        10.5761f, 00.0000f, 00.0000f, 00.4038f, 00.0000f, 00.0000f,
                        14.2411f, 00.1943f, 00.0000f, 00.4129f, 00.0000f, 00.0000f,
                        06.6658f, 00.4286f, 00.0000f, 00.2959f, 00.0037f, 00.0000f,
                        04.4025f, 00.3633f, 00.0000f, 00.2478f, 00.0237f, 00.0000f,
                        00.2969f, 00.7041f, 00.0000f, 00.1306f, 00.0051f, 00.2529f,
                        00.0000f, 00.0490f, 00.0000f, 00.1005f, 00.0181f, 00.3026f,
                        00.0000f, 00.0000f, 00.0000f, 00.1737f, 00.0000f, 00.2823f,
                        00.0749f, 00.0000f, 00.0000f, 00.3455f, 00.0000f, 00.0622f,
                        00.5586f, 00.0000f, 00.0000f, 00.3153f, 00.0000f, 00.0000f,
                        02.0928f, 00.0000f, 00.0000f, 00.4843f, 00.0000f, 00.0000f,
                        04.3040f, 00.0000f, 00.0000f, 00.6589f, 00.0000f, 00.0000f,
                        06.2345f, 00.0000f, 00.0000f, 00.1757f, 00.0000f, 00.0000f,
                        06.3755f, 00.0000f, 00.0000f, 00.0311f, 00.0000f, 00.0000f,
                        06.9513f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        06.1795f, 00.0000f, 00.0000f, 00.0614f, 00.0000f, 00.0000f,
                        02.4826f, 00.1624f, 00.0000f, 00.1086f, 00.0000f, 00.0000f,
                        00.4948f, 00.0985f, 00.0000f, 00.0000f, 00.0000f, 00.1163f,
                        00.0000f, 00.0457f, 00.0000f, 00.0715f, 00.0000f, 00.2107f,
                        00.0000f, 00.0000f, 00.0000f, 00.0198f, 00.0000f, 00.2042f,
                        00.2767f, 00.0000f, 00.0000f, 00.1995f, 00.0000f, 00.0898f,
                        00.6738f, 00.0000f, 00.0000f, 00.2301f, 00.0000f, 00.0000f,
                        02.0898f, 00.0000f, 00.0000f, 00.2706f, 00.0000f, 00.0000f,
                        04.0877f, 00.0000f, 00.0000f, 00.3059f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "GSYNLQDLLAQAK"
                },
                new[] {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.2900f, 2)
                },
                new[] {
                    new[] {
                        01.6962f, 00.0012f, 00.0996f, 00.0497f, 00.0082f, 00.3112f,
                        05.1274f, 00.0088f, 00.4203f, 02.9496f, 00.0000f, 00.0000f,
                        03.4016f, 00.0000f, 00.0000f, 01.6719f, 00.0000f, 00.0000f,
                        04.6616f, 00.0000f, 00.0000f, 01.5591f, 00.0000f, 00.0000f,
                        08.2831f, 00.0000f, 00.0000f, 01.8311f, 00.0000f, 00.0000f,
                        12.7176f, 00.3571f, 00.0000f, 00.3189f, 00.0000f, 00.0000f,
                        05.9361f, 01.2140f, 00.0000f, 00.3103f, 00.0082f, 00.0000f,
                        04.3755f, 01.5975f, 00.0000f, 00.2006f, 00.0118f, 00.0000f,
                        00.9174f, 02.1127f, 00.0000f, 00.1725f, 00.0232f, 00.0988f,
                        00.3797f, 00.6259f, 00.1870f, 00.0344f, 00.0298f, 00.2256f,
                        00.0120f, 00.5691f, 01.0135f, 00.1839f, 00.0000f, 00.1125f,
                        01.7810f, 00.1504f, 00.0778f, 00.0755f, 00.0000f, 00.0000f,
                        02.6755f, 00.0000f, 00.0000f, 00.3003f, 00.0000f, 00.0000f,
                        03.6140f, 00.0000f, 00.0000f, 00.3940f, 00.0000f, 00.0000f,
                        07.2128f, 00.0000f, 00.0000f, 00.3520f, 00.0000f, 00.0000f,
                        06.1558f, 00.1003f, 00.0000f, 00.0845f, 00.0000f, 00.0000f,
                        04.1224f, 01.1685f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.6306f, 00.9316f, 00.0000f, 00.0509f, 00.0000f, 00.0000f,
                        00.8650f, 00.6291f, 00.0000f, 00.0427f, 00.0000f, 00.0000f,
                        00.5185f, 00.3562f, 00.0305f, 00.0000f, 00.0165f, 00.0817f,
                        01.0585f, 00.2763f, 00.3837f, 00.0115f, 00.0000f, 00.0033f,
                        02.4536f, 00.0000f, 00.0000f, 00.1862f, 00.0000f, 00.0000f,
                        02.9694f, 00.0000f, 00.0000f, 00.2326f, 00.0000f, 00.0000f,
                        05.9161f, 00.0000f, 00.0000f, 00.1708f, 00.0000f, 00.0000f,
                        07.1012f, 00.0232f, 00.0000f, 00.1240f, 00.0000f, 00.0000f,
                        04.1668f, 00.2032f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        03.2571f, 00.4034f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.0726f, 00.6601f, 00.0000f, 00.1583f, 00.0107f, 00.0000f,
                        00.5947f, 00.3412f, 00.2227f, 00.0219f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[] {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.3000f, 2)
                },
                new[] {
                    new[] {
                        01.8339f, 00.0035f, 00.1090f, 00.0632f, 00.0078f, 00.3114f,
                        05.1550f, 00.0124f, 00.4281f, 03.2543f, 00.0000f, 00.0000f,
                        03.4987f, 00.0000f, 00.0000f, 01.7042f, 00.0000f, 00.0000f,
                        05.2428f, 00.0000f, 00.0000f, 01.4886f, 00.0000f, 00.0000f,
                        08.9126f, 00.0000f, 00.0000f, 01.5233f, 00.0000f, 00.0000f,
                        12.6256f, 00.3959f, 00.0000f, 00.1951f, 00.0000f, 00.0000f,
                        05.8837f, 01.1188f, 00.0000f, 00.2325f, 00.0007f, 00.0000f,
                        04.2237f, 01.1422f, 00.0000f, 00.1171f, 00.0108f, 00.0000f,
                        00.8784f, 01.1415f, 00.0000f, 00.1082f, 00.0250f, 00.1107f,
                        00.3714f, 00.3242f, 00.0000f, 00.0156f, 00.0290f, 00.2167f,
                        00.0000f, 00.3049f, 00.3452f, 00.1468f, 00.0000f, 00.1136f,
                        01.1060f, 00.0000f, 00.0000f, 00.0537f, 00.0000f, 00.0000f,
                        01.9655f, 00.0000f, 00.0000f, 00.2001f, 00.0000f, 00.0000f,
                        02.5243f, 00.0000f, 00.0000f, 00.2475f, 00.0000f, 00.0000f,
                        04.6507f, 00.0000f, 00.0000f, 00.1657f, 00.0000f, 00.0000f,
                        04.4350f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        03.1985f, 00.3239f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.8814f, 00.3563f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        00.4870f, 00.2492f, 00.0000f, 00.0000f, 00.0000f, 00.0071f,
                        00.2313f, 00.1138f, 00.0000f, 00.0000f, 00.0000f, 00.1014f,
                        00.5020f, 00.0035f, 00.0000f, 00.0000f, 00.0000f, 00.0205f,
                        01.2636f, 00.0000f, 00.0000f, 00.0216f, 00.0000f, 00.0000f,
                        01.5998f, 00.0000f, 00.0000f, 00.0654f, 00.0000f, 00.0000f,
                        02.6310f, 00.0000f, 00.0000f, 00.0576f, 00.0000f, 00.0000f,
                        02.9940f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.2970f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.8282f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.4314f, 00.0328f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        00.6778f, 00.1040f, 00.0091f, 00.0000f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[] {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2700f, 2)
                },
                new[] {
                    new[] {
                        01.2001f, 00.0000f, 00.0297f, 00.0000f, 00.0000f, 00.0865f,
                        03.1309f, 00.0000f, 00.6921f, 04.1637f, 00.0000f, 00.0000f,
                        04.9597f, 00.0000f, 00.0000f, 02.3777f, 00.0000f, 00.0000f,
                        02.1258f, 00.0000f, 00.0000f, 02.7272f, 00.0000f, 00.0000f,
                        11.8386f, 00.0000f, 00.0000f, 01.9358f, 00.0000f, 00.0000f,
                        07.3578f, 00.0468f, 00.0000f, 01.5186f, 00.0011f, 00.0000f,
                        07.2697f, 00.2759f, 00.0000f, 00.5135f, 00.0334f, 00.0000f,
                        01.3888f, 00.1744f, 00.0000f, 00.3669f, 00.0065f, 00.0000f,
                        05.7812f, 00.5915f, 00.0000f, 00.2039f, 00.0000f, 00.0000f,
                        10.3678f, 00.6447f, 00.0000f, 00.1695f, 00.0151f, 00.0000f,
                        08.2329f, 00.9806f, 00.0000f, 00.1708f, 00.0000f, 00.0000f,
                        03.8091f, 02.3633f, 00.0000f, 00.2858f, 00.0000f, 00.0110f,
                        04.0784f, 03.2144f, 00.5578f, 00.4843f, 00.0315f, 00.0000f,
                        07.2090f, 01.5937f, 00.6465f, 00.6973f, 00.0524f, 00.0000f,
                        07.8010f, 00.7801f, 00.7084f, 01.3804f, 00.0982f, 00.0000f,
                        09.0837f, 00.5460f, 00.0299f, 02.4289f, 00.0908f, 00.0000f,
                        08.2416f, 00.6703f, 00.0000f, 02.3254f, 00.1488f, 00.0000f,
                        07.7887f, 00.7822f, 00.0000f, 00.3756f, 00.0936f, 00.0000f,
                        04.9870f, 01.3845f, 00.0000f, 00.3661f, 00.0868f, 00.0000f,
                        01.6557f, 00.6523f, 00.0000f, 00.9193f, 00.0494f, 00.0000f,
                        04.1267f, 00.4645f, 00.0229f, 00.8983f, 00.2762f, 00.0000f,
                        10.2361f, 01.0516f, 00.0000f, 00.2218f, 00.3141f, 00.0000f,
                        07.5631f, 03.1065f, 01.1011f, 00.2286f, 00.2657f, 00.0000f,
                        06.7648f, 11.3413f, 03.6166f, 00.5273f, 00.2270f, 00.0000f,
                        07.5019f, 02.3187f, 01.9466f, 04.4037f, 00.0665f, 00.0000f,
                        07.5991f, 01.3050f, 00.2516f, 06.8577f, 00.1161f, 00.0000f,
                        09.7545f, 01.3100f, 00.2265f, 02.0953f, 00.2235f, 00.0000f,
                        08.0150f, 01.5923f, 00.2322f, 00.4829f, 00.1725f, 00.0000f,
                        02.0093f, 02.0546f, 00.4196f, 01.2210f, 00.0933f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "LGGEEVSVACK"
                },
                new[] {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2700f, 2)
                },
                new[] {
                    new[] {
                        01.5074f, 00.0000f, 00.0416f, 00.0000f, 00.0058f, 00.3123f,
                        03.9536f, 00.0000f, 00.2011f, 00.4314f, 00.0000f, 00.0000f,
                        03.3629f, 00.0000f, 00.0000f, 01.0413f, 00.0000f, 00.0000f,
                        07.5332f, 00.0000f, 00.0000f, 02.7324f, 00.0000f, 00.0000f,
                        04.2465f, 00.0000f, 00.0000f, 03.5259f, 00.0000f, 00.0000f,
                        03.1437f, 00.0000f, 00.0000f, 00.7837f, 00.0000f, 00.0000f,
                        09.6615f, 00.0000f, 00.0000f, 00.4643f, 00.0000f, 00.0000f,
                        13.8088f, 00.1971f, 00.0000f, 00.5316f, 00.0000f, 00.0000f,
                        06.1919f, 00.5215f, 00.0000f, 00.4920f, 00.0073f, 00.0000f,
                        04.2106f, 00.6379f, 00.0000f, 00.3867f, 00.0319f, 00.0000f,
                        00.2553f, 01.4885f, 00.0000f, 00.2772f, 00.0225f, 00.2477f,
                        00.0000f, 00.1297f, 00.0118f, 00.2078f, 00.0375f, 00.3071f,
                        00.0000f, 00.0121f, 00.3272f, 00.1895f, 00.0000f, 00.2729f,
                        00.2562f, 00.0000f, 00.0000f, 00.5178f, 00.0000f, 00.0000f,
                        01.0910f, 00.0000f, 00.0000f, 00.3582f, 00.0000f, 00.0000f,
                        03.3241f, 00.0000f, 00.0000f, 00.5644f, 00.0000f, 00.0000f,
                        06.2392f, 00.0000f, 00.0000f, 01.4870f, 00.0000f, 00.0000f,
                        05.2562f, 00.0000f, 00.0000f, 00.3753f, 00.0000f, 00.0000f,
                        06.5860f, 00.0000f, 00.0000f, 00.0837f, 00.0000f, 00.0000f,
                        08.3914f, 00.0000f, 00.0000f, 00.1577f, 00.0000f, 00.0000f,
                        06.1801f, 00.1096f, 00.0000f, 00.2193f, 00.0000f, 00.0000f,
                        03.2690f, 00.6300f, 00.0000f, 00.2680f, 00.0000f, 00.0000f,
                        00.8106f, 00.4836f, 00.0000f, 00.0406f, 00.0000f, 00.1270f,
                        00.0565f, 00.1735f, 00.0000f, 00.1718f, 00.0000f, 00.2232f,
                        00.0000f, 00.1827f, 00.0926f, 00.1694f, 00.0000f, 00.2019f,
                        00.5847f, 00.0000f, 00.0000f, 00.5101f, 00.0000f, 00.0000f,
                        01.5006f, 00.0000f, 00.0000f, 00.5080f, 00.0000f, 00.0000f,
                        04.2328f, 00.0000f, 00.0000f, 00.4028f, 00.0000f, 00.0000f,
                        07.2125f, 00.0000f, 00.0000f, 01.0871f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "GSYNLQDLLAQAK"
                },
                new[] {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[] {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.3200f, 2),
                    new PrositIntensityInput("LGGEEVSVACK", 0.3200f, 2),
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.3200f, 2),
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.3200f, 2),
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.3200f, 2)
                },
                new[] {
                    new[] {
                        05.1529f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.1655f,
                        00.6633f, 00.0000f, 00.4365f, 03.5331f, 00.0000f, 00.1397f,
                        00.6197f, 00.0000f, 00.5440f, 02.5895f, 00.0412f, 00.0900f,
                        00.9720f, 00.0000f, 00.0624f, 00.0000f, 00.0000f, 00.1091f,
                        00.8279f, 00.0000f, 00.0000f, 02.5371f, 00.0000f, 00.1149f,
                        01.2630f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0933f,
                        01.3009f, 00.0000f, 00.0000f, 00.5882f, 00.0000f, 00.0850f,
                        01.4518f, 00.0000f, 00.0000f, 01.2291f, 00.1711f, 00.0859f,
                        00.6881f, 00.0000f, 00.0000f, 01.2919f, 00.5298f, 00.1056f,
                        10.8590f, 00.7168f, 00.0000f, 01.9823f, 00.5735f, 00.0000f,
                        00.0000f, 00.2258f, 00.0000f, 00.7858f, 00.3389f, 00.2128f,
                        00.1276f, 02.5226f, 00.9443f, 01.0982f, 00.1824f, 00.2290f,
                        00.0000f, 00.2274f, 00.0000f, 00.6205f, 00.0481f, 00.2100f,
                        00.0000f, 00.1628f, 00.0000f, 01.3837f, 00.0000f, 00.1990f,
                        00.0347f, 00.2900f, 00.0000f, 00.8906f, 00.0283f, 00.2376f,
                        00.2106f, 00.4749f, 00.0000f, 00.0000f, 00.0073f, 00.2937f,
                        00.0000f, 00.2041f, 00.0979f, 00.0000f, 00.0000f, 00.2032f,
                        00.0000f, 00.0000f, 00.0426f, 00.0000f, 00.0000f, 00.1045f,
                        00.0000f, 00.0000f, 00.3432f, 00.0392f, 00.0000f, 00.0000f,
                        00.5429f, 00.0000f, 01.1496f, 00.8997f, 00.0000f, 00.0000f,
                        00.7500f, 00.2288f, 02.4255f, 00.9658f, 00.0000f, 00.0000f,
                        01.7123f, 00.5134f, 03.3216f, 00.0000f, 00.0000f, 00.0000f,
                        00.8541f, 00.0000f, 03.2677f, 01.4271f, 00.0000f, 01.3129f,
                        17.8522f, 01.4361f, 03.4198f, 01.0496f, 00.0000f, 00.0000f,
                        07.7864f, 00.4408f, 03.8389f, 08.4694f, 03.6419f, 00.5642f,
                        00.8486f, 00.0000f, 03.3463f, 00.0000f, 00.8978f, 00.9568f,
                        00.0000f, 00.2921f, 03.4622f, 02.0403f, 01.0849f, 00.0000f,
                        01.7656f, 00.5086f, 03.3651f, 00.0000f, 00.0564f, 00.0000f,
                        00.0000f, 00.7494f, 02.7364f, 02.5188f, 00.5590f, 00.0000f
                    },         new[] {
                        01.4618f, 00.0000f, 00.0807f, 00.0000f, 00.0000f, 00.0753f,
                        05.7470f, 00.0000f, 00.4609f, 04.8050f, 00.0000f, 00.0000f,
                        07.4867f, 00.0000f, 00.0000f, 03.3922f, 00.0000f, 00.0000f,
                        02.7871f, 00.0094f, 00.0000f, 02.0310f, 00.0000f, 00.0000f,
                        12.6754f, 00.0145f, 00.0000f, 01.0881f, 00.0142f, 00.0000f,
                        07.4873f, 00.0687f, 00.0000f, 00.5404f, 00.0244f, 00.0000f,
                        06.7066f, 00.1535f, 00.0000f, 00.3036f, 00.0419f, 00.0000f,
                        01.3474f, 00.0850f, 00.0000f, 00.0888f, 00.0243f, 00.0000f,
                        05.1297f, 00.0152f, 00.0000f, 00.0468f, 00.0184f, 00.0000f,
                        11.8285f, 00.0000f, 00.0000f, 00.0293f, 00.0282f, 00.0000f,
                        08.5743f, 00.1468f, 00.0000f, 00.0180f, 00.0000f, 00.0000f,
                        04.3010f, 00.3140f, 00.0000f, 00.0828f, 00.0000f, 00.0000f,
                        04.4911f, 00.2542f, 00.0834f, 00.1896f, 00.0000f, 00.0000f,
                        05.5020f, 00.0000f, 00.0611f, 00.2047f, 00.0000f, 00.0000f,
                        07.7432f, 00.0000f, 00.0000f, 00.4172f, 00.0000f, 00.0000f,
                        08.3843f, 00.0000f, 00.0000f, 00.5814f, 00.0000f, 00.0000f,
                        06.7733f, 00.0000f, 00.0000f, 00.1409f, 00.0000f, 00.0000f,
                        07.6406f, 00.0000f, 00.0000f, 00.0119f, 00.0000f, 00.0000f,
                        07.0683f, 00.0000f, 00.0000f, 00.0438f, 00.0000f, 00.0000f,
                        02.9959f, 00.0000f, 00.0000f, 00.4988f, 00.0000f, 00.0000f,
                        02.9358f, 00.0174f, 00.0000f, 00.1970f, 00.0636f, 00.0000f,
                        07.7140f, 00.0000f, 00.0000f, 00.2374f, 00.0250f, 00.0000f,
                        07.6319f, 00.2765f, 00.0000f, 00.1465f, 00.0011f, 00.0000f,
                        05.5019f, 00.4749f, 00.0000f, 00.1525f, 00.0000f, 00.0000f,
                        03.9102f, 00.0506f, 00.1964f, 00.5735f, 00.0000f, 00.0000f,
                        06.2330f, 00.0000f, 00.0672f, 00.6842f, 00.0000f, 00.0000f,
                        06.6712f, 00.0000f, 00.0000f, 00.1441f, 00.0000f, 00.0000f,
                        07.5935f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        03.5260f, 00.0518f, 00.0000f, 00.0523f, 00.0000f, 00.0000f
                    },         new[] {
                        02.0105f, 00.0000f, 00.0639f, 00.0000f, 00.0000f, 00.3199f,
                        04.6605f, 00.0000f, 00.2033f, 00.7537f, 00.0000f, 00.0000f,
                        03.9022f, 00.0000f, 00.0000f, 01.2589f, 00.0000f, 00.0000f,
                        09.8748f, 00.0000f, 00.0000f, 02.5929f, 00.0000f, 00.0000f,
                        05.3858f, 00.0000f, 00.0000f, 02.4922f, 00.0000f, 00.0000f,
                        04.1654f, 00.0000f, 00.0000f, 00.3880f, 00.0007f, 00.0000f,
                        09.8178f, 00.0000f, 00.0000f, 00.2739f, 00.0032f, 00.0000f,
                        10.9834f, 00.2089f, 00.0000f, 00.2461f, 00.0000f, 00.0000f,
                        05.5348f, 00.1619f, 00.0000f, 00.1339f, 00.0007f, 00.0000f,
                        03.4522f, 00.0801f, 00.0000f, 00.0994f, 00.0249f, 00.0000f,
                        00.2204f, 00.0580f, 00.0000f, 00.0169f, 00.0022f, 00.2765f,
                        00.0000f, 00.0000f, 00.0000f, 00.0083f, 00.0000f, 00.3155f,
                        00.0000f, 00.0000f, 00.0000f, 00.1195f, 00.0000f, 00.2984f,
                        00.0282f, 00.0000f, 00.0000f, 00.0892f, 00.0000f, 00.2059f,
                        00.2277f, 00.0000f, 00.0000f, 00.1818f, 00.0000f, 00.1326f,
                        00.9214f, 00.0000f, 00.0000f, 00.1808f, 00.0000f, 00.0000f,
                        02.3794f, 00.0000f, 00.0000f, 00.1384f, 00.0000f, 00.0000f,
                        03.2004f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        03.1573f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.7041f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.5082f, 00.0000f, 00.0000f, 00.0286f, 00.0000f, 00.0000f,
                        00.1070f, 00.0051f, 00.0000f, 00.0000f, 00.0000f, 00.1187f,
                        00.0000f, 00.0000f, 00.0000f, 00.1268f, 00.0000f, 00.0164f,
                        00.4021f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.0095f, 00.0000f, 00.0000f, 00.0589f, 00.0000f, 00.0000f,
                        01.5680f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.4803f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.6825f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.1285f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f
                    },         new[] {
                        02.0105f, 00.0000f, 00.0639f, 00.0000f, 00.0000f, 00.3199f,
                        04.6605f, 00.0000f, 00.2033f, 00.7537f, 00.0000f, 00.0000f,
                        03.9022f, 00.0000f, 00.0000f, 01.2589f, 00.0000f, 00.0000f,
                        09.8748f, 00.0000f, 00.0000f, 02.5929f, 00.0000f, 00.0000f,
                        05.3858f, 00.0000f, 00.0000f, 02.4922f, 00.0000f, 00.0000f,
                        04.1654f, 00.0000f, 00.0000f, 00.3880f, 00.0007f, 00.0000f,
                        09.8178f, 00.0000f, 00.0000f, 00.2739f, 00.0032f, 00.0000f,
                        10.9834f, 00.2089f, 00.0000f, 00.2461f, 00.0000f, 00.0000f,
                        05.5348f, 00.1619f, 00.0000f, 00.1339f, 00.0007f, 00.0000f,
                        03.4522f, 00.0801f, 00.0000f, 00.0994f, 00.0249f, 00.0000f,
                        00.2204f, 00.0580f, 00.0000f, 00.0169f, 00.0022f, 00.2765f,
                        00.0000f, 00.0000f, 00.0000f, 00.0083f, 00.0000f, 00.3155f,
                        00.0000f, 00.0000f, 00.0000f, 00.1195f, 00.0000f, 00.2984f,
                        00.0282f, 00.0000f, 00.0000f, 00.0892f, 00.0000f, 00.2059f,
                        00.2277f, 00.0000f, 00.0000f, 00.1818f, 00.0000f, 00.1326f,
                        00.9214f, 00.0000f, 00.0000f, 00.1808f, 00.0000f, 00.0000f,
                        02.3794f, 00.0000f, 00.0000f, 00.1384f, 00.0000f, 00.0000f,
                        03.2004f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        03.1573f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.7041f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.5082f, 00.0000f, 00.0000f, 00.0286f, 00.0000f, 00.0000f,
                        00.1070f, 00.0051f, 00.0000f, 00.0000f, 00.0000f, 00.1187f,
                        00.0000f, 00.0000f, 00.0000f, 00.1268f, 00.0000f, 00.0164f,
                        00.4021f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.0095f, 00.0000f, 00.0000f, 00.0589f, 00.0000f, 00.0000f,
                        01.5680f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.4803f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.6825f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.1285f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f
                    },         new[] {
                        02.1797f, 00.0069f, 00.1296f, 00.0896f, 00.0061f, 00.3121f,
                        05.1939f, 00.0201f, 00.4326f, 03.8655f, 00.0000f, 00.0000f,
                        03.5591f, 00.0002f, 00.0000f, 01.7501f, 00.0000f, 00.0000f,
                        06.2299f, 00.0000f, 00.0000f, 01.3945f, 00.0000f, 00.0000f,
                        09.3125f, 00.0000f, 00.0000f, 01.2568f, 00.0000f, 00.0000f,
                        11.2877f, 00.4447f, 00.0000f, 00.1518f, 00.0005f, 00.0000f,
                        05.1146f, 00.9329f, 00.0000f, 00.1820f, 00.0074f, 00.0000f,
                        03.4377f, 00.7844f, 00.0000f, 00.0794f, 00.0230f, 00.0000f,
                        00.7383f, 00.5776f, 00.0000f, 00.0710f, 00.0294f, 00.1245f,
                        00.3322f, 00.1604f, 00.0541f, 00.0095f, 00.0236f, 00.2230f,
                        00.0000f, 00.1302f, 00.1682f, 00.1223f, 00.0000f, 00.1282f,
                        00.6714f, 00.0000f, 00.0000f, 00.0482f, 00.0000f, 00.0000f,
                        01.4280f, 00.0000f, 00.0000f, 00.1579f, 00.0000f, 00.0000f,
                        02.0052f, 00.0000f, 00.0000f, 00.1665f, 00.0000f, 00.0000f,
                        03.4861f, 00.0000f, 00.0000f, 00.0568f, 00.0000f, 00.0000f,
                        03.3804f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.2506f, 00.1380f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.2142f, 00.1323f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        00.2497f, 00.1468f, 00.0000f, 00.0000f, 00.0000f, 00.0618f,
                        00.0817f, 00.0455f, 00.0000f, 00.0000f, 00.0000f, 00.1103f,
                        00.3379f, 00.0000f, 00.0266f, 00.0000f, 00.0000f, 00.0000f,
                        01.1397f, 00.0000f, 00.0000f, 00.0180f, 00.0000f, 00.0000f,
                        01.7360f, 00.0000f, 00.0000f, 00.0537f, 00.0000f, 00.0000f,
                        02.6427f, 00.0000f, 00.0000f, 00.0060f, 00.0000f, 00.0000f,
                        02.7285f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        02.1556f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.7567f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        01.2057f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        00.5832f, 00.0825f, 00.0459f, 00.0000f, 00.0000f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[] {
                    "CSLPRPWALTFSYGR",
                    "LGGEEVSVACK",
                    "GSYNLQDLLAQAK",
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[] {
                    1.2758f,
                    -0.6807f,
                    1.2877f,
                    0.7566f
                }
            )
        });

        [TestMethod]
        public void TestPrositSkylineIntegration()
        {
            TestFilesZip = "TestFunctional/PrositSkylineIntegrationTest.zip";
            RunFunctionalTest();
        }

        protected override void DoTest()
        {
            OpenDocument(TestFilesDir.GetTestPath(@"Rat_plasma.sky"));

            /*var doc = SkylineWindow.Document;
            RunUI(() =>
            {
                // Add Prosit supported mods
                SkylineWindow.ChangeSettings(SkylineWindow.Document.Settings.ChangePeptideModifications(pm =>
                {
                    return pm.ChangeStaticModifications(new[]
                    {
                        UniMod.DictStructuralModNames[@"Carbamidomethyl (C)"],
                        UniMod.DictStructuralModNames[@"Oxidation (M)"]
                    });
                }), false);
            });

            WaitForDocumentChange(doc);*/

            // Set up library match

            // Show all ions and charges of interest
            Settings.Default.ShowBIons = true;
            Settings.Default.ShowYIons = true;
            Settings.Default.ShowCharge1 = true;
            Settings.Default.ShowCharge2 = true;
            Settings.Default.ShowCharge3 = true;

            PrositConstants.CACHE_PREV_PREDICTION = false;

            PrositPredictionClient.FakeClient = RecordData
                ? new FakePrositPredictionClient(string.Empty)
                : new FakePrositPredictionClient(QUERIES);

            if (RecordData)
                Console.WriteLine(@"private static List<PrositQuery> QUERIES = new List<PrositQuery>(new PrositQuery[] {");

            TestPrositOptions();
            TestPrositSinglePrecursorPredictions();
            TestLivePrositMirrorPlots();
            Settings.Default.Prosit = false; // Disable Prosit to avoid that last query after building the library
            TestPrositLibraryBuild();
            TestInvalidPepSequences(); // Do this at the end, otherwise it messes with the order of nodes
            var expected = RecordData ? 0 : QUERIES.Count;
            Assert.AreEqual(expected, ((FakePrositPredictionClient)PrositPredictionClient.Current).QueryIndex);
            PrositPredictionClient.FakeClient = null;
            PrositConstants.CACHE_PREV_PREDICTION = true;
            if (RecordData)
                Console.WriteLine(@"});");
        }

        public void TestInvalidPepSequences()
        {
            // Allow us to paste 'random' sequences
            /*RunUI(() =>
            {
                // Max missed cleavages
                SkylineWindow.ModifyDocument(null, doc => doc.ChangeSettings(doc.Settings.ChangePeptideSettings(
                    doc.Settings.PeptideSettings.ChangeDigestSettings(new DigestSettings(2,
                        doc.Settings.PeptideSettings.DigestSettings.ExcludeRaggedEnds)))));

                // Max len
                SkylineWindow.ModifyDocument(null, doc => doc.ChangeSettings(doc.Settings.ChangePeptideSettings(
                    doc.Settings.PeptideSettings.ChangeFilter(
                        doc.Settings.PeptideSettings.Filter.ChangeMaxPeptideLength(32)))));
            });*/

            // Unknown Amino Acid 'O'
            TestPrositException("ROHDESKYLINE", typeof(PrositUnsupportedAminoAcidException));
            // Too long
            TestPrositException(string.Concat(Enumerable.Repeat("AAAA", 8)), typeof(PrositPeptideTooLongException));
            // Unsupported mod
            TestPrositException("S[+80]KYLINE", typeof(PrositUnsupportedModificationException));
            // Small molecule
            TestPrositException("Methionine", typeof(PrositSmallMoleculeException));
        }

        private void SelectNodeBySeq(string seq)
        {
            seq = FastaSequence.StripModifications(seq);
            var found = false;
            RunUI(() =>
            {
                foreach (var node in SkylineWindow.SequenceTree.Nodes.OfType<TreeNodeMS>())
                {
                    foreach (var child in node.Nodes.OfType<TreeNodeMS>())
                    {
                        if (child is PeptideTreeNode pep &&
                            pep.DocNode.Peptide.Target.DisplayName == seq)
                        {
                            found = true;
                            SkylineWindow.SequenceTree.SelectedNode = child;
                            return;
                        }
                    }
                }
            });

            Assert.IsTrue(found, "Could not find and select sequence \"{0}\"", seq);
            WaitForConditionUI(() => SkylineWindow.SelectedNode is PeptideTreeNode pep &&
                                     pep.DocNode.Peptide.Target.DisplayName == seq);
        }

        private void TestPrositException(string seq, Type expectedException)
        {
            /*var doc = SkylineWindow.Document;
            if (!addMods)
            {
                RunUI(() => SkylineWindow.Paste(seq));
            }
            else
            {
                RunDlg<MultiButtonMsgDlg>(() => SkylineWindow.Paste(seq), dlg =>
                {
                    dlg.OkDialog();
                });
            }
            WaitForDocumentChange(doc);*/

            SelectNodeBySeq(seq);
            Settings.Default.Prosit = true;
            RunUI(SkylineWindow.UpdateGraphPanes);
            // Add first precursor
            /*RunDlg<PopupPickList>(SkylineWindow.ShowPickChildrenInTest, dlg =>
            {
                dlg.ToggleItem(0);
                dlg.OnOk();
            });

            WaitForConditionUI(() => SkylineWindow.SelectedNode.Nodes.Count == 1);*/
            WaitForGraphs();
            WaitForConditionUI(() =>
                SkylineWindow.GraphSpectrum.GraphException != null &&
                !(SkylineWindow.GraphSpectrum.GraphException is PrositPredictingException));

            RunUI(() =>
            {
                Assert.IsInstanceOfType(SkylineWindow.GraphSpectrum.GraphException, expectedException);
            });

            Settings.Default.Prosit = false;
        }

        public void TestPrositLibraryBuild()
        {
            var client = (FakePrositPredictionClient)PrositPredictionClient.Current;
            var outBlib = TestFilesDir.GetTestPath("Prosit.blib");

            // Open Peptide Settings -- Library
            var peptideSettings = ShowDialog<PeptideSettingsUI>(SkylineWindow.ShowPeptideSettingsUI);
            var buildLibrary = ShowDialog<BuildLibraryDlg>(peptideSettings.ShowBuildLibraryDlg);

            RunUI(() => { Assert.IsFalse(buildLibrary.Prosit); });

            var toolOptions = WaitForOpenForm<ToolOptionsUI>();
            WaitForConditionUI(() => toolOptions.PrositServerStatus == ToolOptionsUI.ServerStatus.AVAILABLE);
            RunUI(() => toolOptions.DialogResult = DialogResult.OK);
            WaitForClosedForm(toolOptions);

            RunUI(() =>
            {
                var nce = Settings.Default.PrositNCE;
                Assert.AreEqual(buildLibrary.NCE, nce);
                buildLibrary.NCE = 32;
                // Don't want this to change the settings nce, this is just for building the library
                Assert.AreEqual(Settings.Default.PrositNCE, nce);

                buildLibrary.LibraryName = "Prosit";
                buildLibrary.LibraryPath = outBlib;
                // buildLibrary.IrtStandard = IrtStandard.BIOGNOSYS_11;
            });

            // Other tests do this too, but why?
            OkDialog(buildLibrary, buildLibrary.OkWizardPage);

            // Wait for library build
            Assert.IsTrue(WaitForConditionUI(() =>
                peptideSettings.AvailableLibraries.Contains("Prosit")));
            // Select new library
            RunUI(() => peptideSettings.PickedLibraries =
                peptideSettings.PickedLibraries.Concat(new[] { "Prosit" }).ToArray());
            // Close pep settings
            OkDialog(peptideSettings, peptideSettings.OkDialog);

            var precursorCount = SkylineWindow.Document.PeptideTransitionGroupCount;

            const int notSupportedCount = 3;
            // - 1 because of heavy precursor, which doesn't seem to be counted
            WaitForLibrary(precursorCount - notSupportedCount - 1, SkylineWindow.Document.Settings.PeptideSettings.Libraries.LibrarySpecs.IndexOf(l => l.Name == "Prosit"));

            var prositLib = SkylineWindow.Document.Settings.PeptideSettings.Libraries.Libraries.Last();

            // Extract spectrum and rt info from the library and store it a way that
            // allows us to verify the spectra easily
            var spectrumDisplayInfos = new SpectrumDisplayInfo[precursorCount];
            var peptidesRepeat = new PrositIntensityModel.PeptidePrecursorNCE[precursorCount];
            var peptides = SkylineWindow.Document.Peptides.ToArray();
            var idx = 0;
            var noMatchCount = 0;
            for (var i = 0; i < peptides.Length; ++i)
            {
                var precursors = peptides[i].TransitionGroups.ToArray();
                for (var j = 0; j < precursors.Length; ++j)
                {
                    var libKey = precursors[j].GetLibKey(peptides[i]);
                    var spectra = prositLib.GetSpectra(libKey, precursors[j].LabelType, LibraryRedundancy.all).ToArray();
                    if (spectra.Length == 0)
                    {
                        ++noMatchCount;
                        spectrumDisplayInfos[idx] = null;
                    }
                    else
                    {
                        spectrumDisplayInfos[idx] = new SpectrumDisplayInfo(spectra[0], precursors[j], spectra[0].RetentionTime);
                    }

                    peptidesRepeat[idx++] = new PrositIntensityModel.PeptidePrecursorNCE(peptides[i], precursors[j]);
                }
            }

            Assert.AreEqual(notSupportedCount, noMatchCount);

            if (RecordData)
                return;

            // Get queries and make sure they match the actual spectra
            var intensityQuery = QUERIES.ElementAt(client.QueryIndex - 2) as PrositIntensityQuery;
            Assert.IsNotNull(intensityQuery);
            intensityQuery.AssertMatchesSpectra(peptidesRepeat, spectrumDisplayInfos);
            var rtQuery = QUERIES.ElementAt(client.QueryIndex - 1) as PrositRetentionTimeQuery;
            Assert.IsNotNull(rtQuery);
            rtQuery.AssertMatchesSpectra(spectrumDisplayInfos);
        }

        public void TestPrositOptions()
        {
            // Enable Prosit
            Settings.Default.Prosit = true;

            // For now just set all Prosit settings
            var toolOptions = ShowDialog<ToolOptionsUI>(() => SkylineWindow.ShowToolOptionsUI(ToolOptionsUI.TABS.Prosit));

            RunUI(() =>
            {
                // Also set ip, otherwise we will keep getting exceptions about the server not being set,
                // although we are using the fake test client
                toolOptions.PrositIntensityModelCombo = "intensity_2";
                toolOptions.PrositRetentionTimeModelCombo = "iRT";
                toolOptions.CECombo = 28;
            });

            WaitForConditionUI(() => toolOptions.PrositServerStatus == ToolOptionsUI.ServerStatus.AVAILABLE);
            RunUI(() => toolOptions.DialogResult = DialogResult.OK);
            WaitForClosedForm(toolOptions);

            Assert.AreEqual("intensity_2", Settings.Default.PrositIntensityModel);
            Assert.AreEqual("iRT", Settings.Default.PrositRetentionTimeModel);
            Assert.AreEqual(28, Settings.Default.PrositNCE);
        }

        public void TestPrositSinglePrecursorPredictions()
        {
            var client = (FakePrositPredictionClient) PrositPredictionClient.Current;
            // Selecting a protein should not make any predictions
            SelectNode(SrmDocument.Level.MoleculeGroups, 0);
            WaitForGraphs();
            Assert.IsFalse(SkylineWindow.GraphSpectrum.HasSpectrum);
            Assert.AreEqual(
                Resources.UnavailableMSGraphItem_UnavailableMSGraphItem_Spectrum_information_unavailable,
                SkylineWindow.GraphSpectrum.GraphTitle);

            var baseCE = 25;
            Settings.Default.PrositNCE = baseCE;

            // Select several peptides and make sure they are displayed correctly
            TestPrositSinglePrecursorPredictions(client, SrmDocument.Level.Molecules, 0, 4);
            // Do the same for transition groups, we have one more of those because of the heavy precursor
            TestPrositSinglePrecursorPredictions(client, SrmDocument.Level.TransitionGroups, 0, 5);
        }


        public void TestPrositSinglePrecursorPredictions(FakePrositPredictionClient client, SrmDocument.Level level, int start, int end)
        {
            var baseCE = 25;
            Settings.Default.PrositNCE = baseCE;

            // Select several peptides and make sure they are displayed correctly
            for (var i = start; i < end; ++i)
            {
                // Select node, causing prosit predictions to be made
                SelectNode(level, i); // i'th peptide

                // Get selected node, since we need it for calculating MZs. Selecting a node is instant,
                // the prediction not
                GraphSpectrum.SpectrumNodeSelection selection = null;
                RunUI(() => selection = GraphSpectrum.SpectrumNodeSelection.GetCurrent(SkylineWindow));

                WaitForPrositSpectrum(selection.Precursor, baseCE + i);

                if (!RecordData)
                    AssertIntensityAndIRTSpectrumCorrect((PrositIntensityModel.PeptidePrecursorNCE)selection, client.QueryIndex);

                RunUI(() =>
                {
                    Assert.IsTrue(SkylineWindow.GraphSpectrum.NCEVisible);
                    Assert.IsFalse(SkylineWindow.GraphSpectrum.MirrorComboVisible);
                    Assert.AreEqual(Settings.Default.PrositNCE, SkylineWindow.GraphSpectrum.PrositNCE);

                    // Change NCE and predict again
                    ++SkylineWindow.GraphSpectrum.PrositNCE;

                    Assert.AreEqual(Settings.Default.PrositNCE, SkylineWindow.GraphSpectrum.PrositNCE);
                });

                WaitForPrositSpectrum(selection.Precursor, baseCE + i + 1);

                if (!RecordData)
                    AssertIntensityAndIRTSpectrumCorrect((PrositIntensityModel.PeptidePrecursorNCE)selection, client.QueryIndex);
            }
        }

        /*public PeptidePrecursorPair GetSelectedPeptidePair()
        {
            TreeNodeMS treeNodeMS = null;
            RunUI(() => treeNodeMS = SkylineWindow.SelectedNode);
            var node = treeNodeMS as PeptideTreeNode;
            Assert.IsNotNull(node);
            var pep = node.Model as PeptideDocNode;
            Assert.IsNotNull(pep);
            var precursor = pep.TransitionGroups.First();

            return new PeptidePrecursorPair(pep, precursor);
        }*/

        public void AssertIntensityAndIRTSpectrumCorrect(PrositIntensityModel.PeptidePrecursorNCE peptidePrecursorNCE, int index)
        {
            // We are interested in the queries just processed
            index -= 2;

            SpectrumDisplayInfo spectrumDisplayInfo = null;
            RunUI(() => spectrumDisplayInfo = SkylineWindow.GraphSpectrum.PrositSpectrum);
            Assert.IsNotNull(spectrumDisplayInfo);

            // There need to be at least two queries (ms2, irt)
            AssertEx.IsGreaterThanOrEqual(QUERIES.Count - index, 2);

            // Get queries and make sure they match the actual spectra
            var intensityQuery = QUERIES.ElementAt(index) as PrositIntensityQuery;
            Assert.IsNotNull(intensityQuery);
            intensityQuery.AssertMatchesSpectrum(peptidePrecursorNCE, spectrumDisplayInfo);

            var rtQuery = QUERIES.ElementAt(index + 1) as PrositRetentionTimeQuery;
            Assert.IsNotNull(rtQuery);
            rtQuery.AssertMatchesSpectrum(spectrumDisplayInfo);
        }

        public void WaitForPrositSpectrum(TransitionGroupDocNode precursor, int nce)
        {
            WaitForConditionUI(() =>
            {
                if (!SkylineWindow.GraphSpectrum.HasSpectrum)
                    return false;
                var info = SkylineWindow.GraphSpectrum.PrositSpectrum?.SpectrumInfo as SpectrumInfoProsit;
                if (info == null)
                    return false;
                return ReferenceEquals(info.Precursor, precursor) && info.NCE == nce;
            });
        }

        public void TestLivePrositMirrorPlots()
        {
            var client = (FakePrositPredictionClient) PrositPredictionClient.Current;

            // Enable mirror plots
            Settings.Default.LibMatchMirror = true;

            // Reset NCE
            Settings.Default.PrositNCE = 27;

            // TODO: maybe somehow make checks more specific, since the checks here are very similar to
            // checks for the regular spectra
            for (var i = 1; i < 3; ++i)
            {
                // Select the i'th peptide. Only peptides 1 and 2 have library info
                SelectNode(SrmDocument.Level.Molecules, i);
                GraphSpectrum.SpectrumNodeSelection selection = null;
                RunUI(() => selection = GraphSpectrum.SpectrumNodeSelection.GetCurrent(SkylineWindow));
                WaitForPrositSpectrum(selection.Precursor, Settings.Default.PrositNCE);
                // These are the same if we are not displaying a mirror plot
                RunUI(() => Assert.AreNotSame(SkylineWindow.SelectedSpectrum, SkylineWindow.GraphSpectrum.PrositSpectrum));

                if (!RecordData)
                    AssertIntensityAndIRTSpectrumCorrect((PrositIntensityModel.PeptidePrecursorNCE)selection, client.QueryIndex);
            }
        }
    }

    public interface IRecordable
    {
        string ToCode();
    }

    public abstract class PrositQuery : IRecordable
    {
        public abstract string Model { get; }
        public abstract PredictResponse Response { get; }

        public abstract void AssertMatchesQuery(PredictRequest pr);
        public abstract string ToCode();
    }

    public class PrositIntensityInput : IRecordable
    {
        public PrositIntensityInput(string modifiedSequence, float normalizedCollisionEnergy, int precursorCharge)
        {
            ModifiedSequence = modifiedSequence;
            NormalizedCollisionEnergy = normalizedCollisionEnergy;
            PrecursorCharge = precursorCharge;
        }

        public string ModifiedSequence { get; private set; }
        public float NormalizedCollisionEnergy { get; private set; }
        public int PrecursorCharge { get; private set; }

        public string ToCode()
        {
            return string.Format("new PrositIntensityInput(\"{0}\", {1:0.0000}f, {2})", ModifiedSequence, NormalizedCollisionEnergy,
                PrecursorCharge);
        }
    }

    public class PrositIntensityQuery : PrositQuery
    {
        private PrositIntensityInput[] _inputs;
        private float[][] _spectra;

        public PrositIntensityQuery(PrositIntensityInput[] inputs, float[][] spectra)
        {
            _inputs = inputs;
            _spectra = spectra;
            Assert.AreEqual(_inputs.Length, _spectra.Length);
        }

        public static PrositIntensityQuery FromTensors(PredictRequest request, PredictResponse response)
        {
            // Sequences
            var seqs = request.Inputs[PrositIntensityModel.PrositIntensityInput.PEPTIDES_KEY];
            Assert.AreEqual(seqs.TensorShape.Dim.Count, 2);
            Assert.AreEqual(seqs.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            var decodedSeqs = PrositHelpers.DecodeSequences(seqs);

            // CEs
            var ces = request.Inputs[PrositIntensityModel.PrositIntensityInput.COLLISION_ENERGY_KEY];
            Assert.AreEqual(ces.TensorShape.Dim.Count, 2);
            Assert.AreEqual(ces.TensorShape.Dim[1].Size, 1);
            var decodedCes = ces.FloatVal.ToArray();

            // Charges
            var charges = request.Inputs[PrositIntensityModel.PrositIntensityInput.PRECURSOR_CHARGE_KEY];
            Assert.AreEqual(charges.TensorShape.Dim.Count, 2);
            Assert.AreEqual(charges.TensorShape.Dim[1].Size, PrositConstants.PRECURSOR_CHARGES);
            var decodedCharges = PrositHelpers.DecodeCharges(charges);

            var inputs = Enumerable.Range(0, decodedSeqs.Length)
                .Select(i => new PrositIntensityInput(decodedSeqs[i], decodedCes[i], decodedCharges[i])).ToArray();

            var outputsFlattened = PrositHelpers.ReLU(response.Outputs[PrositIntensityModel.PrositIntensityOutput.OUTPUT_KEY].FloatVal.ToArray());

            // Reshape and copy
            var outputs = new float[inputs.Length][];
            var batch = (PrositConstants.PEPTIDE_SEQ_LEN - 1) * PrositConstants.IONS_PER_RESIDUE;
            for (int i = 0; i < inputs.Length; ++i)
            {
                outputs[i] = new float[batch];
                Array.Copy(outputsFlattened, i * batch, outputs[i], 0, batch);
            }

            return new PrositIntensityQuery(inputs, outputs);
        }

        public override string ToCode()
        {
            var inputsCodeArr = _inputs.Select(i => "        " + i.ToCode());
            var inputsCode = string.Format("new[] {{\r\n{0}\r\n    }}",
                string.Join(",\r\n", inputsCodeArr));

            var spectraCodeArr = _spectra.Select(f =>
            {
                var code = new StringBuilder();
                code.AppendLine("        new[] {");
                for (int i = 0; i < PrositConstants.PEPTIDE_SEQ_LEN - 1; ++i)
                    code.AppendLine("            " + string.Join(", ",
                                        f.Skip(i * PrositConstants.IONS_PER_RESIDUE).Take(PrositConstants.IONS_PER_RESIDUE)
                                            .Select(fl => string.Format("{0:00.0000}f", fl))) + ",");
                code.Remove(code.Length - 3, 3);
                code.AppendLine();
                code.Append("        }");
                return code.ToString();
            });

            var spectraCode = new StringBuilder();
            spectraCode.AppendLine("new[] {");
            spectraCode.Append(string.Join(", ", spectraCodeArr));
            spectraCode.AppendLine();
            spectraCode.Append("    }");

            return string.Format("new PrositIntensityQuery(\r\n    {0},\r\n    {1}\r\n),", inputsCode, spectraCode);
        }

        public override PredictResponse Response
        {
            get
            {
                var pr = new PredictResponse();
                pr.ModelSpec = new ModelSpec { Name = Model };

                // Construct Tensor
                var tp = new TensorProto { Dtype = DataType.DtFloat };

                var spectraFlatten = _spectra.SelectMany(f => f).ToArray();
                // Populate with data
                tp.FloatVal.AddRange(spectraFlatten);
                tp.TensorShape = new TensorShapeProto();
                tp.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim { Size = _spectra.Length });
                tp.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim { Size = (PrositConstants.PEPTIDE_SEQ_LEN - 1) * PrositConstants.PRECURSOR_CHARGES });
                pr.Outputs[PrositIntensityModel.PrositIntensityOutput.OUTPUT_KEY] = tp;

                return pr;
            }
        }

        public override string Model => "intensity_2";

        public override void AssertMatchesQuery(PredictRequest pr)
        {
            Assert.AreEqual(Model, pr.ModelSpec.Name);

            Assert.AreEqual(pr.Inputs.Count, 3);
            var keys = pr.Inputs.Keys.OrderBy(s => s).ToArray();
            Assert.AreEqual(keys[0], PrositIntensityModel.PrositIntensityInput.COLLISION_ENERGY_KEY);
            Assert.AreEqual(keys[1], PrositIntensityModel.PrositIntensityInput.PEPTIDES_KEY);
            Assert.AreEqual(keys[2], PrositIntensityModel.PrositIntensityInput.PRECURSOR_CHARGE_KEY);

            // Sequences
            var seqs = pr.Inputs[PrositIntensityModel.PrositIntensityInput.PEPTIDES_KEY];
            Assert.AreEqual(seqs.TensorShape.Dim.Count, 2);
            Assert.AreEqual(seqs.TensorShape.Dim[0].Size, _inputs.Length);
            Assert.AreEqual(seqs.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            AssertEx.AreEqualDeep(_inputs.Select(i => i.ModifiedSequence).ToArray(),
                PrositHelpers.DecodeSequences(seqs));

            // CEs
            var ces = pr.Inputs[PrositIntensityModel.PrositIntensityInput.COLLISION_ENERGY_KEY];
            Assert.AreEqual(ces.TensorShape.Dim.Count, 2);
            Assert.AreEqual(ces.TensorShape.Dim[0].Size, _inputs.Length);
            Assert.AreEqual(ces.TensorShape.Dim[1].Size, 1);
            AssertEx.AreEqualDeep(_inputs.Select(i => i.NormalizedCollisionEnergy).ToArray(), ces.FloatVal);

            // Charges
            var charges = pr.Inputs[PrositIntensityModel.PrositIntensityInput.PRECURSOR_CHARGE_KEY];
            Assert.AreEqual(charges.TensorShape.Dim.Count, 2);
            Assert.AreEqual(charges.TensorShape.Dim[0].Size, _inputs.Length);
            Assert.AreEqual(charges.TensorShape.Dim[1].Size, PrositConstants.PRECURSOR_CHARGES);
            AssertEx.AreEqualDeep(_inputs.Select(i => i.PrecursorCharge).ToArray(), PrositHelpers.DecodeCharges(charges));
        }

        public void AssertMatchesSpectra(PrositIntensityModel.PeptidePrecursorNCE[] peptidePrecursorNCEs, SpectrumDisplayInfo[] spectrumDisplayInfos)
        {
            for (int i = 0; i < _inputs.Length; ++i)
                if (spectrumDisplayInfos[i] != null)
                    AssertMatchesSpectrum(peptidePrecursorNCEs[i], _inputs[i], _spectra[i], spectrumDisplayInfos[i]);
        }

        public void AssertMatchesSpectrum(PrositIntensityModel.PeptidePrecursorNCE peptidePrecursorNCE, SpectrumDisplayInfo spectrumDisplayInfo)
        {
            AssertMatchesSpectrum(peptidePrecursorNCE, _inputs[0], _spectra[0], spectrumDisplayInfo);
        }

        public static void AssertMatchesSpectrum(PrositIntensityModel.PeptidePrecursorNCE peptidePrecursorNCE, PrositIntensityInput input, float[] spectrum, SpectrumDisplayInfo spectrumDisplayInfo)
        {
            Assert.IsNotNull(spectrumDisplayInfo);
            Assert.AreEqual(spectrumDisplayInfo.Name, "Prosit");

            // Calculate expected number of peaks. 1 peak per residue times the number of possible charges
            var residues = FastaSequence.StripModifications(input.ModifiedSequence).Length - 1;
            var charges = Math.Min(input.PrecursorCharge, 3);
            var ionCount = 2 * residues * charges;

            Assert.AreEqual(spectrumDisplayInfo.SpectrumPeaksInfo.Peaks.Length, ionCount);
            
            // Construct a prosit output object so that we can construct a spectrum for comparison.
            // There really is no easier way to do this without rewriting a lot of code for parsing the
            // flattened intensities and adding lots of extra test code inside of Skyline code.
            var fakePrositOutputTensors = new MapField<string, TensorProto>();
            var tensor = new TensorProto();
            tensor.TensorShape = new TensorShapeProto();
            tensor.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim() { Size = 1 });
            tensor.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim() { Size = spectrum.Length });
            tensor.FloatVal.AddRange(spectrum);
            fakePrositOutputTensors[PrositIntensityModel.PrositIntensityOutput.OUTPUT_KEY] = tensor;

            var fakePrositOutput = new PrositIntensityModel.PrositIntensityOutput(fakePrositOutputTensors);
            var ms2Spectrum = new PrositMS2Spectrum(Program.MainWindow.Document.Settings,
                peptidePrecursorNCE.WithNCE((int) (input.NormalizedCollisionEnergy * 100.0f)), 0, fakePrositOutput,
                spectrumDisplayInfo.SpectrumInfo is SpectrumInfoLibrary ? IsotopeLabelType.light : null);

            // Compare the spectra
            AssertEx.AreEqualDeep(ms2Spectrum.SpectrumPeaks.Peaks, spectrumDisplayInfo.SpectrumPeaksInfo.Peaks);
        }
    }

    public class PrositRetentionTimeQuery : PrositQuery
    {
        private string[] _modifiedSequences;
        private float[] _iRTs;

        public PrositRetentionTimeQuery(string[] modifiedSequences, float[] iRTs)
        {
            _modifiedSequences = modifiedSequences;
            _iRTs = iRTs;
        }

        public static PrositRetentionTimeQuery FromTensors(PredictRequest request, PredictResponse response)
        {
            // Sequences
            var seqs = request.Inputs[PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY];
            Assert.AreEqual(seqs.TensorShape.Dim.Count, 2);
            Assert.AreEqual(seqs.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            var decodedSeqs = PrositHelpers.DecodeSequences(seqs);

            var outputs = response.Outputs[PrositRetentionTimeModel.PrositRTOutput.OUTPUT_KEY].FloatVal.ToArray();

            return new PrositRetentionTimeQuery(decodedSeqs, outputs);
        }

        public override string ToCode()
        {
            var seqsCode = string.Format("new[] {{\r\n{0}\r\n    }}",
                string.Join(",\r\n", _modifiedSequences.Select(m => string.Format("        \"{0}\"", m))));

            var iRTCode = string.Format("new[] {{\r\n{0}\r\n    }}",
                string.Join(",\r\n", _iRTs.Select(irt => string.Format("        {0:0.0000}f", irt))));

            return string.Format("new PrositRetentionTimeQuery(\r\n    {0},\r\n    {1}\r\n),", seqsCode, iRTCode);
        }

        public override void AssertMatchesQuery(PredictRequest pr)
        {
            Assert.AreEqual(Model, pr.ModelSpec.Name);
            Assert.AreEqual(pr.Inputs.Count, 1);
            Assert.AreEqual(pr.Inputs.Keys.First(), PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY);
            var tensor = pr.Inputs[PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY];
            Assert.AreEqual(tensor.TensorShape.Dim.Count, 2);
            Assert.AreEqual(tensor.TensorShape.Dim[0].Size, _modifiedSequences.Length);
            Assert.AreEqual(tensor.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            AssertEx.AreEqualDeep(_modifiedSequences,
                PrositHelpers.DecodeSequences(pr.Inputs[PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY]));
        }

        public void AssertMatchesSpectra(SpectrumDisplayInfo[] spectrumDisplayInfos)
        {
            var iRTIndex = 0;
            foreach (var info in spectrumDisplayInfos.Where(i => i != null))
            {
                if (Equals(info.LabelType, IsotopeLabelType.heavy))
                    --iRTIndex; // Reuse previous iRT, since we only made a single iRT prediction for heavy and light

                AssertMatchesSpectrum(_iRTs[iRTIndex++], info);
            }
        }

        public void AssertMatchesSpectrum(SpectrumDisplayInfo spectrumDisplayInfo)
        {
            AssertMatchesSpectrum(_iRTs[0], spectrumDisplayInfo);
        }

        public static void AssertMatchesSpectrum(float iRT, SpectrumDisplayInfo spectrumDisplayInfo)
        {
            Assert.AreEqual(
                iRT * Math.Sqrt(PrositRetentionTimeModel.PrositRTOutput.iRT_VARIANCE) +
                PrositRetentionTimeModel.PrositRTOutput.iRT_MEAN, spectrumDisplayInfo.RetentionTime);
        }

        public override string Model => "iRT";

        public override PredictResponse Response
        {
            get
            {
                var pr = new PredictResponse();
                pr.ModelSpec = new ModelSpec { Name = Model };

                // Construct Tensor
                var tp = new TensorProto { Dtype = DataType.DtFloat };

                // Populate with data
                tp.FloatVal.AddRange(_iRTs);
                tp.TensorShape = new TensorShapeProto();
                tp.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim { Size = _iRTs.Length });
                pr.Outputs[PrositRetentionTimeModel.PrositRTOutput.OUTPUT_KEY] = tp;

                return pr;
            }
        }
    }

    /// <summary>
    /// A fake prediction client for logging predictions and returning cached
    /// predictions. For logging, it needs to be constructed with a server address.
    /// For returning cached predictions, a queue of expected queries should be passed in.
    /// </summary>
    public class FakePrositPredictionClient : PrositPredictionClient
    {
        private List<PrositQuery> _expectedQueries;

        public FakePrositPredictionClient(string server) :
            base(PrositConfig.GetPrositConfig())
        {
            QueryIndex = 0;
        }

        public FakePrositPredictionClient(List<PrositQuery> expectedQueries)
        {
            _expectedQueries = expectedQueries;
            QueryIndex = 0;
        }

        public int QueryIndex { get; private set; }

        public override PredictResponse Predict(PredictRequest request, CallOptions options)
        {
            try
            {
                PrositSkylineIntegrationTest.PING_QUERY_MS2.AssertMatchesQuery(request);
                // If this is a ping ms2 request, silently return and don't log
                return PrositSkylineIntegrationTest.PING_QUERY_MS2.Response;
            }
            catch(AssertFailedException)
            {
                try
                {
                    PrositSkylineIntegrationTest.PING_QUERY_IRT.AssertMatchesQuery(request);
                    // If this is a ping irt request, silently return and don't log
                    return PrositSkylineIntegrationTest.PING_QUERY_IRT.Response;
                }
                catch
                {
                    // ignore
                }

            }

            // Logging mode
            if (_expectedQueries == null)
            {
                var response = base.Predict(request, options);
                LogQuery(request, response);
                return response;
            }

            // Caching mode
            if (QueryIndex == _expectedQueries.Count)
                Assert.Fail("Unexpected call to Predict (No more queries). Model: {0}", request.ModelSpec.Name);

            var nextQuery = _expectedQueries[QueryIndex++];
            nextQuery.AssertMatchesQuery(request);
            return nextQuery.Response;
        }

        private void LogQuery(PredictRequest request, PredictResponse response)
        {
            if (request.ModelSpec.Name.StartsWith(@"intensity"))
                Console.WriteLine(@"    " + PrositIntensityQuery.FromTensors(request, response).ToCode().Replace("\n", "\n    "));
            else if (request.ModelSpec.Name.StartsWith("iRT"))
                Console.WriteLine(@"    " +
                    PrositRetentionTimeQuery.FromTensors(request, response).ToCode().Replace("\n", "\n    "));
            else
                Assert.Fail("Unknown model \"{0}\"", request.ModelSpec.Name);
        }
    }
}