/*
 * Original author: Tobias Rohde <tobiasr .at. uw.edu>,
 *                  MacCoss Lab, Department of Genome Sciences, UW
 *
 * Copyright 2019 University of Washington - Seattle, WA
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Google.Protobuf.Collections;
using Grpc.Core;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using pwiz.Skyline;
using pwiz.Skyline.Controls;
using pwiz.Skyline.Controls.Graphs;
using pwiz.Skyline.Controls.SeqNode;
using pwiz.Skyline.Model;
using pwiz.Skyline.Model.Lib;
using pwiz.Skyline.Model.Prosit;
using pwiz.Skyline.Model.Prosit.Communication;
using pwiz.Skyline.Model.Prosit.Config;
using pwiz.Skyline.Model.Prosit.Models;
using pwiz.Skyline.Properties;
using pwiz.Skyline.SettingsUI;
using pwiz.Skyline.ToolsUI;
using pwiz.Skyline.Util;
using pwiz.SkylineTestUtil;
using Tensorflow;
using Tensorflow.Serving;

namespace pwiz.SkylineTestFunctional
{
    [TestClass]
    public class PrositSkylineIntegrationTest : AbstractFunctionalTestEx
    {
        private bool RecordData { get { return false; } }


        public static PrositQuery PING_QUERY_MS2 = new PrositIntensityQuery(
            new[]
            {
                new PrositIntensityInput("PING", 0.3200f, 1)
            },
            new[]
            {
                new[]
                {
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                    00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                }
            }
        );

        public static PrositQuery PING_QUERY_IRT = new PrositRetentionTimeQuery(
            new[]
            {
                "PING"
            },
            new[] {0.0f});

        private static List<PrositQuery> QUERIES = new List<PrositQuery>(new PrositQuery[]
        {
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2800f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.6462f, 00.0000f, 00.0052f, 00.0000f, 00.0000f, 00.0000f,
                        00.0481f, 00.0000f, 00.0190f, 00.2609f, 00.0000f, 00.0000f,
                        00.0031f, 00.0000f, 00.0860f, 00.2766f, 00.0000f, 00.0000f,
                        00.0606f, 00.0000f, 00.1441f, 00.0000f, 00.0000f, 00.0000f,
                        00.0341f, 00.0000f, 00.0769f, 00.3538f, 00.0000f, 00.0000f,
                        00.1313f, 00.0000f, 00.0446f, 00.0000f, 00.0000f, 00.0000f,
                        00.1047f, 00.0000f, 00.0000f, 00.0623f, 00.0000f, 00.0000f,
                        00.1203f, 00.0000f, 00.0002f, 00.0829f, 00.0000f, 00.0000f,
                        00.0054f, 00.0000f, 00.0000f, 00.1518f, 00.0179f, 00.0000f,
                        01.2122f, 00.0996f, 00.0856f, 00.0864f, 00.0159f, 00.0086f,
                        00.0000f, 00.0000f, 00.0968f, 00.1349f, 00.0193f, 00.0000f,
                        00.0112f, 00.4437f, 00.0848f, 00.1889f, 00.0344f, 00.0000f,
                        00.0000f, 00.0772f, 00.0844f, 00.0653f, 00.0163f, 00.0000f,
                        00.0000f, 00.0685f, 00.0959f, 00.2330f, 00.0000f, 00.0000f,
                        00.0081f, 00.2222f, 00.1793f, 00.2075f, 00.0033f, 00.0094f,
                        00.0757f, 00.2487f, 00.1889f, 00.0083f, 00.0066f, 00.0154f,
                        00.0640f, 00.2320f, 00.1659f, 00.0741f, 00.0029f, 00.0182f,
                        00.0674f, 00.1956f, 00.2280f, 00.0000f, 00.0226f, 00.0201f,
                        00.0762f, 00.1435f, 00.2334f, 00.0000f, 00.0000f, 00.0215f,
                        00.0928f, 00.1372f, 00.1918f, 00.0000f, 00.0000f, 00.0175f,
                        00.1501f, 00.1331f, 00.2328f, 00.0000f, 00.0075f, 00.0112f,
                        00.2064f, 00.1221f, 00.2546f, 00.0183f, 00.0167f, 00.0000f,
                        00.1455f, 00.0972f, 00.1552f, 00.0367f, 00.0000f, 00.0000f,
                        00.4986f, 00.1516f, 00.0506f, 00.1853f, 00.0000f, 00.0000f,
                        00.3394f, 00.1697f, 00.0730f, 00.0744f, 00.0160f, 00.0000f,
                        00.3572f, 00.1354f, 00.0830f, 00.1141f, 00.0000f, 00.0000f,
                        00.3186f, 00.1134f, 00.0722f, 00.0915f, 00.0000f, 00.0000f,
                        00.1953f, 00.1130f, 00.2348f, 00.0758f, 00.0000f, 00.0000f,
                        00.0888f, 00.1775f, 00.3485f, 00.1778f, 00.0502f, 00.0720f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "CSLPRPWALTFSYGR"
                },
                new[]
                {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2500f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.5830f, 00.0000f, 00.0187f, 00.0000f, 00.0000f, 00.0000f,
                        00.0216f, 00.0000f, 00.0255f, 00.1427f, 00.0000f, 00.0000f,
                        00.0100f, 00.0000f, 00.0913f, 00.2454f, 00.0000f, 00.0000f,
                        00.0722f, 00.0000f, 00.1459f, 00.0000f, 00.0000f, 00.0000f,
                        00.0171f, 00.0000f, 00.0866f, 00.3487f, 00.0000f, 00.0000f,
                        00.0989f, 00.0000f, 00.0557f, 00.0000f, 00.0000f, 00.0000f,
                        00.0619f, 00.0000f, 00.0060f, 00.0457f, 00.0000f, 00.0000f,
                        00.0854f, 00.0000f, 00.0122f, 00.0412f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 00.0000f, 00.1067f, 00.0027f, 00.0000f,
                        00.8993f, 00.0311f, 00.0970f, 00.0420f, 00.0037f, 00.0057f,
                        00.0000f, 00.0000f, 00.0963f, 00.0942f, 00.0090f, 00.0000f,
                        00.0335f, 00.3927f, 00.1065f, 00.1465f, 00.0252f, 00.0000f,
                        00.0000f, 00.0542f, 00.1210f, 00.0452f, 00.0121f, 00.0000f,
                        00.0000f, 00.0255f, 00.1290f, 00.2240f, 00.0000f, 00.0000f,
                        00.0185f, 00.1537f, 00.2175f, 00.2112f, 00.0137f, 00.0122f,
                        00.0794f, 00.1904f, 00.2342f, 00.0000f, 00.0029f, 00.0160f,
                        00.0874f, 00.1845f, 00.1943f, 00.0447f, 00.0000f, 00.0230f,
                        00.0764f, 00.1500f, 00.2642f, 00.0000f, 00.0096f, 00.0257f,
                        00.0827f, 00.1098f, 00.2740f, 00.0000f, 00.0000f, 00.0259f,
                        00.1191f, 00.0850f, 00.2120f, 00.0000f, 00.0000f, 00.0217f,
                        00.1671f, 00.0806f, 00.2889f, 00.0000f, 00.0062f, 00.0097f,
                        00.3111f, 00.0811f, 00.2294f, 00.0581f, 00.0000f, 00.0000f,
                        00.2472f, 00.0516f, 00.1269f, 00.0201f, 00.0000f, 00.0000f,
                        00.6905f, 00.2069f, 00.0647f, 00.3026f, 00.0000f, 00.0000f,
                        00.6349f, 00.1877f, 00.0557f, 00.0407f, 00.0000f, 00.0000f,
                        00.4823f, 00.2164f, 00.1307f, 00.2852f, 00.0000f, 00.0000f,
                        00.4782f, 00.2001f, 00.2834f, 00.0783f, 00.0000f, 00.0000f,
                        00.3489f, 00.1800f, 00.3470f, 00.3913f, 00.0000f, 00.0000f,
                        00.0000f, 00.2600f, 00.7002f, 00.4010f, 00.0523f, 00.0916f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "CSLPRPWALTFSYGR"
                },
                new[]
                {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2600f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.6077f, 00.0000f, 00.0163f, 00.0000f, 00.0000f, 00.0000f,
                        00.0282f, 00.0000f, 00.0251f, 00.1801f, 00.0000f, 00.0000f,
                        00.0023f, 00.0000f, 00.0929f, 00.2566f, 00.0000f, 00.0000f,
                        00.0642f, 00.0000f, 00.1468f, 00.0000f, 00.0000f, 00.0000f,
                        00.0213f, 00.0000f, 00.0849f, 00.3547f, 00.0000f, 00.0000f,
                        00.1086f, 00.0000f, 00.0533f, 00.0000f, 00.0000f, 00.0000f,
                        00.0755f, 00.0000f, 00.0014f, 00.0504f, 00.0000f, 00.0000f,
                        00.0947f, 00.0000f, 00.0093f, 00.0543f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 00.0000f, 00.1208f, 00.0077f, 00.0000f,
                        00.9942f, 00.0502f, 00.1003f, 00.0557f, 00.0081f, 00.0067f,
                        00.0000f, 00.0000f, 00.0990f, 00.1075f, 00.0130f, 00.0000f,
                        00.0253f, 00.4108f, 00.1019f, 00.1607f, 00.0286f, 00.0000f,
                        00.0000f, 00.0622f, 00.1116f, 00.0532f, 00.0138f, 00.0000f,
                        00.0000f, 00.0402f, 00.1134f, 00.2283f, 00.0000f, 00.0000f,
                        00.0154f, 00.1772f, 00.1996f, 00.2125f, 00.0100f, 00.0117f,
                        00.0785f, 00.2127f, 00.2158f, 00.0006f, 00.0044f, 00.0158f,
                        00.0783f, 00.2012f, 00.1818f, 00.0557f, 00.0000f, 00.0215f,
                        00.0720f, 00.1674f, 00.2520f, 00.0000f, 00.0147f, 00.0235f,
                        00.0798f, 00.1226f, 00.2660f, 00.0000f, 00.0000f, 00.0244f,
                        00.1087f, 00.1016f, 00.2075f, 00.0000f, 00.0000f, 00.0199f,
                        00.1639f, 00.0968f, 00.2731f, 00.0000f, 00.0066f, 00.0101f,
                        00.2803f, 00.0915f, 00.2380f, 00.0440f, 00.0056f, 00.0000f,
                        00.2060f, 00.0636f, 00.1335f, 00.0208f, 00.0000f, 00.0000f,
                        00.6317f, 00.1940f, 00.0560f, 00.2867f, 00.0000f, 00.0000f,
                        00.5311f, 00.1840f, 00.0545f, 00.0437f, 00.0063f, 00.0000f,
                        00.4538f, 00.1946f, 00.1143f, 00.2327f, 00.0000f, 00.0000f,
                        00.4345f, 00.1891f, 00.2464f, 00.0482f, 00.0000f, 00.0000f,
                        00.2881f, 00.1920f, 00.3373f, 00.3290f, 00.0000f, 00.0000f,
                        00.0000f, 00.2325f, 00.6021f, 00.3237f, 00.0539f, 00.0899f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "CSLPRPWALTFSYGR"
                },
                new[]
                {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2600f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.1251f, 00.0000f, 00.0043f, 00.0000f, 00.0000f, 00.0000f,
                        00.3919f, 00.0000f, 00.0081f, 00.5678f, 00.0000f, 00.0000f,
                        00.6387f, 00.0000f, 00.0170f, 00.2681f, 00.0000f, 00.0000f,
                        00.2780f, 00.0000f, 00.0000f, 00.3714f, 00.0000f, 00.0000f,
                        01.4825f, 00.0000f, 00.0000f, 00.2861f, 00.0000f, 00.0000f,
                        00.9143f, 00.0000f, 00.0000f, 00.2506f, 00.0000f, 00.0000f,
                        00.9412f, 00.0207f, 00.0000f, 00.0631f, 00.0000f, 00.0016f,
                        00.2121f, 00.0249f, 00.0322f, 00.0672f, 00.0000f, 00.0064f,
                        00.7087f, 00.1002f, 00.0000f, 00.0493f, 00.0000f, 00.0034f,
                        01.2851f, 00.0702f, 00.0000f, 00.0154f, 00.0000f, 00.0000f,
                        00.4713f, 00.1194f, 00.0488f, 00.0249f, 00.0000f, 00.0092f,
                        00.2944f, 00.1485f, 00.0343f, 00.0098f, 00.0115f, 00.0048f,
                        00.2835f, 00.1719f, 00.0000f, 00.0000f, 00.0218f, 00.0046f,
                        00.3277f, 00.2056f, 00.0112f, 00.0289f, 00.0504f, 00.0116f,
                        00.2851f, 00.1710f, 00.0530f, 00.0423f, 00.0535f, 00.0198f,
                        00.2407f, 00.1144f, 00.0925f, 00.0047f, 00.0313f, 00.0204f,
                        00.2282f, 00.0823f, 00.1356f, 00.0000f, 00.0139f, 00.0160f,
                        00.2526f, 00.0680f, 00.1460f, 00.0226f, 00.0050f, 00.0116f,
                        00.2505f, 00.0617f, 00.1643f, 00.0503f, 00.0008f, 00.0053f,
                        00.3049f, 00.0503f, 00.2027f, 00.0604f, 00.0023f, 00.0000f,
                        00.3331f, 00.0329f, 00.1310f, 00.0609f, 00.0000f, 00.0000f,
                        00.2463f, 00.0246f, 00.0763f, 00.0581f, 00.0000f, 00.0000f,
                        00.1110f, 00.0331f, 00.0916f, 00.0680f, 00.0014f, 00.0000f,
                        00.0000f, 00.0515f, 00.1539f, 00.0628f, 00.0054f, 00.0000f,
                        00.0000f, 00.0525f, 00.1722f, 00.0830f, 00.0141f, 00.0000f,
                        00.0310f, 00.0342f, 00.0964f, 00.0791f, 00.0278f, 00.0000f,
                        00.0968f, 00.0092f, 00.0070f, 00.0640f, 00.0552f, 00.0000f,
                        00.1475f, 00.0467f, 00.0000f, 00.0760f, 00.0941f, 00.0000f,
                        00.2460f, 00.1242f, 00.0535f, 00.0311f, 00.1119f, 00.0020f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "LGGEEVSVACK"
                },
                new[]
                {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2700f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.1257f, 00.0000f, 00.0040f, 00.0000f, 00.0000f, 00.0000f,
                        00.4191f, 00.0000f, 00.0073f, 00.5884f, 00.0000f, 00.0000f,
                        00.6531f, 00.0000f, 00.0098f, 00.2856f, 00.0000f, 00.0000f,
                        00.2813f, 00.0000f, 00.0000f, 00.3593f, 00.0006f, 00.0000f,
                        01.4928f, 00.0000f, 00.0000f, 00.2630f, 00.0000f, 00.0000f,
                        00.9262f, 00.0000f, 00.0000f, 00.2153f, 00.0000f, 00.0000f,
                        00.9594f, 00.0205f, 00.0000f, 00.0554f, 00.0000f, 00.0025f,
                        00.2173f, 00.0236f, 00.0273f, 00.0542f, 00.0004f, 00.0073f,
                        00.7281f, 00.0748f, 00.0000f, 00.0408f, 00.0000f, 00.0045f,
                        01.3693f, 00.0454f, 00.0000f, 00.0110f, 00.0000f, 00.0000f,
                        00.4869f, 00.0866f, 00.0452f, 00.0149f, 00.0000f, 00.0112f,
                        00.2978f, 00.1205f, 00.0374f, 00.0007f, 00.0114f, 00.0043f,
                        00.2843f, 00.1562f, 00.0000f, 00.0000f, 00.0230f, 00.0039f,
                        00.3312f, 00.1967f, 00.0053f, 00.0182f, 00.0529f, 00.0108f,
                        00.2922f, 00.1684f, 00.0471f, 00.0369f, 00.0575f, 00.0199f,
                        00.2502f, 00.1118f, 00.0844f, 00.0009f, 00.0358f, 00.0200f,
                        00.2318f, 00.0811f, 00.1231f, 00.0000f, 00.0167f, 00.0149f,
                        00.2592f, 00.0672f, 00.1409f, 00.0199f, 00.0074f, 00.0095f,
                        00.2575f, 00.0607f, 00.1522f, 00.0512f, 00.0010f, 00.0020f,
                        00.3074f, 00.0502f, 00.1832f, 00.0602f, 00.0023f, 00.0000f,
                        00.3356f, 00.0325f, 00.1174f, 00.0607f, 00.0004f, 00.0000f,
                        00.2306f, 00.0220f, 00.0745f, 00.0575f, 00.0009f, 00.0000f,
                        00.1107f, 00.0299f, 00.0832f, 00.0720f, 00.0026f, 00.0000f,
                        00.0000f, 00.0517f, 00.1511f, 00.0661f, 00.0070f, 00.0000f,
                        00.0000f, 00.0568f, 00.1755f, 00.0837f, 00.0156f, 00.0000f,
                        00.0447f, 00.0326f, 00.0909f, 00.0771f, 00.0302f, 00.0000f,
                        00.1165f, 00.0061f, 00.0013f, 00.0627f, 00.0578f, 00.0000f,
                        00.1699f, 00.0498f, 00.0000f, 00.0737f, 00.0959f, 00.0000f,
                        00.2736f, 00.1198f, 00.0496f, 00.0285f, 00.1074f, 00.0031f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "LGGEEVSVACK"
                },
                new[]
                {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2700f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2222f, 00.0000f, 00.0216f, 00.0000f, 00.0000f, 00.0000f,
                        00.5488f, 00.0000f, 00.0027f, 00.0341f, 00.0000f, 00.0000f,
                        00.4643f, 00.0000f, 00.0232f, 00.1653f, 00.0000f, 00.0000f,
                        01.1210f, 00.0000f, 00.0000f, 00.3590f, 00.0000f, 00.0000f,
                        00.5599f, 00.0000f, 00.0000f, 00.5036f, 00.0000f, 00.0000f,
                        00.4345f, 00.0000f, 00.0000f, 00.1177f, 00.0000f, 00.0000f,
                        01.3181f, 00.0000f, 00.0000f, 00.0715f, 00.0000f, 00.0000f,
                        01.8204f, 00.0102f, 00.0000f, 00.0909f, 00.0000f, 00.0000f,
                        00.8764f, 00.0263f, 00.0000f, 00.0836f, 00.0000f, 00.0000f,
                        00.6053f, 00.0485f, 00.0000f, 00.0459f, 00.0000f, 00.0064f,
                        00.0243f, 00.2193f, 00.0622f, 00.0340f, 00.0000f, 00.0061f,
                        00.0000f, 00.0069f, 00.0051f, 00.0152f, 00.0000f, 00.0112f,
                        00.0490f, 00.0543f, 00.0754f, 00.0400f, 00.0178f, 00.0210f,
                        00.1673f, 00.0810f, 00.0217f, 00.0780f, 00.0346f, 00.0200f,
                        00.2067f, 00.1737f, 00.0457f, 00.0269f, 00.0413f, 00.0290f,
                        00.2043f, 00.1116f, 00.0755f, 00.0375f, 00.0511f, 00.0418f,
                        00.1739f, 00.0911f, 00.1149f, 00.0216f, 00.0317f, 00.0423f,
                        00.1691f, 00.0842f, 00.1352f, 00.0175f, 00.0103f, 00.0340f,
                        00.1944f, 00.0627f, 00.1495f, 00.0497f, 00.0069f, 00.0216f,
                        00.2423f, 00.0545f, 00.1611f, 00.0761f, 00.0164f, 00.0110f,
                        00.2670f, 00.0438f, 00.1386f, 00.0760f, 00.0335f, 00.0091f,
                        00.2238f, 00.0296f, 00.0874f, 00.0568f, 00.0331f, 00.0119f,
                        00.1468f, 00.0211f, 00.0795f, 00.0205f, 00.0136f, 00.0150f,
                        00.0388f, 00.0236f, 00.1051f, 00.0298f, 00.0000f, 00.0123f,
                        00.0000f, 00.0271f, 00.1415f, 00.0373f, 00.0000f, 00.0032f,
                        00.0000f, 00.0224f, 00.1853f, 00.0452f, 00.0129f, 00.0000f,
                        00.0000f, 00.0172f, 00.1179f, 00.0478f, 00.0271f, 00.0000f,
                        00.0422f, 00.0475f, 00.0781f, 00.0536f, 00.0420f, 00.0000f,
                        00.1369f, 00.0929f, 00.0299f, 00.0000f, 00.0621f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "GSYNLQDLLAQAK"
                },
                new[]
                {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2800f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2228f, 00.0000f, 00.0218f, 00.0000f, 00.0000f, 00.0000f,
                        00.5515f, 00.0000f, 00.0027f, 00.0427f, 00.0000f, 00.0000f,
                        00.4695f, 00.0000f, 00.0186f, 00.1676f, 00.0000f, 00.0000f,
                        01.1469f, 00.0000f, 00.0000f, 00.3616f, 00.0000f, 00.0000f,
                        00.5819f, 00.0000f, 00.0000f, 00.4666f, 00.0000f, 00.0000f,
                        00.4595f, 00.0000f, 00.0000f, 00.1023f, 00.0000f, 00.0000f,
                        01.3380f, 00.0000f, 00.0000f, 00.0642f, 00.0000f, 00.0000f,
                        01.8074f, 00.0090f, 00.0000f, 00.0799f, 00.0000f, 00.0000f,
                        00.8862f, 00.0218f, 00.0000f, 00.0657f, 00.0000f, 00.0000f,
                        00.6142f, 00.0319f, 00.0000f, 00.0345f, 00.0000f, 00.0073f,
                        00.0243f, 00.1586f, 00.0551f, 00.0246f, 00.0000f, 00.0071f,
                        00.0000f, 00.0000f, 00.0009f, 00.0087f, 00.0000f, 00.0115f,
                        00.0472f, 00.0417f, 00.0674f, 00.0319f, 00.0162f, 00.0205f,
                        00.1676f, 00.0688f, 00.0183f, 00.0716f, 00.0345f, 00.0179f,
                        00.2081f, 00.1642f, 00.0417f, 00.0271f, 00.0428f, 00.0284f,
                        00.2109f, 00.1084f, 00.0723f, 00.0368f, 00.0521f, 00.0401f,
                        00.1776f, 00.0887f, 00.1105f, 00.0217f, 00.0332f, 00.0401f,
                        00.1745f, 00.0828f, 00.1301f, 00.0163f, 00.0119f, 00.0290f,
                        00.2024f, 00.0627f, 00.1475f, 00.0512f, 00.0091f, 00.0157f,
                        00.2487f, 00.0551f, 00.1604f, 00.0742f, 00.0203f, 00.0054f,
                        00.2699f, 00.0420f, 00.1315f, 00.0733f, 00.0382f, 00.0037f,
                        00.2188f, 00.0266f, 00.0818f, 00.0544f, 00.0367f, 00.0073f,
                        00.1405f, 00.0179f, 00.0791f, 00.0179f, 00.0151f, 00.0103f,
                        00.0345f, 00.0184f, 00.0999f, 00.0311f, 00.0000f, 00.0073f,
                        00.0000f, 00.0251f, 00.1322f, 00.0427f, 00.0000f, 00.0000f,
                        00.0000f, 00.0172f, 00.1711f, 00.0487f, 00.0127f, 00.0000f,
                        00.0000f, 00.0109f, 00.0951f, 00.0506f, 00.0269f, 00.0000f,
                        00.0603f, 00.0367f, 00.0602f, 00.0552f, 00.0433f, 00.0000f,
                        00.1520f, 00.0739f, 00.0162f, 00.0000f, 00.0571f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "GSYNLQDLLAQAK"
                },
                new[]
                {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.2800f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2001f, 00.0000f, 00.0075f, 00.0000f, 00.0000f, 00.0000f,
                        00.6741f, 00.0000f, 00.0045f, 00.3808f, 00.0000f, 00.0000f,
                        00.4529f, 00.0000f, 00.0027f, 00.3228f, 00.0000f, 00.0000f,
                        00.5212f, 00.0000f, 00.0000f, 00.2289f, 00.0009f, 00.0001f,
                        01.0849f, 00.0000f, 00.0000f, 00.2898f, 00.0000f, 00.0000f,
                        01.6378f, 00.0416f, 00.0000f, 00.0786f, 00.0000f, 00.0000f,
                        00.8101f, 00.2102f, 00.0000f, 00.0514f, 00.0000f, 00.0000f,
                        00.6873f, 00.1890f, 00.0000f, 00.0398f, 00.0000f, 00.0042f,
                        00.1427f, 00.3835f, 00.0594f, 00.0466f, 00.0000f, 00.0053f,
                        00.0705f, 00.1046f, 00.0243f, 00.0132f, 00.0000f, 00.0073f,
                        00.1122f, 00.1279f, 00.0738f, 00.0278f, 00.0000f, 00.0121f,
                        00.1488f, 00.1239f, 00.0188f, 00.0284f, 00.0101f, 00.0180f,
                        00.1614f, 00.1289f, 00.0209f, 00.0000f, 00.0234f, 00.0288f,
                        00.2013f, 00.1515f, 00.0401f, 00.0232f, 00.0348f, 00.0303f,
                        00.1740f, 00.1373f, 00.0853f, 00.0213f, 00.0334f, 00.0267f,
                        00.1708f, 00.1064f, 00.1397f, 00.0076f, 00.0246f, 00.0238f,
                        00.1927f, 00.0842f, 00.1587f, 00.0172f, 00.0164f, 00.0194f,
                        00.2296f, 00.0723f, 00.1648f, 00.0400f, 00.0107f, 00.0174f,
                        00.2553f, 00.0654f, 00.1777f, 00.0861f, 00.0106f, 00.0136f,
                        00.2335f, 00.0572f, 00.1971f, 00.0886f, 00.0077f, 00.0114f,
                        00.1800f, 00.0507f, 00.2045f, 00.0475f, 00.0000f, 00.0118f,
                        00.0000f, 00.0504f, 00.2612f, 00.0425f, 00.0000f, 00.0156f,
                        00.0000f, 00.0686f, 00.2467f, 00.0685f, 00.0018f, 00.0061f,
                        00.0000f, 00.0810f, 00.2641f, 00.0806f, 00.0221f, 00.0000f,
                        00.0000f, 00.0556f, 00.1427f, 00.0839f, 00.0265f, 00.0000f,
                        00.1853f, 00.0624f, 00.0000f, 00.0597f, 00.0363f, 00.0000f,
                        00.2176f, 00.0947f, 00.0000f, 00.0438f, 00.0518f, 00.0000f,
                        00.2753f, 00.1264f, 00.0000f, 00.0443f, 00.0611f, 00.0000f,
                        00.2349f, 00.1835f, 00.0329f, 00.0167f, 00.0738f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[]
                {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.2900f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2269f, 00.0000f, 00.0046f, 00.0000f, 00.0000f, 00.0000f,
                        00.6578f, 00.0000f, 00.0000f, 00.4145f, 00.0000f, 00.0000f,
                        00.4566f, 00.0000f, 00.0000f, 00.3164f, 00.0000f, 00.0000f,
                        00.5774f, 00.0000f, 00.0000f, 00.2119f, 00.0013f, 00.0011f,
                        01.1391f, 00.0000f, 00.0000f, 00.2512f, 00.0000f, 00.0000f,
                        01.6669f, 00.0455f, 00.0000f, 00.0628f, 00.0000f, 00.0000f,
                        00.8299f, 00.2046f, 00.0000f, 00.0413f, 00.0000f, 00.0000f,
                        00.6934f, 00.1543f, 00.0000f, 00.0290f, 00.0000f, 00.0043f,
                        00.1387f, 00.2774f, 00.0474f, 00.0338f, 00.0000f, 00.0054f,
                        00.0662f, 00.0772f, 00.0148f, 00.0049f, 00.0000f, 00.0065f,
                        00.1031f, 00.0994f, 00.0692f, 00.0136f, 00.0000f, 00.0105f,
                        00.1448f, 00.1055f, 00.0177f, 00.0208f, 00.0099f, 00.0143f,
                        00.1587f, 00.1164f, 00.0214f, 00.0000f, 00.0246f, 00.0241f,
                        00.1986f, 00.1404f, 00.0440f, 00.0191f, 00.0363f, 00.0257f,
                        00.1739f, 00.1290f, 00.0881f, 00.0138f, 00.0335f, 00.0213f,
                        00.1731f, 00.0997f, 00.1354f, 00.0000f, 00.0217f, 00.0186f,
                        00.1958f, 00.0767f, 00.1508f, 00.0100f, 00.0127f, 00.0149f,
                        00.2294f, 00.0644f, 00.1495f, 00.0401f, 00.0076f, 00.0140f,
                        00.2461f, 00.0578f, 00.1503f, 00.0760f, 00.0076f, 00.0125f,
                        00.2324f, 00.0499f, 00.1589f, 00.0662f, 00.0022f, 00.0118f,
                        00.1869f, 00.0404f, 00.1765f, 00.0441f, 00.0000f, 00.0121f,
                        00.0000f, 00.0449f, 00.2472f, 00.0473f, 00.0000f, 00.0139f,
                        00.0000f, 00.0608f, 00.2718f, 00.0706f, 00.0022f, 00.0000f,
                        00.0000f, 00.0653f, 00.2894f, 00.0878f, 00.0212f, 00.0000f,
                        00.0000f, 00.0729f, 00.1649f, 00.0890f, 00.0250f, 00.0000f,
                        00.1639f, 00.0871f, 00.0104f, 00.0644f, 00.0330f, 00.0000f,
                        00.2272f, 00.0854f, 00.0020f, 00.0522f, 00.0407f, 00.0000f,
                        00.2954f, 00.1215f, 00.0146f, 00.0508f, 00.0454f, 00.0000f,
                        00.2318f, 00.1913f, 00.0668f, 00.0299f, 00.0681f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[]
                {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2500f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.5830f, 00.0000f, 00.0187f, 00.0000f, 00.0000f, 00.0000f,
                        00.0216f, 00.0000f, 00.0255f, 00.1427f, 00.0000f, 00.0000f,
                        00.0100f, 00.0000f, 00.0913f, 00.2454f, 00.0000f, 00.0000f,
                        00.0722f, 00.0000f, 00.1459f, 00.0000f, 00.0000f, 00.0000f,
                        00.0171f, 00.0000f, 00.0866f, 00.3487f, 00.0000f, 00.0000f,
                        00.0989f, 00.0000f, 00.0557f, 00.0000f, 00.0000f, 00.0000f,
                        00.0619f, 00.0000f, 00.0060f, 00.0457f, 00.0000f, 00.0000f,
                        00.0854f, 00.0000f, 00.0122f, 00.0412f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 00.0000f, 00.1067f, 00.0027f, 00.0000f,
                        00.8993f, 00.0311f, 00.0970f, 00.0420f, 00.0037f, 00.0057f,
                        00.0000f, 00.0000f, 00.0963f, 00.0942f, 00.0090f, 00.0000f,
                        00.0335f, 00.3927f, 00.1065f, 00.1465f, 00.0252f, 00.0000f,
                        00.0000f, 00.0542f, 00.1210f, 00.0452f, 00.0121f, 00.0000f,
                        00.0000f, 00.0255f, 00.1290f, 00.2240f, 00.0000f, 00.0000f,
                        00.0185f, 00.1537f, 00.2175f, 00.2112f, 00.0137f, 00.0122f,
                        00.0794f, 00.1904f, 00.2342f, 00.0000f, 00.0029f, 00.0160f,
                        00.0874f, 00.1845f, 00.1943f, 00.0447f, 00.0000f, 00.0230f,
                        00.0764f, 00.1500f, 00.2642f, 00.0000f, 00.0096f, 00.0257f,
                        00.0827f, 00.1098f, 00.2740f, 00.0000f, 00.0000f, 00.0259f,
                        00.1191f, 00.0850f, 00.2120f, 00.0000f, 00.0000f, 00.0217f,
                        00.1671f, 00.0806f, 00.2889f, 00.0000f, 00.0062f, 00.0097f,
                        00.3111f, 00.0811f, 00.2294f, 00.0581f, 00.0000f, 00.0000f,
                        00.2472f, 00.0516f, 00.1269f, 00.0201f, 00.0000f, 00.0000f,
                        00.6905f, 00.2069f, 00.0647f, 00.3026f, 00.0000f, 00.0000f,
                        00.6349f, 00.1877f, 00.0557f, 00.0407f, 00.0000f, 00.0000f,
                        00.4823f, 00.2164f, 00.1307f, 00.2852f, 00.0000f, 00.0000f,
                        00.4782f, 00.2001f, 00.2834f, 00.0783f, 00.0000f, 00.0000f,
                        00.3489f, 00.1800f, 00.3470f, 00.3913f, 00.0000f, 00.0000f,
                        00.0000f, 00.2600f, 00.7002f, 00.4010f, 00.0523f, 00.0916f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "CSLPRPWALTFSYGR"
                },
                new[]
                {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.2600f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.6077f, 00.0000f, 00.0163f, 00.0000f, 00.0000f, 00.0000f,
                        00.0282f, 00.0000f, 00.0251f, 00.1801f, 00.0000f, 00.0000f,
                        00.0023f, 00.0000f, 00.0929f, 00.2566f, 00.0000f, 00.0000f,
                        00.0642f, 00.0000f, 00.1468f, 00.0000f, 00.0000f, 00.0000f,
                        00.0213f, 00.0000f, 00.0849f, 00.3547f, 00.0000f, 00.0000f,
                        00.1086f, 00.0000f, 00.0533f, 00.0000f, 00.0000f, 00.0000f,
                        00.0755f, 00.0000f, 00.0014f, 00.0504f, 00.0000f, 00.0000f,
                        00.0947f, 00.0000f, 00.0093f, 00.0543f, 00.0000f, 00.0000f,
                        00.0000f, 00.0000f, 00.0000f, 00.1208f, 00.0077f, 00.0000f,
                        00.9942f, 00.0502f, 00.1003f, 00.0557f, 00.0081f, 00.0067f,
                        00.0000f, 00.0000f, 00.0990f, 00.1075f, 00.0130f, 00.0000f,
                        00.0253f, 00.4108f, 00.1019f, 00.1607f, 00.0286f, 00.0000f,
                        00.0000f, 00.0622f, 00.1116f, 00.0532f, 00.0138f, 00.0000f,
                        00.0000f, 00.0402f, 00.1134f, 00.2283f, 00.0000f, 00.0000f,
                        00.0154f, 00.1772f, 00.1996f, 00.2125f, 00.0100f, 00.0117f,
                        00.0785f, 00.2127f, 00.2158f, 00.0006f, 00.0044f, 00.0158f,
                        00.0783f, 00.2012f, 00.1818f, 00.0557f, 00.0000f, 00.0215f,
                        00.0720f, 00.1674f, 00.2520f, 00.0000f, 00.0147f, 00.0235f,
                        00.0798f, 00.1226f, 00.2660f, 00.0000f, 00.0000f, 00.0244f,
                        00.1087f, 00.1016f, 00.2075f, 00.0000f, 00.0000f, 00.0199f,
                        00.1639f, 00.0968f, 00.2731f, 00.0000f, 00.0066f, 00.0101f,
                        00.2803f, 00.0915f, 00.2380f, 00.0440f, 00.0056f, 00.0000f,
                        00.2060f, 00.0636f, 00.1335f, 00.0208f, 00.0000f, 00.0000f,
                        00.6317f, 00.1940f, 00.0560f, 00.2867f, 00.0000f, 00.0000f,
                        00.5311f, 00.1840f, 00.0545f, 00.0437f, 00.0063f, 00.0000f,
                        00.4538f, 00.1946f, 00.1143f, 00.2327f, 00.0000f, 00.0000f,
                        00.4345f, 00.1891f, 00.2464f, 00.0482f, 00.0000f, 00.0000f,
                        00.2881f, 00.1920f, 00.3373f, 00.3290f, 00.0000f, 00.0000f,
                        00.0000f, 00.2325f, 00.6021f, 00.3237f, 00.0539f, 00.0899f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "CSLPRPWALTFSYGR"
                },
                new[]
                {
                    1.2758f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2600f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.1251f, 00.0000f, 00.0043f, 00.0000f, 00.0000f, 00.0000f,
                        00.3919f, 00.0000f, 00.0081f, 00.5678f, 00.0000f, 00.0000f,
                        00.6387f, 00.0000f, 00.0170f, 00.2681f, 00.0000f, 00.0000f,
                        00.2780f, 00.0000f, 00.0000f, 00.3714f, 00.0000f, 00.0000f,
                        01.4825f, 00.0000f, 00.0000f, 00.2861f, 00.0000f, 00.0000f,
                        00.9143f, 00.0000f, 00.0000f, 00.2506f, 00.0000f, 00.0000f,
                        00.9412f, 00.0207f, 00.0000f, 00.0631f, 00.0000f, 00.0016f,
                        00.2121f, 00.0249f, 00.0322f, 00.0672f, 00.0000f, 00.0064f,
                        00.7087f, 00.1002f, 00.0000f, 00.0493f, 00.0000f, 00.0034f,
                        01.2851f, 00.0702f, 00.0000f, 00.0154f, 00.0000f, 00.0000f,
                        00.4713f, 00.1194f, 00.0488f, 00.0249f, 00.0000f, 00.0092f,
                        00.2944f, 00.1485f, 00.0343f, 00.0098f, 00.0115f, 00.0048f,
                        00.2835f, 00.1719f, 00.0000f, 00.0000f, 00.0218f, 00.0046f,
                        00.3277f, 00.2056f, 00.0112f, 00.0289f, 00.0504f, 00.0116f,
                        00.2851f, 00.1710f, 00.0530f, 00.0423f, 00.0535f, 00.0198f,
                        00.2407f, 00.1144f, 00.0925f, 00.0047f, 00.0313f, 00.0204f,
                        00.2282f, 00.0823f, 00.1356f, 00.0000f, 00.0139f, 00.0160f,
                        00.2526f, 00.0680f, 00.1460f, 00.0226f, 00.0050f, 00.0116f,
                        00.2505f, 00.0617f, 00.1643f, 00.0503f, 00.0008f, 00.0053f,
                        00.3049f, 00.0503f, 00.2027f, 00.0604f, 00.0023f, 00.0000f,
                        00.3331f, 00.0329f, 00.1310f, 00.0609f, 00.0000f, 00.0000f,
                        00.2463f, 00.0246f, 00.0763f, 00.0581f, 00.0000f, 00.0000f,
                        00.1110f, 00.0331f, 00.0916f, 00.0680f, 00.0014f, 00.0000f,
                        00.0000f, 00.0515f, 00.1539f, 00.0628f, 00.0054f, 00.0000f,
                        00.0000f, 00.0525f, 00.1722f, 00.0830f, 00.0141f, 00.0000f,
                        00.0310f, 00.0342f, 00.0964f, 00.0791f, 00.0278f, 00.0000f,
                        00.0968f, 00.0092f, 00.0070f, 00.0640f, 00.0552f, 00.0000f,
                        00.1475f, 00.0467f, 00.0000f, 00.0760f, 00.0941f, 00.0000f,
                        00.2460f, 00.1242f, 00.0535f, 00.0311f, 00.1119f, 00.0020f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "LGGEEVSVACK"
                },
                new[]
                {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2700f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.1257f, 00.0000f, 00.0040f, 00.0000f, 00.0000f, 00.0000f,
                        00.4191f, 00.0000f, 00.0073f, 00.5884f, 00.0000f, 00.0000f,
                        00.6531f, 00.0000f, 00.0098f, 00.2856f, 00.0000f, 00.0000f,
                        00.2813f, 00.0000f, 00.0000f, 00.3593f, 00.0006f, 00.0000f,
                        01.4928f, 00.0000f, 00.0000f, 00.2630f, 00.0000f, 00.0000f,
                        00.9262f, 00.0000f, 00.0000f, 00.2153f, 00.0000f, 00.0000f,
                        00.9594f, 00.0205f, 00.0000f, 00.0554f, 00.0000f, 00.0025f,
                        00.2173f, 00.0236f, 00.0273f, 00.0542f, 00.0004f, 00.0073f,
                        00.7281f, 00.0748f, 00.0000f, 00.0408f, 00.0000f, 00.0045f,
                        01.3693f, 00.0454f, 00.0000f, 00.0110f, 00.0000f, 00.0000f,
                        00.4869f, 00.0866f, 00.0452f, 00.0149f, 00.0000f, 00.0112f,
                        00.2978f, 00.1205f, 00.0374f, 00.0007f, 00.0114f, 00.0043f,
                        00.2843f, 00.1562f, 00.0000f, 00.0000f, 00.0230f, 00.0039f,
                        00.3312f, 00.1967f, 00.0053f, 00.0182f, 00.0529f, 00.0108f,
                        00.2922f, 00.1684f, 00.0471f, 00.0369f, 00.0575f, 00.0199f,
                        00.2502f, 00.1118f, 00.0844f, 00.0009f, 00.0358f, 00.0200f,
                        00.2318f, 00.0811f, 00.1231f, 00.0000f, 00.0167f, 00.0149f,
                        00.2592f, 00.0672f, 00.1409f, 00.0199f, 00.0074f, 00.0095f,
                        00.2575f, 00.0607f, 00.1522f, 00.0512f, 00.0010f, 00.0020f,
                        00.3074f, 00.0502f, 00.1832f, 00.0602f, 00.0023f, 00.0000f,
                        00.3356f, 00.0325f, 00.1174f, 00.0607f, 00.0004f, 00.0000f,
                        00.2306f, 00.0220f, 00.0745f, 00.0575f, 00.0009f, 00.0000f,
                        00.1107f, 00.0299f, 00.0832f, 00.0720f, 00.0026f, 00.0000f,
                        00.0000f, 00.0517f, 00.1511f, 00.0661f, 00.0070f, 00.0000f,
                        00.0000f, 00.0568f, 00.1755f, 00.0837f, 00.0156f, 00.0000f,
                        00.0447f, 00.0326f, 00.0909f, 00.0771f, 00.0302f, 00.0000f,
                        00.1165f, 00.0061f, 00.0013f, 00.0627f, 00.0578f, 00.0000f,
                        00.1699f, 00.0498f, 00.0000f, 00.0737f, 00.0959f, 00.0000f,
                        00.2736f, 00.1198f, 00.0496f, 00.0285f, 00.1074f, 00.0031f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "LGGEEVSVACK"
                },
                new[]
                {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2700f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2222f, 00.0000f, 00.0216f, 00.0000f, 00.0000f, 00.0000f,
                        00.5488f, 00.0000f, 00.0027f, 00.0341f, 00.0000f, 00.0000f,
                        00.4643f, 00.0000f, 00.0232f, 00.1653f, 00.0000f, 00.0000f,
                        01.1210f, 00.0000f, 00.0000f, 00.3590f, 00.0000f, 00.0000f,
                        00.5599f, 00.0000f, 00.0000f, 00.5036f, 00.0000f, 00.0000f,
                        00.4345f, 00.0000f, 00.0000f, 00.1177f, 00.0000f, 00.0000f,
                        01.3181f, 00.0000f, 00.0000f, 00.0715f, 00.0000f, 00.0000f,
                        01.8204f, 00.0102f, 00.0000f, 00.0909f, 00.0000f, 00.0000f,
                        00.8764f, 00.0263f, 00.0000f, 00.0836f, 00.0000f, 00.0000f,
                        00.6053f, 00.0485f, 00.0000f, 00.0459f, 00.0000f, 00.0064f,
                        00.0243f, 00.2193f, 00.0622f, 00.0340f, 00.0000f, 00.0061f,
                        00.0000f, 00.0069f, 00.0051f, 00.0152f, 00.0000f, 00.0112f,
                        00.0490f, 00.0543f, 00.0754f, 00.0400f, 00.0178f, 00.0210f,
                        00.1673f, 00.0810f, 00.0217f, 00.0780f, 00.0346f, 00.0200f,
                        00.2067f, 00.1737f, 00.0457f, 00.0269f, 00.0413f, 00.0290f,
                        00.2043f, 00.1116f, 00.0755f, 00.0375f, 00.0511f, 00.0418f,
                        00.1739f, 00.0911f, 00.1149f, 00.0216f, 00.0317f, 00.0423f,
                        00.1691f, 00.0842f, 00.1352f, 00.0175f, 00.0103f, 00.0340f,
                        00.1944f, 00.0627f, 00.1495f, 00.0497f, 00.0069f, 00.0216f,
                        00.2423f, 00.0545f, 00.1611f, 00.0761f, 00.0164f, 00.0110f,
                        00.2670f, 00.0438f, 00.1386f, 00.0760f, 00.0335f, 00.0091f,
                        00.2238f, 00.0296f, 00.0874f, 00.0568f, 00.0331f, 00.0119f,
                        00.1468f, 00.0211f, 00.0795f, 00.0205f, 00.0136f, 00.0150f,
                        00.0388f, 00.0236f, 00.1051f, 00.0298f, 00.0000f, 00.0123f,
                        00.0000f, 00.0271f, 00.1415f, 00.0373f, 00.0000f, 00.0032f,
                        00.0000f, 00.0224f, 00.1853f, 00.0452f, 00.0129f, 00.0000f,
                        00.0000f, 00.0172f, 00.1179f, 00.0478f, 00.0271f, 00.0000f,
                        00.0422f, 00.0475f, 00.0781f, 00.0536f, 00.0420f, 00.0000f,
                        00.1369f, 00.0929f, 00.0299f, 00.0000f, 00.0621f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "GSYNLQDLLAQAK"
                },
                new[]
                {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2800f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2228f, 00.0000f, 00.0218f, 00.0000f, 00.0000f, 00.0000f,
                        00.5515f, 00.0000f, 00.0027f, 00.0427f, 00.0000f, 00.0000f,
                        00.4695f, 00.0000f, 00.0186f, 00.1676f, 00.0000f, 00.0000f,
                        01.1469f, 00.0000f, 00.0000f, 00.3616f, 00.0000f, 00.0000f,
                        00.5819f, 00.0000f, 00.0000f, 00.4666f, 00.0000f, 00.0000f,
                        00.4595f, 00.0000f, 00.0000f, 00.1023f, 00.0000f, 00.0000f,
                        01.3380f, 00.0000f, 00.0000f, 00.0642f, 00.0000f, 00.0000f,
                        01.8074f, 00.0090f, 00.0000f, 00.0799f, 00.0000f, 00.0000f,
                        00.8862f, 00.0218f, 00.0000f, 00.0657f, 00.0000f, 00.0000f,
                        00.6142f, 00.0319f, 00.0000f, 00.0345f, 00.0000f, 00.0073f,
                        00.0243f, 00.1586f, 00.0551f, 00.0246f, 00.0000f, 00.0071f,
                        00.0000f, 00.0000f, 00.0009f, 00.0087f, 00.0000f, 00.0115f,
                        00.0472f, 00.0417f, 00.0674f, 00.0319f, 00.0162f, 00.0205f,
                        00.1676f, 00.0688f, 00.0183f, 00.0716f, 00.0345f, 00.0179f,
                        00.2081f, 00.1642f, 00.0417f, 00.0271f, 00.0428f, 00.0284f,
                        00.2109f, 00.1084f, 00.0723f, 00.0368f, 00.0521f, 00.0401f,
                        00.1776f, 00.0887f, 00.1105f, 00.0217f, 00.0332f, 00.0401f,
                        00.1745f, 00.0828f, 00.1301f, 00.0163f, 00.0119f, 00.0290f,
                        00.2024f, 00.0627f, 00.1475f, 00.0512f, 00.0091f, 00.0157f,
                        00.2487f, 00.0551f, 00.1604f, 00.0742f, 00.0203f, 00.0054f,
                        00.2699f, 00.0420f, 00.1315f, 00.0733f, 00.0382f, 00.0037f,
                        00.2188f, 00.0266f, 00.0818f, 00.0544f, 00.0367f, 00.0073f,
                        00.1405f, 00.0179f, 00.0791f, 00.0179f, 00.0151f, 00.0103f,
                        00.0345f, 00.0184f, 00.0999f, 00.0311f, 00.0000f, 00.0073f,
                        00.0000f, 00.0251f, 00.1322f, 00.0427f, 00.0000f, 00.0000f,
                        00.0000f, 00.0172f, 00.1711f, 00.0487f, 00.0127f, 00.0000f,
                        00.0000f, 00.0109f, 00.0951f, 00.0506f, 00.0269f, 00.0000f,
                        00.0603f, 00.0367f, 00.0602f, 00.0552f, 00.0433f, 00.0000f,
                        00.1520f, 00.0739f, 00.0162f, 00.0000f, 00.0571f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "GSYNLQDLLAQAK"
                },
                new[]
                {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2800f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2228f, 00.0000f, 00.0218f, 00.0000f, 00.0000f, 00.0000f,
                        00.5515f, 00.0000f, 00.0027f, 00.0427f, 00.0000f, 00.0000f,
                        00.4695f, 00.0000f, 00.0186f, 00.1676f, 00.0000f, 00.0000f,
                        01.1469f, 00.0000f, 00.0000f, 00.3616f, 00.0000f, 00.0000f,
                        00.5819f, 00.0000f, 00.0000f, 00.4666f, 00.0000f, 00.0000f,
                        00.4595f, 00.0000f, 00.0000f, 00.1023f, 00.0000f, 00.0000f,
                        01.3380f, 00.0000f, 00.0000f, 00.0642f, 00.0000f, 00.0000f,
                        01.8074f, 00.0090f, 00.0000f, 00.0799f, 00.0000f, 00.0000f,
                        00.8862f, 00.0218f, 00.0000f, 00.0657f, 00.0000f, 00.0000f,
                        00.6142f, 00.0319f, 00.0000f, 00.0345f, 00.0000f, 00.0073f,
                        00.0243f, 00.1586f, 00.0551f, 00.0246f, 00.0000f, 00.0071f,
                        00.0000f, 00.0000f, 00.0009f, 00.0087f, 00.0000f, 00.0115f,
                        00.0472f, 00.0417f, 00.0674f, 00.0319f, 00.0162f, 00.0205f,
                        00.1676f, 00.0688f, 00.0183f, 00.0716f, 00.0345f, 00.0179f,
                        00.2081f, 00.1642f, 00.0417f, 00.0271f, 00.0428f, 00.0284f,
                        00.2109f, 00.1084f, 00.0723f, 00.0368f, 00.0521f, 00.0401f,
                        00.1776f, 00.0887f, 00.1105f, 00.0217f, 00.0332f, 00.0401f,
                        00.1745f, 00.0828f, 00.1301f, 00.0163f, 00.0119f, 00.0290f,
                        00.2024f, 00.0627f, 00.1475f, 00.0512f, 00.0091f, 00.0157f,
                        00.2487f, 00.0551f, 00.1604f, 00.0742f, 00.0203f, 00.0054f,
                        00.2699f, 00.0420f, 00.1315f, 00.0733f, 00.0382f, 00.0037f,
                        00.2188f, 00.0266f, 00.0818f, 00.0544f, 00.0367f, 00.0073f,
                        00.1405f, 00.0179f, 00.0791f, 00.0179f, 00.0151f, 00.0103f,
                        00.0345f, 00.0184f, 00.0999f, 00.0311f, 00.0000f, 00.0073f,
                        00.0000f, 00.0251f, 00.1322f, 00.0427f, 00.0000f, 00.0000f,
                        00.0000f, 00.0172f, 00.1711f, 00.0487f, 00.0127f, 00.0000f,
                        00.0000f, 00.0109f, 00.0951f, 00.0506f, 00.0269f, 00.0000f,
                        00.0603f, 00.0367f, 00.0602f, 00.0552f, 00.0433f, 00.0000f,
                        00.1520f, 00.0739f, 00.0162f, 00.0000f, 00.0571f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "GSYNLQDLLAQAK"
                },
                new[]
                {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2900f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2425f, 00.0000f, 00.0244f, 00.0000f, 00.0000f, 00.0000f,
                        00.5506f, 00.0000f, 00.0000f, 00.0501f, 00.0000f, 00.0000f,
                        00.4761f, 00.0000f, 00.0034f, 00.1620f, 00.0000f, 00.0000f,
                        01.1821f, 00.0000f, 00.0000f, 00.3413f, 00.0010f, 00.0000f,
                        00.6041f, 00.0000f, 00.0000f, 00.3995f, 00.0000f, 00.0000f,
                        00.4869f, 00.0000f, 00.0000f, 00.0820f, 00.0000f, 00.0000f,
                        01.3484f, 00.0000f, 00.0000f, 00.0521f, 00.0000f, 00.0000f,
                        01.7696f, 00.0056f, 00.0000f, 00.0635f, 00.0000f, 00.0000f,
                        00.8861f, 00.0151f, 00.0000f, 00.0471f, 00.0000f, 00.0000f,
                        00.6096f, 00.0155f, 00.0000f, 00.0212f, 00.0000f, 00.0076f,
                        00.0139f, 00.0977f, 00.0420f, 00.0113f, 00.0000f, 00.0075f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0107f,
                        00.0443f, 00.0260f, 00.0651f, 00.0187f, 00.0148f, 00.0170f,
                        00.1673f, 00.0518f, 00.0199f, 00.0648f, 00.0349f, 00.0151f,
                        00.2039f, 00.1476f, 00.0527f, 00.0219f, 00.0460f, 00.0256f,
                        00.2123f, 00.1012f, 00.0861f, 00.0289f, 00.0541f, 00.0351f,
                        00.1822f, 00.0853f, 00.1262f, 00.0104f, 00.0340f, 00.0354f,
                        00.1777f, 00.0755f, 00.1392f, 00.0065f, 00.0111f, 00.0245f,
                        00.1950f, 00.0527f, 00.1436f, 00.0538f, 00.0058f, 00.0135f,
                        00.2195f, 00.0447f, 00.1400f, 00.0653f, 00.0140f, 00.0080f,
                        00.2346f, 00.0343f, 00.1001f, 00.0442f, 00.0228f, 00.0076f,
                        00.2198f, 00.0215f, 00.0511f, 00.0421f, 00.0146f, 00.0074f,
                        00.1670f, 00.0123f, 00.0429f, 00.0392f, 00.0013f, 00.0014f,
                        00.0415f, 00.0110f, 00.0821f, 00.0434f, 00.0000f, 00.0000f,
                        00.0000f, 00.0058f, 00.1566f, 00.0584f, 00.0000f, 00.0000f,
                        00.0000f, 00.0147f, 00.1425f, 00.0630f, 00.0096f, 00.0000f,
                        00.0000f, 00.0155f, 00.0551f, 00.0675f, 00.0239f, 00.0000f,
                        00.0799f, 00.0405f, 00.0424f, 00.0578f, 00.0304f, 00.0000f,
                        00.1844f, 00.1147f, 00.0701f, 00.0419f, 00.0582f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "GSYNLQDLLAQAK"
                },
                new[]
                {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.2900f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2269f, 00.0000f, 00.0046f, 00.0000f, 00.0000f, 00.0000f,
                        00.6578f, 00.0000f, 00.0000f, 00.4145f, 00.0000f, 00.0000f,
                        00.4566f, 00.0000f, 00.0000f, 00.3164f, 00.0000f, 00.0000f,
                        00.5774f, 00.0000f, 00.0000f, 00.2119f, 00.0013f, 00.0011f,
                        01.1391f, 00.0000f, 00.0000f, 00.2512f, 00.0000f, 00.0000f,
                        01.6669f, 00.0455f, 00.0000f, 00.0628f, 00.0000f, 00.0000f,
                        00.8299f, 00.2046f, 00.0000f, 00.0413f, 00.0000f, 00.0000f,
                        00.6934f, 00.1543f, 00.0000f, 00.0290f, 00.0000f, 00.0043f,
                        00.1387f, 00.2774f, 00.0474f, 00.0338f, 00.0000f, 00.0054f,
                        00.0662f, 00.0772f, 00.0148f, 00.0049f, 00.0000f, 00.0065f,
                        00.1031f, 00.0994f, 00.0692f, 00.0136f, 00.0000f, 00.0105f,
                        00.1448f, 00.1055f, 00.0177f, 00.0208f, 00.0099f, 00.0143f,
                        00.1587f, 00.1164f, 00.0214f, 00.0000f, 00.0246f, 00.0241f,
                        00.1986f, 00.1404f, 00.0440f, 00.0191f, 00.0363f, 00.0257f,
                        00.1739f, 00.1290f, 00.0881f, 00.0138f, 00.0335f, 00.0213f,
                        00.1731f, 00.0997f, 00.1354f, 00.0000f, 00.0217f, 00.0186f,
                        00.1958f, 00.0767f, 00.1508f, 00.0100f, 00.0127f, 00.0149f,
                        00.2294f, 00.0644f, 00.1495f, 00.0401f, 00.0076f, 00.0140f,
                        00.2461f, 00.0578f, 00.1503f, 00.0760f, 00.0076f, 00.0125f,
                        00.2324f, 00.0499f, 00.1589f, 00.0662f, 00.0022f, 00.0118f,
                        00.1869f, 00.0404f, 00.1765f, 00.0441f, 00.0000f, 00.0121f,
                        00.0000f, 00.0449f, 00.2472f, 00.0473f, 00.0000f, 00.0139f,
                        00.0000f, 00.0608f, 00.2718f, 00.0706f, 00.0022f, 00.0000f,
                        00.0000f, 00.0653f, 00.2894f, 00.0878f, 00.0212f, 00.0000f,
                        00.0000f, 00.0729f, 00.1649f, 00.0890f, 00.0250f, 00.0000f,
                        00.1639f, 00.0871f, 00.0104f, 00.0644f, 00.0330f, 00.0000f,
                        00.2272f, 00.0854f, 00.0020f, 00.0522f, 00.0407f, 00.0000f,
                        00.2954f, 00.1215f, 00.0146f, 00.0508f, 00.0454f, 00.0000f,
                        00.2318f, 00.1913f, 00.0668f, 00.0299f, 00.0681f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[]
                {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.3000f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2502f, 00.0000f, 00.0027f, 00.0000f, 00.0000f, 00.0000f,
                        00.6503f, 00.0000f, 00.0000f, 00.4567f, 00.0000f, 00.0000f,
                        00.4638f, 00.0000f, 00.0000f, 00.3079f, 00.0000f, 00.0000f,
                        00.6495f, 00.0000f, 00.0000f, 00.1937f, 00.0016f, 00.0008f,
                        01.1949f, 00.0000f, 00.0000f, 00.2121f, 00.0000f, 00.0000f,
                        01.6636f, 00.0489f, 00.0000f, 00.0475f, 00.0000f, 00.0000f,
                        00.8235f, 00.1841f, 00.0000f, 00.0309f, 00.0000f, 00.0000f,
                        00.6736f, 00.1113f, 00.0000f, 00.0175f, 00.0000f, 00.0050f,
                        00.1290f, 00.1707f, 00.0327f, 00.0197f, 00.0000f, 00.0055f,
                        00.0628f, 00.0470f, 00.0039f, 00.0000f, 00.0000f, 00.0060f,
                        00.0908f, 00.0638f, 00.0609f, 00.0002f, 00.0000f, 00.0094f,
                        00.1393f, 00.0824f, 00.0175f, 00.0156f, 00.0089f, 00.0121f,
                        00.1505f, 00.0996f, 00.0216f, 00.0000f, 00.0246f, 00.0197f,
                        00.1855f, 00.1174f, 00.0501f, 00.0195f, 00.0366f, 00.0207f,
                        00.1662f, 00.1099f, 00.0932f, 00.0100f, 00.0314f, 00.0160f,
                        00.1682f, 00.0874f, 00.1256f, 00.0000f, 00.0173f, 00.0140f,
                        00.1880f, 00.0667f, 00.1273f, 00.0097f, 00.0080f, 00.0112f,
                        00.2094f, 00.0578f, 00.1208f, 00.0395f, 00.0042f, 00.0113f,
                        00.2274f, 00.0553f, 00.1163f, 00.0555f, 00.0044f, 00.0109f,
                        00.2371f, 00.0467f, 00.1136f, 00.0526f, 00.0000f, 00.0097f,
                        00.1991f, 00.0314f, 00.1402f, 00.0540f, 00.0000f, 00.0073f,
                        00.0001f, 00.0396f, 00.2207f, 00.0643f, 00.0000f, 00.0067f,
                        00.0000f, 00.0518f, 00.2796f, 00.0797f, 00.0046f, 00.0000f,
                        00.0000f, 00.0632f, 00.2993f, 00.0938f, 00.0219f, 00.0000f,
                        00.0000f, 00.0799f, 00.1694f, 00.0879f, 00.0253f, 00.0000f,
                        00.1787f, 00.0833f, 00.0192f, 00.0677f, 00.0326f, 00.0000f,
                        00.2551f, 00.0865f, 00.0021f, 00.0541f, 00.0355f, 00.0000f,
                        00.3283f, 00.1276f, 00.0176f, 00.0509f, 00.0359f, 00.0000f,
                        00.2612f, 00.2054f, 00.0724f, 00.0290f, 00.0614f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[]
                {
                    0.7566f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("LGGEEVSVACK", 0.2700f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.1257f, 00.0000f, 00.0040f, 00.0000f, 00.0000f, 00.0000f,
                        00.4191f, 00.0000f, 00.0073f, 00.5884f, 00.0000f, 00.0000f,
                        00.6531f, 00.0000f, 00.0098f, 00.2856f, 00.0000f, 00.0000f,
                        00.2813f, 00.0000f, 00.0000f, 00.3593f, 00.0006f, 00.0000f,
                        01.4928f, 00.0000f, 00.0000f, 00.2630f, 00.0000f, 00.0000f,
                        00.9262f, 00.0000f, 00.0000f, 00.2153f, 00.0000f, 00.0000f,
                        00.9594f, 00.0205f, 00.0000f, 00.0554f, 00.0000f, 00.0025f,
                        00.2173f, 00.0236f, 00.0273f, 00.0542f, 00.0004f, 00.0073f,
                        00.7281f, 00.0748f, 00.0000f, 00.0408f, 00.0000f, 00.0045f,
                        01.3693f, 00.0454f, 00.0000f, 00.0110f, 00.0000f, 00.0000f,
                        00.4869f, 00.0866f, 00.0452f, 00.0149f, 00.0000f, 00.0112f,
                        00.2978f, 00.1205f, 00.0374f, 00.0007f, 00.0114f, 00.0043f,
                        00.2843f, 00.1562f, 00.0000f, 00.0000f, 00.0230f, 00.0039f,
                        00.3312f, 00.1967f, 00.0053f, 00.0182f, 00.0529f, 00.0108f,
                        00.2922f, 00.1684f, 00.0471f, 00.0369f, 00.0575f, 00.0199f,
                        00.2502f, 00.1118f, 00.0844f, 00.0009f, 00.0358f, 00.0200f,
                        00.2318f, 00.0811f, 00.1231f, 00.0000f, 00.0167f, 00.0149f,
                        00.2592f, 00.0672f, 00.1409f, 00.0199f, 00.0074f, 00.0095f,
                        00.2575f, 00.0607f, 00.1522f, 00.0512f, 00.0010f, 00.0020f,
                        00.3074f, 00.0502f, 00.1832f, 00.0602f, 00.0023f, 00.0000f,
                        00.3356f, 00.0325f, 00.1174f, 00.0607f, 00.0004f, 00.0000f,
                        00.2306f, 00.0220f, 00.0745f, 00.0575f, 00.0009f, 00.0000f,
                        00.1107f, 00.0299f, 00.0832f, 00.0720f, 00.0026f, 00.0000f,
                        00.0000f, 00.0517f, 00.1511f, 00.0661f, 00.0070f, 00.0000f,
                        00.0000f, 00.0568f, 00.1755f, 00.0837f, 00.0156f, 00.0000f,
                        00.0447f, 00.0326f, 00.0909f, 00.0771f, 00.0302f, 00.0000f,
                        00.1165f, 00.0061f, 00.0013f, 00.0627f, 00.0578f, 00.0000f,
                        00.1699f, 00.0498f, 00.0000f, 00.0737f, 00.0959f, 00.0000f,
                        00.2736f, 00.1198f, 00.0496f, 00.0285f, 00.1074f, 00.0031f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "LGGEEVSVACK"
                },
                new[]
                {
                    -0.6807f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.2700f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.2222f, 00.0000f, 00.0216f, 00.0000f, 00.0000f, 00.0000f,
                        00.5488f, 00.0000f, 00.0027f, 00.0341f, 00.0000f, 00.0000f,
                        00.4643f, 00.0000f, 00.0232f, 00.1653f, 00.0000f, 00.0000f,
                        01.1210f, 00.0000f, 00.0000f, 00.3590f, 00.0000f, 00.0000f,
                        00.5599f, 00.0000f, 00.0000f, 00.5036f, 00.0000f, 00.0000f,
                        00.4345f, 00.0000f, 00.0000f, 00.1177f, 00.0000f, 00.0000f,
                        01.3181f, 00.0000f, 00.0000f, 00.0715f, 00.0000f, 00.0000f,
                        01.8204f, 00.0102f, 00.0000f, 00.0909f, 00.0000f, 00.0000f,
                        00.8764f, 00.0263f, 00.0000f, 00.0836f, 00.0000f, 00.0000f,
                        00.6053f, 00.0485f, 00.0000f, 00.0459f, 00.0000f, 00.0064f,
                        00.0243f, 00.2193f, 00.0622f, 00.0340f, 00.0000f, 00.0061f,
                        00.0000f, 00.0069f, 00.0051f, 00.0152f, 00.0000f, 00.0112f,
                        00.0490f, 00.0543f, 00.0754f, 00.0400f, 00.0178f, 00.0210f,
                        00.1673f, 00.0810f, 00.0217f, 00.0780f, 00.0346f, 00.0200f,
                        00.2067f, 00.1737f, 00.0457f, 00.0269f, 00.0413f, 00.0290f,
                        00.2043f, 00.1116f, 00.0755f, 00.0375f, 00.0511f, 00.0418f,
                        00.1739f, 00.0911f, 00.1149f, 00.0216f, 00.0317f, 00.0423f,
                        00.1691f, 00.0842f, 00.1352f, 00.0175f, 00.0103f, 00.0340f,
                        00.1944f, 00.0627f, 00.1495f, 00.0497f, 00.0069f, 00.0216f,
                        00.2423f, 00.0545f, 00.1611f, 00.0761f, 00.0164f, 00.0110f,
                        00.2670f, 00.0438f, 00.1386f, 00.0760f, 00.0335f, 00.0091f,
                        00.2238f, 00.0296f, 00.0874f, 00.0568f, 00.0331f, 00.0119f,
                        00.1468f, 00.0211f, 00.0795f, 00.0205f, 00.0136f, 00.0150f,
                        00.0388f, 00.0236f, 00.1051f, 00.0298f, 00.0000f, 00.0123f,
                        00.0000f, 00.0271f, 00.1415f, 00.0373f, 00.0000f, 00.0032f,
                        00.0000f, 00.0224f, 00.1853f, 00.0452f, 00.0129f, 00.0000f,
                        00.0000f, 00.0172f, 00.1179f, 00.0478f, 00.0271f, 00.0000f,
                        00.0422f, 00.0475f, 00.0781f, 00.0536f, 00.0420f, 00.0000f,
                        00.1369f, 00.0929f, 00.0299f, 00.0000f, 00.0621f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "GSYNLQDLLAQAK"
                },
                new[]
                {
                    1.2877f
                }
            ),
            new PrositIntensityQuery(
                new[]
                {
                    new PrositIntensityInput("CSLPRPWALTFSYGR", 0.3200f, 2),
                    new PrositIntensityInput("LGGEEVSVACK", 0.3200f, 2),
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.3200f, 2),
                    new PrositIntensityInput("GSYNLQDLLAQAK", 0.3200f, 2),
                    new PrositIntensityInput("TGTNLM[Oxidation (M)]DFLSR", 0.3200f, 2)
                },
                new[]
                {
                    new[]
                    {
                        00.7693f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        00.1020f, 00.0000f, 00.0090f, 00.4997f, 00.0000f, 00.0000f,
                        00.0556f, 00.0000f, 00.0549f, 00.3378f, 00.0000f, 00.0000f,
                        00.1009f, 00.0000f, 00.1008f, 00.0000f, 00.0004f, 00.0000f,
                        00.0885f, 00.0000f, 00.0436f, 00.3426f, 00.0000f, 00.0000f,
                        00.2034f, 00.0000f, 00.0212f, 00.0000f, 00.0000f, 00.0000f,
                        00.1814f, 00.0000f, 00.0000f, 00.0821f, 00.0000f, 00.0000f,
                        00.2119f, 00.0000f, 00.0000f, 00.1435f, 00.0113f, 00.0000f,
                        00.0862f, 00.0000f, 00.0000f, 00.2099f, 00.0414f, 00.0000f,
                        01.7147f, 00.2190f, 00.0027f, 00.1447f, 00.0236f, 00.0075f,
                        00.0000f, 00.0000f, 00.0780f, 00.1778f, 00.0218f, 00.0000f,
                        00.0114f, 00.4782f, 00.0535f, 00.1846f, 00.0312f, 00.0000f,
                        00.0000f, 00.0937f, 00.0359f, 00.0794f, 00.0122f, 00.0000f,
                        00.0000f, 00.1213f, 00.0784f, 00.1914f, 00.0000f, 00.0000f,
                        00.0017f, 00.3020f, 00.1341f, 00.1483f, 00.0000f, 00.0032f,
                        00.0595f, 00.3042f, 00.1278f, 00.0351f, 00.0081f, 00.0129f,
                        00.0601f, 00.2680f, 00.1377f, 00.0652f, 00.0127f, 00.0134f,
                        00.0723f, 00.2237f, 00.1794f, 00.0000f, 00.0274f, 00.0156f,
                        00.0836f, 00.1878f, 00.1665f, 00.0000f, 00.0074f, 00.0149f,
                        00.0941f, 00.2145f, 00.1571f, 00.0000f, 00.0033f, 00.0153f,
                        00.1386f, 00.2001f, 00.1420f, 00.0359f, 00.0137f, 00.0142f,
                        00.1511f, 00.1840f, 00.1707f, 00.0134f, 00.0249f, 00.0049f,
                        00.1372f, 00.1294f, 00.0953f, 00.0548f, 00.0014f, 00.0000f,
                        00.3145f, 00.1097f, 00.0365f, 00.1139f, 00.0026f, 00.0000f,
                        00.1599f, 00.1147f, 00.0707f, 00.1238f, 00.0035f, 00.0000f,
                        00.1871f, 00.0748f, 00.1060f, 00.0688f, 00.0026f, 00.0000f,
                        00.1763f, 00.0352f, 00.1424f, 00.1103f, 00.0051f, 00.0000f,
                        00.1365f, 00.0398f, 00.1800f, 00.1396f, 00.0198f, 00.0000f,
                        00.3545f, 00.0992f, 00.1789f, 00.0327f, 00.0613f, 00.0315f
                    },
                    new[]
                    {
                        00.1742f, 00.0000f, 00.0022f, 00.0000f, 00.0000f, 00.0017f,
                        00.7137f, 00.0000f, 00.0000f, 00.6339f, 00.0000f, 00.0000f,
                        00.8939f, 00.0000f, 00.0000f, 00.3521f, 00.0000f, 00.0000f,
                        00.3327f, 00.0000f, 00.0000f, 00.2713f, 00.0036f, 00.0000f,
                        01.4494f, 00.0000f, 00.0000f, 00.1542f, 00.0012f, 00.0000f,
                        00.8251f, 00.0000f, 00.0000f, 00.0875f, 00.0007f, 00.0025f,
                        00.8254f, 00.0036f, 00.0000f, 00.0245f, 00.0000f, 00.0034f,
                        00.1811f, 00.0046f, 00.0053f, 00.0163f, 00.0011f, 00.0080f,
                        00.5881f, 00.0000f, 00.0000f, 00.0091f, 00.0000f, 00.0072f,
                        01.3841f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        00.4738f, 00.0000f, 00.0536f, 00.0000f, 00.0000f, 00.0138f,
                        00.2712f, 00.0026f, 00.0532f, 00.0000f, 00.0107f, 00.0000f,
                        00.2341f, 00.0322f, 00.0000f, 00.0000f, 00.0256f, 00.0000f,
                        00.2938f, 00.0736f, 00.0000f, 00.0094f, 00.0593f, 00.0073f,
                        00.2993f, 00.1078f, 00.0492f, 00.0237f, 00.0707f, 00.0125f,
                        00.2788f, 00.1034f, 00.0769f, 00.0000f, 00.0530f, 00.0120f,
                        00.2424f, 00.0774f, 00.0907f, 00.0000f, 00.0242f, 00.0061f,
                        00.2278f, 00.0511f, 00.0946f, 00.0053f, 00.0073f, 00.0000f,
                        00.2539f, 00.0474f, 00.0972f, 00.0409f, 00.0003f, 00.0000f,
                        00.2961f, 00.0472f, 00.0949f, 00.0628f, 00.0000f, 00.0000f,
                        00.3059f, 00.0293f, 00.0546f, 00.0779f, 00.0000f, 00.0000f,
                        00.2242f, 00.0165f, 00.0473f, 00.0808f, 00.0000f, 00.0000f,
                        00.1659f, 00.0235f, 00.0649f, 00.0889f, 00.0018f, 00.0000f,
                        00.0740f, 00.0400f, 00.1185f, 00.0768f, 00.0093f, 00.0000f,
                        00.0578f, 00.0270f, 00.1062f, 00.0837f, 00.0190f, 00.0000f,
                        00.0885f, 00.0141f, 00.0279f, 00.0654f, 00.0285f, 00.0000f,
                        00.1623f, 00.0210f, 00.0000f, 00.0625f, 00.0417f, 00.0000f,
                        00.2765f, 00.0664f, 00.0000f, 00.0751f, 00.0613f, 00.0000f,
                        00.2680f, 00.1137f, 00.0901f, 00.0218f, 00.0685f, 00.0181f
                    },
                    new[]
                    {
                        00.2843f, 00.0000f, 00.0172f, 00.0000f, 00.0000f, 00.0000f,
                        00.6344f, 00.0000f, 00.0000f, 00.0870f, 00.0000f, 00.0000f,
                        00.5449f, 00.0000f, 00.0000f, 00.1720f, 00.0000f, 00.0000f,
                        01.3518f, 00.0000f, 00.0000f, 00.3277f, 00.0018f, 00.0000f,
                        00.6832f, 00.0000f, 00.0000f, 00.2992f, 00.0000f, 00.0000f,
                        00.5292f, 00.0000f, 00.0000f, 00.0542f, 00.0000f, 00.0004f,
                        01.2025f, 00.0000f, 00.0000f, 00.0366f, 00.0000f, 00.0000f,
                        01.3791f, 00.0005f, 00.0000f, 00.0388f, 00.0009f, 00.0000f,
                        00.7098f, 00.0018f, 00.0000f, 00.0208f, 00.0000f, 00.0009f,
                        00.4708f, 00.0000f, 00.0000f, 00.0057f, 00.0000f, 00.0085f,
                        00.0162f, 00.0087f, 00.0172f, 00.0000f, 00.0000f, 00.0084f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0100f,
                        00.0513f, 00.0063f, 00.0436f, 00.0131f, 00.0113f, 00.0116f,
                        00.1722f, 00.0289f, 00.0119f, 00.0564f, 00.0342f, 00.0151f,
                        00.1688f, 00.1169f, 00.0458f, 00.0238f, 00.0460f, 00.0289f,
                        00.1801f, 00.0847f, 00.0770f, 00.0244f, 00.0520f, 00.0346f,
                        00.1643f, 00.0952f, 00.1254f, 00.0000f, 00.0358f, 00.0356f,
                        00.1528f, 00.0780f, 00.1413f, 00.0000f, 00.0180f, 00.0246f,
                        00.1774f, 00.0661f, 00.1542f, 00.0270f, 00.0108f, 00.0130f,
                        00.2090f, 00.0574f, 00.1479f, 00.0259f, 00.0159f, 00.0065f,
                        00.2128f, 00.0534f, 00.0986f, 00.0482f, 00.0238f, 00.0007f,
                        00.2017f, 00.0311f, 00.0415f, 00.0413f, 00.0195f, 00.0000f,
                        00.1650f, 00.0209f, 00.0329f, 00.0554f, 00.0102f, 00.0000f,
                        00.0751f, 00.0146f, 00.0495f, 00.0551f, 00.0052f, 00.0000f,
                        00.0000f, 00.0126f, 00.0822f, 00.0759f, 00.0110f, 00.0000f,
                        00.0043f, 00.0160f, 00.0353f, 00.0721f, 00.0196f, 00.0000f,
                        00.0472f, 00.0087f, 00.0000f, 00.0561f, 00.0270f, 00.0000f,
                        00.1578f, 00.0208f, 00.0000f, 00.0493f, 00.0273f, 00.0000f,
                        00.2125f, 00.1077f, 00.0414f, 00.0028f, 00.0503f, 00.0000f
                    },
                    new[]
                    {
                        00.2843f, 00.0000f, 00.0172f, 00.0000f, 00.0000f, 00.0000f,
                        00.6344f, 00.0000f, 00.0000f, 00.0870f, 00.0000f, 00.0000f,
                        00.5449f, 00.0000f, 00.0000f, 00.1720f, 00.0000f, 00.0000f,
                        01.3518f, 00.0000f, 00.0000f, 00.3277f, 00.0018f, 00.0000f,
                        00.6832f, 00.0000f, 00.0000f, 00.2992f, 00.0000f, 00.0000f,
                        00.5292f, 00.0000f, 00.0000f, 00.0542f, 00.0000f, 00.0004f,
                        01.2025f, 00.0000f, 00.0000f, 00.0366f, 00.0000f, 00.0000f,
                        01.3791f, 00.0005f, 00.0000f, 00.0388f, 00.0009f, 00.0000f,
                        00.7098f, 00.0018f, 00.0000f, 00.0208f, 00.0000f, 00.0009f,
                        00.4708f, 00.0000f, 00.0000f, 00.0057f, 00.0000f, 00.0085f,
                        00.0162f, 00.0087f, 00.0172f, 00.0000f, 00.0000f, 00.0084f,
                        00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0100f,
                        00.0513f, 00.0063f, 00.0436f, 00.0131f, 00.0113f, 00.0116f,
                        00.1722f, 00.0289f, 00.0119f, 00.0564f, 00.0342f, 00.0151f,
                        00.1688f, 00.1169f, 00.0458f, 00.0238f, 00.0460f, 00.0289f,
                        00.1801f, 00.0847f, 00.0770f, 00.0244f, 00.0520f, 00.0346f,
                        00.1643f, 00.0952f, 00.1254f, 00.0000f, 00.0358f, 00.0356f,
                        00.1528f, 00.0780f, 00.1413f, 00.0000f, 00.0180f, 00.0246f,
                        00.1774f, 00.0661f, 00.1542f, 00.0270f, 00.0108f, 00.0130f,
                        00.2090f, 00.0574f, 00.1479f, 00.0259f, 00.0159f, 00.0065f,
                        00.2128f, 00.0534f, 00.0986f, 00.0482f, 00.0238f, 00.0007f,
                        00.2017f, 00.0311f, 00.0415f, 00.0413f, 00.0195f, 00.0000f,
                        00.1650f, 00.0209f, 00.0329f, 00.0554f, 00.0102f, 00.0000f,
                        00.0751f, 00.0146f, 00.0495f, 00.0551f, 00.0052f, 00.0000f,
                        00.0000f, 00.0126f, 00.0822f, 00.0759f, 00.0110f, 00.0000f,
                        00.0043f, 00.0160f, 00.0353f, 00.0721f, 00.0196f, 00.0000f,
                        00.0472f, 00.0087f, 00.0000f, 00.0561f, 00.0270f, 00.0000f,
                        00.1578f, 00.0208f, 00.0000f, 00.0493f, 00.0273f, 00.0000f,
                        00.2125f, 00.1077f, 00.0414f, 00.0028f, 00.0503f, 00.0000f
                    },
                    new[]
                    {
                        00.2941f, 00.0000f, 00.0000f, 00.0000f, 00.0000f, 00.0000f,
                        00.6894f, 00.0000f, 00.0000f, 00.5591f, 00.0000f, 00.0000f,
                        00.5015f, 00.0000f, 00.0000f, 00.3191f, 00.0000f, 00.0000f,
                        00.8361f, 00.0000f, 00.0000f, 00.1807f, 00.0022f, 00.0000f,
                        01.2666f, 00.0000f, 00.0000f, 00.1699f, 00.0000f, 00.0000f,
                        01.5276f, 00.0495f, 00.0000f, 00.0344f, 00.0000f, 00.0000f,
                        00.7162f, 00.1543f, 00.0000f, 00.0229f, 00.0000f, 00.0002f,
                        00.5583f, 00.0676f, 00.0000f, 00.0098f, 00.0000f, 00.0058f,
                        00.1080f, 00.0759f, 00.0165f, 00.0103f, 00.0000f, 00.0057f,
                        00.0598f, 00.0207f, 00.0000f, 00.0000f, 00.0000f, 00.0058f,
                        00.0744f, 00.0388f, 00.0441f, 00.0000f, 00.0000f, 00.0065f,
                        00.1349f, 00.0675f, 00.0147f, 00.0194f, 00.0105f, 00.0083f,
                        00.1424f, 00.0960f, 00.0179f, 00.0135f, 00.0280f, 00.0172f,
                        00.1726f, 00.1174f, 00.0500f, 00.0211f, 00.0390f, 00.0169f,
                        00.1614f, 00.1175f, 00.0950f, 00.0052f, 00.0352f, 00.0126f,
                        00.1659f, 00.0997f, 00.1315f, 00.0000f, 00.0224f, 00.0108f,
                        00.1840f, 00.0782f, 00.1345f, 00.0028f, 00.0098f, 00.0075f,
                        00.2074f, 00.0662f, 00.1272f, 00.0279f, 00.0041f, 00.0072f,
                        00.2192f, 00.0609f, 00.1265f, 00.0462f, 00.0006f, 00.0055f,
                        00.2184f, 00.0531f, 00.1293f, 00.0463f, 00.0000f, 00.0041f,
                        00.1732f, 00.0311f, 00.1561f, 00.0535f, 00.0000f, 00.0033f,
                        00.0000f, 00.0353f, 00.2349f, 00.0776f, 00.0000f, 00.0014f,
                        00.0000f, 00.0564f, 00.2690f, 00.0821f, 00.0093f, 00.0000f,
                        00.0000f, 00.0556f, 00.2677f, 00.0934f, 00.0276f, 00.0000f,
                        00.0213f, 00.0662f, 00.1226f, 00.0820f, 00.0284f, 00.0000f,
                        00.2070f, 00.0667f, 00.0000f, 00.0531f, 00.0339f, 00.0000f,
                        00.2482f, 00.0879f, 00.0000f, 00.0399f, 00.0337f, 00.0000f,
                        00.3183f, 00.1215f, 00.0000f, 00.0430f, 00.0312f, 00.0000f,
                        00.2822f, 00.2028f, 00.0408f, 00.0179f, 00.0527f, 00.0000f
                    }
                }
            ),
            new PrositRetentionTimeQuery(
                new[]
                {
                    "CSLPRPWALTFSYGR",
                    "LGGEEVSVACK",
                    "GSYNLQDLLAQAK",
                    "TGTNLM[Oxidation (M)]DFLSR"
                },
                new[]
                {
                    1.2758f,
                    -0.6807f,
                    1.2877f,
                    0.7566f
                }
            ),
        });

        [TestMethod]
        public void TestPrositSkylineIntegration()
        {
            TestFilesZip = "TestFunctional/PrositSkylineIntegrationTest.zip";
            RunFunctionalTest();
        }

        protected override void DoTest()
        {
            OpenDocument(TestFilesDir.GetTestPath(@"Rat_plasma.sky"));

            /*var doc = SkylineWindow.Document;
            RunUI(() =>
            {
                // Add Prosit supported mods
                SkylineWindow.ChangeSettings(SkylineWindow.Document.Settings.ChangePeptideModifications(pm =>
                {
                    return pm.ChangeStaticModifications(new[]
                    {
                        UniMod.DictStructuralModNames[@"Carbamidomethyl (C)"],
                        UniMod.DictStructuralModNames[@"Oxidation (M)"]
                    });
                }), false);
            });

            WaitForDocumentChange(doc);*/

            // Set up library match

            // Show all ions and charges of interest
            Settings.Default.ShowBIons = true;
            Settings.Default.ShowYIons = true;
            Settings.Default.ShowCharge1 = true;
            Settings.Default.ShowCharge2 = true;
            Settings.Default.ShowCharge3 = true;

            PrositConstants.CACHE_PREV_PREDICTION = false;

            PrositPredictionClient.FakeClient = RecordData
                ? new FakePrositPredictionClient(string.Empty)
                : new FakePrositPredictionClient(QUERIES);

            if (RecordData)
                Console.WriteLine(@"private static List<PrositQuery> QUERIES = new List<PrositQuery>(new PrositQuery[] {");

            TestPrositOptions();
            TestPrositSinglePrecursorPredictions();
            TestLivePrositMirrorPlots();
            Settings.Default.Prosit = false; // Disable Prosit to avoid that last query after building the library
            TestPrositLibraryBuild();
            TestInvalidPepSequences(); // Do this at the end, otherwise it messes with the order of nodes
            var expected = RecordData ? 0 : QUERIES.Count;
            Assert.AreEqual(expected, ((FakePrositPredictionClient)PrositPredictionClient.Current).QueryIndex);
            PrositPredictionClient.FakeClient = null;
            PrositConstants.CACHE_PREV_PREDICTION = true;
            if (RecordData)
                Console.WriteLine(@"});");
        }

        public void TestInvalidPepSequences()
        {
            // Allow us to paste 'random' sequences
            /*RunUI(() =>
            {
                // Max missed cleavages
                SkylineWindow.ModifyDocument(null, doc => doc.ChangeSettings(doc.Settings.ChangePeptideSettings(
                    doc.Settings.PeptideSettings.ChangeDigestSettings(new DigestSettings(2,
                        doc.Settings.PeptideSettings.DigestSettings.ExcludeRaggedEnds)))));

                // Max len
                SkylineWindow.ModifyDocument(null, doc => doc.ChangeSettings(doc.Settings.ChangePeptideSettings(
                    doc.Settings.PeptideSettings.ChangeFilter(
                        doc.Settings.PeptideSettings.Filter.ChangeMaxPeptideLength(32)))));
            });*/

            // Unknown Amino Acid 'O'
            TestPrositException("ROHDESKYLINE", typeof(PrositUnsupportedAminoAcidException));
            // Too long
            TestPrositException(string.Concat(Enumerable.Repeat("AAAA", 8)), typeof(PrositPeptideTooLongException));
            // Unsupported mod
            TestPrositException("S[+80]KYLINE", typeof(PrositUnsupportedModificationException));
            // Small molecule
            // We are careful not to involve Prosit with small molecules, so no exception expected
            TestPrositException("Methionine", null);
        }

        private void SelectNodeBySeq(string seq)
        {
            seq = FastaSequence.StripModifications(seq);
            var found = false;
            RunUI(() =>
            {
                foreach (var node in SkylineWindow.SequenceTree.Nodes.OfType<TreeNodeMS>())
                {
                    foreach (var child in node.Nodes.OfType<TreeNodeMS>())
                    {
                        if (child is PeptideTreeNode pep &&
                            pep.DocNode.Peptide.Target.DisplayName == seq)
                        {
                            found = true;
                            SkylineWindow.SequenceTree.SelectedNode = child;
                            return;
                        }
                    }
                }
            });

            Assert.IsTrue(found, "Could not find and select sequence \"{0}\"", seq);
            WaitForConditionUI(() => SkylineWindow.SelectedNode is PeptideTreeNode pep &&
                                     pep.DocNode.Peptide.Target.DisplayName == seq);
        }

        private void TestPrositException(string seq, Type expectedException)
        {
            /*var doc = SkylineWindow.Document;
            if (!addMods)
            {
                RunUI(() => SkylineWindow.Paste(seq));
            }
            else
            {
                RunDlg<MultiButtonMsgDlg>(() => SkylineWindow.Paste(seq), dlg =>
                {
                    dlg.OkDialog();
                });
            }
            WaitForDocumentChange(doc);*/

            SelectNodeBySeq(seq);
            Settings.Default.Prosit = true;
            RunUI(SkylineWindow.UpdateGraphPanes);
            // Add first precursor
            /*RunDlg<PopupPickList>(SkylineWindow.ShowPickChildrenInTest, dlg =>
            {
                dlg.ToggleItem(0);
                dlg.OnOk();
            });

            WaitForConditionUI(() => SkylineWindow.SelectedNode.Nodes.Count == 1);*/
            WaitForGraphs();
            if (expectedException != null)
            {
                WaitForConditionUI(() =>
                    SkylineWindow.GraphSpectrum.GraphException != null &&
                    !(SkylineWindow.GraphSpectrum.GraphException is PrositPredictingException));

                RunUI(() =>
                {
                    Assert.IsInstanceOfType(SkylineWindow.GraphSpectrum.GraphException, expectedException);
                });
            }
            Settings.Default.Prosit = false;
        }

        public void TestPrositLibraryBuild()
        {
            var client = (FakePrositPredictionClient)PrositPredictionClient.Current;
            var outBlib = TestFilesDir.GetTestPath("Prosit.blib");

            var doc = SkylineWindow.Document;

            // Open Peptide Settings -- Library
            var peptideSettings = ShowDialog<PeptideSettingsUI>(SkylineWindow.ShowPeptideSettingsUI);
            var buildLibrary = ShowDialog<BuildLibraryDlg>(peptideSettings.ShowBuildLibraryDlg);

            RunUI(() =>
            {
                Assert.IsFalse(buildLibrary.Prosit);
                buildLibrary.Prosit = true;
            });

            RunUI(() =>
            {
                var nce = Settings.Default.PrositNCE;
                Assert.AreEqual(buildLibrary.NCE, nce);
                buildLibrary.NCE = 32;
                // Don't want this to change the settings nce, this is just for building the library
                Assert.AreEqual(Settings.Default.PrositNCE, nce);

                buildLibrary.LibraryName = "Prosit";
                buildLibrary.LibraryPath = outBlib;
                // buildLibrary.IrtStandard = IrtStandard.BIOGNOSYS_11;
            });

            // Other tests do this too, but why?
            OkDialog(buildLibrary, buildLibrary.OkWizardPage);

            // Wait for library build
            Assert.IsTrue(WaitForConditionUI(() =>
                peptideSettings.AvailableLibraries.Contains("Prosit")));
            // Select new library
            RunUI(() => peptideSettings.PickedLibraries =
                peptideSettings.PickedLibraries.Concat(new[] { "Prosit" }).ToArray());
            // Close pep settings
            OkDialog(peptideSettings, peptideSettings.OkDialog);

            // Wait for stable document
            WaitForDocumentChangeLoaded(doc);

            var precursorCount = SkylineWindow.Document.PeptideTransitionGroupCount;
            var distinctPrecursorCount = 
                SkylineWindow.Document.Peptides.SelectMany(pep => pep.TransitionGroups
                    .Select(tg => Tuple.Create(pep.ModifiedTarget, tg.PrecursorCharge)))
                .Distinct().Count();

            const int notSupportedCount = 3;
            WaitForLibrary(distinctPrecursorCount - notSupportedCount, SkylineWindow.Document.Settings.PeptideSettings.Libraries.LibrarySpecs.IndexOf(l => l.Name == "Prosit"));

            var prositLib = SkylineWindow.Document.Settings.PeptideSettings.Libraries.Libraries.Last();

            // Extract spectrum and rt info from the library and store it a way that
            // allows us to verify the spectra easily
            var spectrumDisplayInfos = new SpectrumDisplayInfo[precursorCount];
            var peptidesRepeat = new PrositIntensityModel.PeptidePrecursorNCE[precursorCount];
            var peptides = SkylineWindow.Document.Peptides.ToArray();
            var idx = 0;
            var noMatchCount = 0;
            for (var i = 0; i < peptides.Length; ++i)
            {
                var precursors = peptides[i].TransitionGroups.ToArray();
                for (var j = 0; j < precursors.Length; ++j)
                {
                    var libKey = new LibKey(peptides[i].ModifiedSequence, precursors[j].PrecursorAdduct);
                    var spectra = prositLib.GetSpectra(libKey, IsotopeLabelType.light, LibraryRedundancy.all).ToArray();
                    if (spectra.Length == 0)
                    {
                        ++noMatchCount;
                        spectrumDisplayInfos[idx] = null;
                    }
                    else
                    {
                        spectrumDisplayInfos[idx] = new SpectrumDisplayInfo(spectra[0], precursors[j], spectra[0].RetentionTime);
                    }

                    peptidesRepeat[idx++] = new PrositIntensityModel.PeptidePrecursorNCE(peptides[i], precursors[j], IsotopeLabelType.light, null);
                }
            }

            Assert.AreEqual(notSupportedCount, noMatchCount);

            if (RecordData)
                return;

            // Get queries and make sure they match the actual spectra
            var intensityQuery = QUERIES.ElementAt(client.QueryIndex - 2) as PrositIntensityQuery;
            Assert.IsNotNull(intensityQuery);
            intensityQuery.AssertMatchesSpectra(peptidesRepeat, spectrumDisplayInfos);
            var rtQuery = QUERIES.ElementAt(client.QueryIndex - 1) as PrositRetentionTimeQuery;
            Assert.IsNotNull(rtQuery);
            rtQuery.AssertMatchesSpectra(spectrumDisplayInfos);
        }

        public void TestPrositOptions()
        {
            // Enable Prosit
            Settings.Default.Prosit = true;

            // For now just set all Prosit settings
            var toolOptions = ShowDialog<ToolOptionsUI>(() => SkylineWindow.ShowToolOptionsUI(ToolOptionsUI.TABS.Prosit));

            var intensityModel = PrositIntensityModel.Models.First();
            var rtModel = PrositRetentionTimeModel.Models.First();
            RunUI(() =>
            {
                // Also set ip, otherwise we will keep getting exceptions about the server not being set,
                // although we are using the fake test client
                toolOptions.PrositIntensityModelCombo = intensityModel;
                toolOptions.PrositRetentionTimeModelCombo = rtModel;
                toolOptions.CECombo = 28;
            });

            WaitForConditionUI(() => toolOptions.PrositServerStatus == ToolOptionsUI.ServerStatus.AVAILABLE);
            RunUI(() => toolOptions.DialogResult = DialogResult.OK);
            WaitForClosedForm(toolOptions);

            Assert.AreEqual(intensityModel, Settings.Default.PrositIntensityModel);
            Assert.AreEqual(rtModel, Settings.Default.PrositRetentionTimeModel);
            Assert.AreEqual(28, Settings.Default.PrositNCE);
        }

        public void TestPrositSinglePrecursorPredictions()
        {
            var client = (FakePrositPredictionClient) PrositPredictionClient.Current;

            var baseCE = 28;
            Assert.AreEqual(baseCE, Settings.Default.PrositNCE);

            // Selecting a protein should will make a prediction for its first precursor
            SelectNode(SrmDocument.Level.MoleculeGroups, 0);
            GraphSpectrum.SpectrumNodeSelection selection = null;
            RunUI(() => selection = GraphSpectrum.SpectrumNodeSelection.GetCurrent(SkylineWindow));
            WaitForPrositSpectrum(selection.NodePepGroup.Peptides.First().TransitionGroups.First(), baseCE);

            // Select several peptides and make sure they are displayed correctly
            TestPrositSinglePrecursorPredictions(client, SrmDocument.Level.Molecules, 0, 4);
            // Do the same for transition groups, we have one more of those because of the heavy precursor
            TestPrositSinglePrecursorPredictions(client, SrmDocument.Level.TransitionGroups, 0, 5);
        }

        public void TestPrositSinglePrecursorPredictions(FakePrositPredictionClient client, SrmDocument.Level level, int start, int end)
        {
            var baseCE = 25;
            Settings.Default.PrositNCE = baseCE;

            // Select several peptides and make sure they are displayed correctly
            for (var i = start; i < end; ++i)
            {
                // Select node, causing prosit predictions to be made
                SelectNode(level, i); // i'th peptide

                // Get selected node, since we need it for calculating MZs. Selecting a node is instant,
                // the prediction not
                GraphSpectrum.SpectrumNodeSelection selection = null;
                RunUI(() => selection = GraphSpectrum.SpectrumNodeSelection.GetCurrent(SkylineWindow));

                WaitForPrositSpectrum(selection.NodeTranGroup, baseCE + i);

                if (!RecordData)
                    AssertIntensityAndIRTSpectrumCorrect((PrositIntensityModel.PeptidePrecursorNCE)selection, client.QueryIndex);

                RunUI(() =>
                {
                    Assert.IsTrue(SkylineWindow.GraphSpectrum.NCEVisible);
                    Assert.IsFalse(SkylineWindow.GraphSpectrum.MirrorComboVisible);
                    Assert.AreEqual(Settings.Default.PrositNCE, SkylineWindow.GraphSpectrum.PrositNCE);

                    // Change NCE and predict again
                    ++SkylineWindow.GraphSpectrum.PrositNCE;

                    Assert.AreEqual(Settings.Default.PrositNCE, SkylineWindow.GraphSpectrum.PrositNCE);
                });

                WaitForPrositSpectrum(selection.NodeTranGroup, baseCE + i + 1);

                if (!RecordData)
                    AssertIntensityAndIRTSpectrumCorrect((PrositIntensityModel.PeptidePrecursorNCE)selection, client.QueryIndex);
            }
        }

        /*public PeptidePrecursorPair GetSelectedPeptidePair()
        {
            TreeNodeMS treeNodeMS = null;
            RunUI(() => treeNodeMS = SkylineWindow.SelectedNode);
            var node = treeNodeMS as PeptideTreeNode;
            Assert.IsNotNull(node);
            var pep = node.Model as PeptideDocNode;
            Assert.IsNotNull(pep);
            var precursor = pep.TransitionGroups.First();

            return new PeptidePrecursorPair(pep, precursor);
        }*/

        public void AssertIntensityAndIRTSpectrumCorrect(PrositIntensityModel.PeptidePrecursorNCE peptidePrecursorNCE, int index)
        {
            // We are interested in the queries just processed
            index -= 2;

            SpectrumDisplayInfo spectrumDisplayInfo = null;
            RunUI(() => spectrumDisplayInfo = SkylineWindow.GraphSpectrum.PrositSpectrum);
            Assert.IsNotNull(spectrumDisplayInfo);

            // There need to be at least two queries (ms2, irt)
            AssertEx.IsGreaterThanOrEqual(QUERIES.Count - index, 2);

            // Get queries and make sure they match the actual spectra
            var intensityQuery = QUERIES.ElementAt(index) as PrositIntensityQuery;
            Assert.IsNotNull(intensityQuery);
            intensityQuery.AssertMatchesSpectrum(peptidePrecursorNCE, spectrumDisplayInfo);

            var rtQuery = QUERIES.ElementAt(index + 1) as PrositRetentionTimeQuery;
            Assert.IsNotNull(rtQuery);
            rtQuery.AssertMatchesSpectrum(spectrumDisplayInfo);
        }

        public void WaitForPrositSpectrum(TransitionGroupDocNode precursor, int nce)
        {
            WaitForConditionUI(() =>
            {
                if (!SkylineWindow.GraphSpectrum.HasSpectrum ||
                    !(SkylineWindow.GraphSpectrum.PrositSpectrum?.SpectrumInfo is SpectrumInfoProsit info))
                    return false;
                return ReferenceEquals(info.Precursor, precursor) && info.NCE == nce;
            });
        }

        public void TestLivePrositMirrorPlots()
        {
            var client = (FakePrositPredictionClient) PrositPredictionClient.Current;

            // Enable mirror plots
            Settings.Default.LibMatchMirror = true;

            // Reset NCE
            Settings.Default.PrositNCE = 27;

            // TODO: maybe somehow make checks more specific, since the checks here are very similar to
            // checks for the regular spectra
            for (var i = 1; i < 3; ++i)
            {
                // Select the i'th peptide. Only peptides 1 and 2 have library info
                SelectNode(SrmDocument.Level.Molecules, i);
                GraphSpectrum.SpectrumNodeSelection selection = null;
                RunUI(() => selection = GraphSpectrum.SpectrumNodeSelection.GetCurrent(SkylineWindow));
                WaitForPrositSpectrum(selection.NodeTranGroup, Settings.Default.PrositNCE);
                // These are the same if we are not displaying a mirror plot
                RunUI(() => Assert.AreNotSame(SkylineWindow.SelectedSpectrum, SkylineWindow.GraphSpectrum.PrositSpectrum));

                if (!RecordData)
                    AssertIntensityAndIRTSpectrumCorrect((PrositIntensityModel.PeptidePrecursorNCE)selection, client.QueryIndex);
            }
        }
    }

    public interface IRecordable
    {
        string ToCode();
    }

    public abstract class PrositQuery : IRecordable
    {
        public abstract string Model { get; }
        public abstract PredictResponse Response { get; }

        public abstract void AssertMatchesQuery(PredictRequest pr);
        public abstract string ToCode();
    }

    public class PrositIntensityInput : IRecordable
    {
        public PrositIntensityInput(string modifiedSequence, float normalizedCollisionEnergy, int precursorCharge)
        {
            ModifiedSequence = modifiedSequence;
            NormalizedCollisionEnergy = normalizedCollisionEnergy;
            PrecursorCharge = precursorCharge;
        }

        public string ModifiedSequence { get; private set; }
        public float NormalizedCollisionEnergy { get; private set; }
        public int PrecursorCharge { get; private set; }

        public string ToCode()
        {
            return string.Format("new PrositIntensityInput(\"{0}\", {1:0.0000}f, {2})", ModifiedSequence, NormalizedCollisionEnergy,
                PrecursorCharge);
        }
    }

    public class PrositIntensityQuery : PrositQuery
    {
        private PrositIntensityInput[] _inputs;
        private float[][] _spectra;

        public PrositIntensityQuery(PrositIntensityInput[] inputs, float[][] spectra)
        {
            _inputs = inputs;
            _spectra = spectra;
            Assert.AreEqual(_inputs.Length, _spectra.Length);
        }

        public static PrositIntensityQuery FromTensors(PredictRequest request, PredictResponse response)
        {
            // Sequences
            var seqs = request.Inputs[PrositIntensityModel.PrositIntensityInput.PEPTIDES_KEY];
            Assert.AreEqual(seqs.TensorShape.Dim.Count, 2);
            Assert.AreEqual(seqs.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            var decodedSeqs = PrositHelpers.DecodeSequences(seqs);

            // CEs
            var ces = request.Inputs[PrositIntensityModel.PrositIntensityInput.COLLISION_ENERGY_KEY];
            Assert.AreEqual(ces.TensorShape.Dim.Count, 2);
            Assert.AreEqual(ces.TensorShape.Dim[1].Size, 1);
            var decodedCes = ces.FloatVal.ToArray();

            // Charges
            var charges = request.Inputs[PrositIntensityModel.PrositIntensityInput.PRECURSOR_CHARGE_KEY];
            Assert.AreEqual(charges.TensorShape.Dim.Count, 2);
            Assert.AreEqual(charges.TensorShape.Dim[1].Size, PrositConstants.PRECURSOR_CHARGES);
            var decodedCharges = PrositHelpers.DecodeCharges(charges);

            var inputs = Enumerable.Range(0, decodedSeqs.Length)
                .Select(i => new PrositIntensityInput(decodedSeqs[i], decodedCes[i], decodedCharges[i])).ToArray();

            var outputsFlattened = PrositHelpers.ReLU(response.Outputs[PrositIntensityModel.PrositIntensityOutput.OUTPUT_KEY].FloatVal.ToArray());

            // Reshape and copy
            var outputs = new float[inputs.Length][];
            var batch = (PrositConstants.PEPTIDE_SEQ_LEN - 1) * PrositConstants.IONS_PER_RESIDUE;
            for (int i = 0; i < inputs.Length; ++i)
            {
                outputs[i] = new float[batch];
                Array.Copy(outputsFlattened, i * batch, outputs[i], 0, batch);
            }

            return new PrositIntensityQuery(inputs, outputs);
        }

        public override string ToCode()
        {
            var inputsCodeArr = _inputs.Select(i => "        " + i.ToCode());
            var inputsCode = string.Format("new[] {{\r\n{0}\r\n    }}",
                string.Join(",\r\n", inputsCodeArr));

            var spectraCodeArr = _spectra.Select(f =>
            {
                var code = new StringBuilder();
                code.AppendLine("        new[] {");
                for (int i = 0; i < PrositConstants.PEPTIDE_SEQ_LEN - 1; ++i)
                    code.AppendLine("            " + string.Join(", ",
                                        f.Skip(i * PrositConstants.IONS_PER_RESIDUE).Take(PrositConstants.IONS_PER_RESIDUE)
                                            .Select(fl => string.Format("{0:00.0000}f", fl))) + ",");
                code.Remove(code.Length - 3, 3);
                code.AppendLine();
                code.Append("        }");
                return code.ToString();
            });

            var spectraCode = new StringBuilder();
            spectraCode.AppendLine("new[] {");
            spectraCode.Append(string.Join(", ", spectraCodeArr));
            spectraCode.AppendLine();
            spectraCode.Append("    }");

            return string.Format("new PrositIntensityQuery(\r\n    {0},\r\n    {1}\r\n),", inputsCode, spectraCode);
        }

        public override PredictResponse Response
        {
            get
            {
                var pr = new PredictResponse();
                pr.ModelSpec = new ModelSpec { Name = Model };

                // Construct Tensor
                var tp = new TensorProto { Dtype = DataType.DtFloat };

                var spectraFlatten = _spectra.SelectMany(f => f).ToArray();
                // Populate with data
                tp.FloatVal.AddRange(spectraFlatten);
                tp.TensorShape = new TensorShapeProto();
                tp.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim { Size = _spectra.Length });
                tp.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim { Size = (PrositConstants.PEPTIDE_SEQ_LEN - 1) * PrositConstants.PRECURSOR_CHARGES });
                pr.Outputs[PrositIntensityModel.PrositIntensityOutput.OUTPUT_KEY] = tp;

                return pr;
            }
        }

        public override string Model => PrositIntensityModel.Models.First();

        public override void AssertMatchesQuery(PredictRequest pr)
        {
            Assert.AreEqual(Model, pr.ModelSpec.Name);

            Assert.AreEqual(pr.Inputs.Count, 3);
            var keys = pr.Inputs.Keys.OrderBy(s => s).ToArray();
            Assert.AreEqual(keys[0], PrositIntensityModel.PrositIntensityInput.COLLISION_ENERGY_KEY);
            Assert.AreEqual(keys[1], PrositIntensityModel.PrositIntensityInput.PEPTIDES_KEY);
            Assert.AreEqual(keys[2], PrositIntensityModel.PrositIntensityInput.PRECURSOR_CHARGE_KEY);

            // Sequences
            var seqs = pr.Inputs[PrositIntensityModel.PrositIntensityInput.PEPTIDES_KEY];
            Assert.AreEqual(seqs.TensorShape.Dim.Count, 2);
            Assert.AreEqual(seqs.TensorShape.Dim[0].Size, _inputs.Length);
            Assert.AreEqual(seqs.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            AssertEx.AreEqualDeep(_inputs.Select(i => i.ModifiedSequence).ToArray(),
                PrositHelpers.DecodeSequences(seqs));

            // CEs
            var ces = pr.Inputs[PrositIntensityModel.PrositIntensityInput.COLLISION_ENERGY_KEY];
            Assert.AreEqual(ces.TensorShape.Dim.Count, 2);
            Assert.AreEqual(ces.TensorShape.Dim[0].Size, _inputs.Length);
            Assert.AreEqual(ces.TensorShape.Dim[1].Size, 1);
            AssertEx.AreEqualDeep(_inputs.Select(i => i.NormalizedCollisionEnergy).ToArray(), ces.FloatVal);

            // Charges
            var charges = pr.Inputs[PrositIntensityModel.PrositIntensityInput.PRECURSOR_CHARGE_KEY];
            Assert.AreEqual(charges.TensorShape.Dim.Count, 2);
            Assert.AreEqual(charges.TensorShape.Dim[0].Size, _inputs.Length);
            Assert.AreEqual(charges.TensorShape.Dim[1].Size, PrositConstants.PRECURSOR_CHARGES);
            AssertEx.AreEqualDeep(_inputs.Select(i => i.PrecursorCharge).ToArray(), PrositHelpers.DecodeCharges(charges));
        }

        public void AssertMatchesSpectra(PrositIntensityModel.PeptidePrecursorNCE[] peptidePrecursorNCEs, SpectrumDisplayInfo[] spectrumDisplayInfos)
        {
            for (int i = 0; i < _inputs.Length; ++i)
                if (spectrumDisplayInfos[i] != null)
                    AssertMatchesSpectrum(peptidePrecursorNCEs[i], _inputs[i], _spectra[i], spectrumDisplayInfos[i]);
        }

        public void AssertMatchesSpectrum(PrositIntensityModel.PeptidePrecursorNCE peptidePrecursorNCE, SpectrumDisplayInfo spectrumDisplayInfo)
        {
            AssertMatchesSpectrum(peptidePrecursorNCE, _inputs[0], _spectra[0], spectrumDisplayInfo);
        }

        public static void AssertMatchesSpectrum(PrositIntensityModel.PeptidePrecursorNCE peptidePrecursorNCE, PrositIntensityInput input, float[] spectrum, SpectrumDisplayInfo spectrumDisplayInfo)
        {
            Assert.IsNotNull(spectrumDisplayInfo);
            Assert.AreEqual(spectrumDisplayInfo.Name, "Prosit");

            // Calculate expected number of peaks. 1 peak per residue times the number of possible charges
            var residues = FastaSequence.StripModifications(input.ModifiedSequence).Length - 1;
            var charges = Math.Min(input.PrecursorCharge, 3);
            var ionCount = 2 * residues * charges;

            Assert.AreEqual(spectrumDisplayInfo.SpectrumPeaksInfo.Peaks.Length, ionCount);
            
            // Construct a prosit output object so that we can construct a spectrum for comparison.
            // There really is no easier way to do this without rewriting a lot of code for parsing the
            // flattened intensities and adding lots of extra test code inside of Skyline code.
            var fakePrositOutputTensors = new MapField<string, TensorProto>();
            var tensor = new TensorProto();
            tensor.TensorShape = new TensorShapeProto();
            tensor.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim() { Size = 1 });
            tensor.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim() { Size = spectrum.Length });
            tensor.FloatVal.AddRange(spectrum);
            fakePrositOutputTensors[PrositIntensityModel.PrositIntensityOutput.OUTPUT_KEY] = tensor;

            var fakePrositOutput = new PrositIntensityModel.PrositIntensityOutput(fakePrositOutputTensors);
            var ms2Spectrum = new PrositMS2Spectrum(Program.MainWindow.Document.Settings,
                peptidePrecursorNCE.WithNCE((int) (input.NormalizedCollisionEnergy * 100.0f)), 0, fakePrositOutput);

            // Compare the spectra
            AssertEx.AreEqualDeep(ms2Spectrum.SpectrumPeaks.Peaks, spectrumDisplayInfo.SpectrumPeaksInfo.Peaks);
        }
    }

    public class PrositRetentionTimeQuery : PrositQuery
    {
        private string[] _modifiedSequences;
        private float[] _iRTs;

        public PrositRetentionTimeQuery(string[] modifiedSequences, float[] iRTs)
        {
            _modifiedSequences = modifiedSequences;
            _iRTs = iRTs;
        }

        public static PrositRetentionTimeQuery FromTensors(PredictRequest request, PredictResponse response)
        {
            // Sequences
            var seqs = request.Inputs[PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY];
            Assert.AreEqual(seqs.TensorShape.Dim.Count, 2);
            Assert.AreEqual(seqs.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            var decodedSeqs = PrositHelpers.DecodeSequences(seqs);

            var outputs = response.Outputs[PrositRetentionTimeModel.PrositRTOutput.OUTPUT_KEY].FloatVal.ToArray();

            return new PrositRetentionTimeQuery(decodedSeqs, outputs);
        }

        public override string ToCode()
        {
            var seqsCode = string.Format("new[] {{\r\n{0}\r\n    }}",
                string.Join(",\r\n", _modifiedSequences.Select(m => string.Format("        \"{0}\"", m))));

            var iRTCode = string.Format("new[] {{\r\n{0}\r\n    }}",
                string.Join(",\r\n", _iRTs.Select(irt => string.Format("        {0:0.0000}f", irt))));

            return string.Format("new PrositRetentionTimeQuery(\r\n    {0},\r\n    {1}\r\n),", seqsCode, iRTCode);
        }

        public override void AssertMatchesQuery(PredictRequest pr)
        {
            Assert.AreEqual(Model, pr.ModelSpec.Name);
            Assert.AreEqual(pr.Inputs.Count, 1);
            Assert.AreEqual(pr.Inputs.Keys.First(), PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY);
            var tensor = pr.Inputs[PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY];
            Assert.AreEqual(tensor.TensorShape.Dim.Count, 2);
            Assert.AreEqual(tensor.TensorShape.Dim[0].Size, _modifiedSequences.Length);
            Assert.AreEqual(tensor.TensorShape.Dim[1].Size, PrositConstants.PEPTIDE_SEQ_LEN);
            AssertEx.AreEqualDeep(_modifiedSequences,
                PrositHelpers.DecodeSequences(pr.Inputs[PrositRetentionTimeModel.PrositRTInput.PEPTIDES_KEY]));
        }

        public void AssertMatchesSpectra(SpectrumDisplayInfo[] spectrumDisplayInfos)
        {
            var iRTIndex = 0;
            foreach (var info in spectrumDisplayInfos.Where(i => i != null))
            {
                if (Equals(info.Precursor.LabelType, IsotopeLabelType.heavy))
                    --iRTIndex; // Reuse previous iRT, since we only made a single iRT prediction for heavy and light

                AssertMatchesSpectrum(_iRTs[iRTIndex++], info);
            }
        }

        public void AssertMatchesSpectrum(SpectrumDisplayInfo spectrumDisplayInfo)
        {
            AssertMatchesSpectrum(_iRTs[0], spectrumDisplayInfo);
        }

        public static void AssertMatchesSpectrum(float iRT, SpectrumDisplayInfo spectrumDisplayInfo)
        {
            var expected = iRT * Math.Sqrt(PrositRetentionTimeModel.PrositRTOutput.iRT_VARIANCE) +
                           PrositRetentionTimeModel.PrositRTOutput.iRT_MEAN;

            Assert.AreEqual(expected, spectrumDisplayInfo.RetentionTime);
        }

        public override string Model => PrositRetentionTimeModel.Models.First();

        public override PredictResponse Response
        {
            get
            {
                var pr = new PredictResponse();
                pr.ModelSpec = new ModelSpec { Name = Model };

                // Construct Tensor
                var tp = new TensorProto { Dtype = DataType.DtFloat };

                // Populate with data
                tp.FloatVal.AddRange(_iRTs);
                tp.TensorShape = new TensorShapeProto();
                tp.TensorShape.Dim.Add(new TensorShapeProto.Types.Dim { Size = _iRTs.Length });
                pr.Outputs[PrositRetentionTimeModel.PrositRTOutput.OUTPUT_KEY] = tp;

                return pr;
            }
        }
    }

    /// <summary>
    /// A fake prediction client for logging predictions and returning cached
    /// predictions. For logging, it needs to be constructed with a server address.
    /// For returning cached predictions, a queue of expected queries should be passed in.
    /// </summary>
    public class FakePrositPredictionClient : PrositPredictionClient
    {
        private List<PrositQuery> _expectedQueries;

        public FakePrositPredictionClient(string server) :
            base(PrositConfig.GetPrositConfig())
        {
            QueryIndex = 0;
        }

        public FakePrositPredictionClient(List<PrositQuery> expectedQueries)
        {
            _expectedQueries = expectedQueries;
            QueryIndex = 0;
        }

        public int QueryIndex { get; private set; }

        public override PredictResponse Predict(PredictRequest request, CallOptions options)
        {
            try
            {
                PrositSkylineIntegrationTest.PING_QUERY_MS2.AssertMatchesQuery(request);
                // If this is a ping ms2 request, silently return and don't log
                return PrositSkylineIntegrationTest.PING_QUERY_MS2.Response;
            }
            catch(AssertFailedException)
            {
                try
                {
                    PrositSkylineIntegrationTest.PING_QUERY_IRT.AssertMatchesQuery(request);
                    // If this is a ping irt request, silently return and don't log
                    return PrositSkylineIntegrationTest.PING_QUERY_IRT.Response;
                }
                catch
                {
                    // ignore
                }

            }

            // Logging mode
            if (_expectedQueries == null)
            {
                var response = base.Predict(request, options);
                LogQuery(request, response);
                return response;
            }

            // Caching mode
            if (QueryIndex == _expectedQueries.Count)
                Assert.Fail("Unexpected call to Predict (No more queries). Model: {0}", request.ModelSpec.Name);

            var nextQuery = _expectedQueries[QueryIndex++];
            nextQuery.AssertMatchesQuery(request);
            return nextQuery.Response;
        }

        private void LogQuery(PredictRequest request, PredictResponse response)
        {
            if (request.ModelSpec.Name.StartsWith(PrositIntensityModel.Models.First()))
                Console.WriteLine(@"    " + PrositIntensityQuery.FromTensors(request, response).ToCode().Replace("\n", "\n    "));
            else if (request.ModelSpec.Name.StartsWith(PrositRetentionTimeModel.Models.First()))
                Console.WriteLine(@"    " +
                    PrositRetentionTimeQuery.FromTensors(request, response).ToCode().Replace("\n", "\n    "));
            else
                Assert.Fail("Unknown model \"{0}\"", request.ModelSpec.Name);
        }
    }
}