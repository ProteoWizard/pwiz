#
# Original author: Brendan MacLean <brendanx .at. u.washington.edu>,
#                  MacCoss Lab, Department of Genome Sciences, UW
#
# Copyright 2009 University of Washington - Seattle, WA
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
##


import modules generate-version ;
if [ modules.peek : NT ] && --i-agree-to-the-vendor-licenses in [ modules.peek : ARGV ]
{
    import path feature errors regex notfile ;
    path-constant SKYLINE_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Skyline ;
    path-constant PWIZ_WRAPPER_PATH : $(PWIZ_ROOT_PATH)/pwiz_tools/Shared/ProteowizardWrapper ;
    path-constant BIBLIO_SPEC_PATH :  $(PWIZ_ROOT_PATH)/pwiz_tools/Shared/BiblioSpec ;
    path-constant CRT_PATH : "$(SKYLINE_PATH)/University of Washington (MacCoss Lab).crt" ;
    constant CRT_KEY : "key_637015839" ;
    path-constant NUGET_PATH : "C:/Program Files/dotnet/dotnet.exe" ;
    if ! [ path.exists $(NUGET_PATH) ]
    {
        path-constant NUGET_PATH : "C:/Program Files/Microsoft Visual Studio/2022/Community/dotnet/runtime/dotnet.exe" ;
        if ! [ path.exists $(NUGET_PATH) ]
        {
            path-constant NUGET_PATH : "C:/Program Files/Microsoft Visual Studio/2022/Community/dotnet/net8.0/runtime/dotnet.exe" ;
        }
    }

    if ! --incremental in [ modules.peek : ARGV ]
    {
       echo "Updating submodules for Hardklor etc..." ;
       SHELL "git submodule update --init --recursive" ;
    }

    local ymd = [ MATCH "([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])" : [ modules.peek : JAMDATE ] ] ;
    local year_2digit = [ MATCH "[0-9][0-9]([0-9][0-9])" : $(ymd) ] ;

    constant SKYLINE_YEAR : 24 ;
    constant SKYLINE_ORDINAL : 1 ; # A count of official releases made so far this year
    constant SKYLINE_BRANCH : 1 ; # 0 - release, 1 - daily, 9 - feature complete daily

    # when releasing a patch for a previous year, the day-of-year component will be incremented by 365 for each year difference
    # (figuring out leap year here seems like overkill)
    constant SKYLINE_DOY : [ CALC [ CALC [ CALC $(year_2digit) - $(SKYLINE_YEAR) ] * 365 ] + [ day_of_year $(ymd) ] ] ;
    constant SKYLINE_TIMESTAMP : $(SKYLINE_BRANCH) $(SKYLINE_DOY) ;

    local v = $(SKYLINE_YEAR) $(SKYLINE_ORDINAL) $(SKYLINE_BRANCH) $(SKYLINE_DOY) ;
    constant SKYLINE_VERSION : $(v:J=) ;

    if $(SKYLINE_BRANCH) = 0
    {
        constant SKYLINE_TARGETNAME : "Skyline" ;
    }
    else
    {
        constant SKYLINE_TARGETNAME : "Skyline-daily" ;
    }

    rule generate-skyline-AssemblyInfo.cs ( name : description : path )
    {
        generate-version.AssemblyInfo.cs $(SKYLINE_PATH)/$(path) : $(SKYLINE_YEAR) : $(SKYLINE_ORDINAL) : $(SKYLINE_TIMESTAMP:J=.) : $(PWIZ_GIT_REV)
            : $(name) $(description) "University of Washington" "Skyline" ;
    }

    # generate AssemblyInfo.cs for executables
    generate-skyline-AssemblyInfo.cs "Skyline" : "Targeted Mass Spec Environment" : "Properties/AssemblyInfo.cs" ;
    generate-skyline-AssemblyInfo.cs "SkylineCmd" : "Command-line access to Skyline" : "SkylineCmd/Properties/AssemblyInfo.cs" ;
    generate-skyline-AssemblyInfo.cs "SkylineBatch" : "Batch Processing with Skyline" : "Executables/SkylineBatch/SkylineBatch/Properties/AssemblyInfo.cs" ;
    #generate-skyline-AssemblyInfo.cs "SkylineRunner" : "Command-line access to Skyline" : "SkylineRunner/Properties/AssemblyInfo.cs" ;
    generate-skyline-AssemblyInfo.cs "TestRunner" : "Command-line testing tool" : "TestRunner/Properties/AssemblyInfo.cs" ;
    generate-skyline-AssemblyInfo.cs "SkylineTester" : "Testing GUI" : "SkylineTester/Properties/AssemblyInfo.cs" ;
    generate-skyline-AssemblyInfo.cs "SkylineNightly" : "Nightly Test Runner" : "SkylineNightly/Properties/AssemblyInfo.cs" ;
    generate-skyline-AssemblyInfo.cs "SkylineNightlyShim" : "Thin wrapper for SkylineNightly, updates SkylineNightly from TeamCity then executes it, passing along any provided args" : "SkylineNightlyShim/Properties/AssemblyInfo.cs" ;

    .teamcity-test-decoration = "" ;
    if --teamcity-test-decoration in [ modules.peek : ARGV ]
    {
        .teamcity-test-decoration = "offscreen=0 teamcitytestdecoration=1" ;
    }

    rule do_nuget_restore ( targets + : source * : properties * )
    {
        MSVC_CURRENT_SETUP_SCRIPT on $(targets) = [ get-current-msvc-setup-script "<toolset-msvc:version>14.3" ] ;
    }

    actions do_nuget_restore
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        "$(NUGET_PATH)" restore $(SKYLINE_PATH)/Skyline.sln
    }

    rule build-properties ( targets + : sources * : properties * )
    {
        if <variant>debug in $(properties) ||
           ( ( <debug-symbols>on in $(properties) ) && ( ! <variant>release in $(properties) ) )
        {
            CONFIGURATION on $(<[1]) = "Debug" ;
        }
        else
        {
            CONFIGURATION on $(<[1]) = "Release" ;
        }

        TARGET_NAME on $(targets) = $(SKYLINE_TARGETNAME) ;

        local address-model = [ feature.get-values <address-model> : $(properties) ] ;
        ADDRESS_MODEL on $(targets) = $(address-model:E=32) ;

        local .version = "$(SKYLINE_YEAR).$(SKYLINE_ORDINAL).$(SKYLINE_BRANCH).$(SKYLINE_DOY)" ;
        VERSION on $(targets) = $(.version) ;

        local .msvcSetupScript = [ get-current-msvc-setup-script $(properties) ] ;
        local .msvcSetupScriptX86 = [ regex.replace $(.msvcSetupScript) "amd64" "x86" ] ;
        if [ path.exists $(CRT_PATH) ]
        {
            SHELL "del $(SKYLINE_PATH)\\SignAfterPublishKey.bat" ;
            local batch-file-text = "$(.msvcSetupScriptX86)\r\nCALL SignAfterPublish.bat $(CRT_KEY) %*" ;
            local batch-file-name = $(SKYLINE_PATH)\\SignAfterPublishKey.bat ;
            local batch-file = @($(batch-file-name):E=$(batch-file-text)) ;
        }

        local location = [ path.make [ feature.get-values location : $(properties) ] ] ;
        OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
        INTERMEDIATE_PATH on $(targets) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/obj/" ;
        JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
        MSVC_CURRENT_SETUP_SCRIPT on $(targets) = $(.msvcSetupScript) ;
        WORKERS on $(targets) = [ CALC [ modules.peek : NUMBER_OF_CORES ] - 2 ] ;
    }
    
    rule do_skyline_build ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }
    
    rule do_skyline_clean ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    rule do_Inspect_Code ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_build
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)

        echo Building Skyline in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:SkylineCmd /nologo /verbosity:minimal
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:Skyline /t:TestRunner /nologo /verbosity:minimal
        msbuild $(SKYLINE_PATH)/Executables/AssortResources/AssortResources.sln /p:Configuration=$(CONFIGURATION);Platform="Any CPU";OutDir=$(OUTPUT_PATH) /t:AssortResources /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%
    }

    actions do_skyline_clean
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)

        echo Cleaning Skyline so subsequent builds copy files properly...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:Clean /nologo /verbosity:minimal
    }

    rule do_skyline_batch ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_batch
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        echo Building SkylineBatch in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Executables/SkylineBatch/SkylineBatch.sln /p:Configuration=$(CONFIGURATION);OutDir=$(OUTPUT_PATH) /t:SkylineBatchTest /nologo /verbosity:minimal
        set status=%ERRORLEVEL%
        exit %status%
    }

    rule do_skyline_batch_test ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_batch_test
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        echo Unit testing SkylineBatch in $(CONFIGURATION:L) configuration...
        vstest.console.exe $(OUTPUT_PATH)\SkylineBatchTest.dll
        set status=%ERRORLEVEL%
        exit %status%
    }

    rule do_skyline_test ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        chcp 437
        echo Building Skyline Test in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:Test /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        echo Unit testing Skyline in $(CONFIGURATION:L) configuration...
        $(OUTPUT_PATH)/TestRunner.exe log=Test.log buildcheck=1 test=Test.dll $(.teamcity-test-decoration)
        set status=%ERRORLEVEL%
        exit %status%
    }
    
    rule do_skyline_test_a ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test_a
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        chcp 437
        echo Building Skyline Test Data in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:TestData /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        echo Unit testing pwiz data reading in Skyline in $(CONFIGURATION:L) configuration...
        $(OUTPUT_PATH)/TestRunner.exe log=TestData.log buildcheck=1 test=TestData.dll $(.teamcity-test-decoration)
        set status=%ERRORLEVEL%
        exit %status%
    }
    
    rule do_skyline_test_pass1_subset ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test_pass1_subset
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        chcp 437
        echo Building Skyline Test Data in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:TestData /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        echo Testing subset of Skyline's leak checking (pass1) in $(CONFIGURATION:L) configuration...
        $(OUTPUT_PATH)/TestRunner.exe log=TestPass1Subset.log buildcheck=1 pass1=on pass2=off test=TestInstrumentInfo,TestQcTraces,TestTicChromatogram,TestDiaSearchFixedWindows $(.teamcity-test-decoration)
        set status=%ERRORLEVEL%
        exit %status%
    }
    
    rule do_skyline_test_functional ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions do_skyline_test_functional
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        chcp 437
        echo Building Skyline TestFunctional in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:TestFunctional /t:TestConnected /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        REM docker > nul 2>&1
        REM if ERRORLEVEL 1 (
            echo Functional testing Skyline in $(CONFIGURATION:L) configuration...
            $(OUTPUT_PATH)TestRunner.exe log=TestFunctional.log buildcheck=1 test=TestFunctional.dll,TestConnected.dll $(.teamcity-test-decoration)
            set status=%ERRORLEVEL%
        REM ) ELSE (
        REM    echo Functional testing Skyline in $(CONFIGURATION:L) configuration with $(WORKERS) Docker workers...
        REM     FOR /L %I IN (1,1,10) DO $(OUTPUT_PATH)TestRunner.exe log=TestFunctional.log parallelmode=server workercount=$(WORKERS) keepworkerlogs=1 waitforworkers=1 buildcheck=1 language=en loop=1 test=TestFunctional.dll,TestConnected.dll $(.teamcity-test-decoration)
        REM )
        exit %status%
    }
    
    rule do_skyline_test_passed ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    # use SkylineTester to generate simple distros for download from TeamCity
    # SkylineTester.zip and SkylineNightly.zip are part of the Skyline team's in-house nightly test scheme
    # BiblioSpec.zip is linked from the Skyline support website's BiblioSpec page, it contains BlibToMs2 whereas the Skyline distro does not
    actions do_skyline_test_passed
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        chcp 437
        echo Building Skyline TestConnected, TestTutorial, TestPerf, SkylineTester, SkylineNightly in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:TestTutorial /t:TestPerf /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%
    }
    
    rule create_skyline_zips ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions create_skyline_zips
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        echo SkylineTester, SkylineNightly in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:SkylineTester /t:SkylineNightly /t:SkylineNightlyShim /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        echo Creating SkylineTester.zip
        $(OUTPUT_PATH)SkylineTester.exe $(OUTPUT_PATH)SkylineTester.zip
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        echo Creating SkylineNightly.zip
        $(OUTPUT_PATH)SkylineTester.exe $(OUTPUT_PATH)SkylineNightly.zip
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        echo Creating BiblioSpec.zip
        $(OUTPUT_PATH)SkylineTester.exe $(OUTPUT_PATH)BiblioSpec.zip
    }
    
    rule create_skylinetester_zip_with_testdata ( targets + : sources * : properties * )
    {
        return [ build-properties $(targets) : $(sources) : $(properties) ] ;
    }

    actions create_skylinetester_zip_with_testdata
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        echo SkylineTesterWithTestData in $(CONFIGURATION:L) configuration...
        msbuild $(SKYLINE_PATH)/Skyline.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);OutDir=$(OUTPUT_PATH);MSBuildAssemblyName=$(TARGET_NAME) /t:SkylineTester /t:SkylineNightly /t:SkylineNightlyShim /nologo /verbosity:minimal
        IF ERRORLEVEL 1 exit %ERRORLEVEL%

        echo Creating SkylineTester.zip
        $(OUTPUT_PATH)SkylineTester.exe $(OUTPUT_PATH)SkylineTesterWithTestData.zip
    }
    
    make msparser.dll : : @make_fake_msparser_dll : <location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM) ;
    make msparserD.dll : : @make_fake_msparser_dll : <location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM) ;
    explicit msparser.dll msparserD.dll ;
    actions make_fake_msparser_dll
    {
        @($(STDOUT):E=
        This is a fake file so Skyline can point at both msparser.dll and msparserD.dll unconditionally.
        ) > "$(<)"
    }


    constant SKYLINE_KOINA_CONFIG : "$(SKYLINE_PATH)/Model/Koina/Config/KoinaConfig_development.xml" ;
    make KoinaConfig.xml : $(SKYLINE_KOINA_CONFIG) : @common.copy : <location>$(SKYLINE_PATH)/Model/Koina/Config ;

    rule build-location ( properties * )
    {
        local result ;
        # don't override the location when it's already set
        if ! <location> in $(properties:G)
        {
            if <variant>debug in $(properties) ||
               ( ( <debug-symbols>on in $(properties) ) && ( ! <variant>release in $(properties) ) )
            {
                result = <location>$(SKYLINE_PATH)/bin/$(PLATFORM)/Debug ;
            }
            else
            {
                result = <location>$(SKYLINE_PATH)/bin/$(PLATFORM)/Release ;
            }
        }
        else
        {
            result = $(properties) ;
        }

        # add dependency on fake msparser[D].dll (solely based on which runtime pwiz links to, not any other feature)
        if <runtime-debugging>on in $(properties)
        {
            result += <dependency>msparser.dll ;
        }
        else
        {
            result += <dependency>msparserD.dll ;
        }
        return $(result) ;
    }
    
    rule install-vendor-api-dependencies-to-debug-and-release ( properties * )
    {
        return [ install-vendor-api-dependencies-to-locations $(SKYLINE_PATH)/bin/x64/Debug $(SKYLINE_PATH)/bin/x64/Release : $(properties) ] ;
    }

    notfile NugetRestore : @do_nuget_restore ;

    # this is really the main action for building Skyline and leaving Skyline.exe intact, but it is explicit 
    make Skyline.exe
        : # sources
        : # actions
            @do_skyline_build
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <assembly>../../pwiz/utility/bindings/CLI//pwiz_data_cli
            <assembly>../../pwiz/utility/bindings/CLI/timstof_prm_scheduler//PrmPasefScheduler
            <dependency>../../pwiz_tools/commandline//msconvert/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <assembly>TestDiagnostics//TestDiagnostics
            <conditional>@build-location
            #<conditional>@install-vendor-api-dependencies
            <conditional>@install-vendor-api-dependencies-to-debug-and-release
            <dependency>NugetRestore
            <dependency>../../pwiz/utility/bindings/CLI//pwiz_data_cli/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz/utility/bindings/CLI//pwiz_data_cli.xml/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz/utility/bindings/CLI/timstof_prm_scheduler//PrmPasefScheduler/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz/utility/bindings/CLI/timstof_prm_scheduler//PrmPasefScheduler.xml/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>TestDiagnostics//TestDiagnostics/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>Executables/Hardklor//Hardklor/<location>$(SKYLINE_PATH)/Executables/Hardklor/obj/$(PLATFORM)
            <dependency>../../pwiz_tools/BiblioSpec/src//BlibBuild/<location>$(BIBLIO_SPEC_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz_tools/BiblioSpec/src//BlibFilter/<location>$(BIBLIO_SPEC_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz_tools/BiblioSpec/src//BlibToMs2/<location>$(BIBLIO_SPEC_PATH)/obj/$(PLATFORM)
            <dependency>$(PWIZ_ROOT_PATH)//INSTALLER_VENDOR_FILES.txt
            <dependency>KoinaConfig.xml
    ;
    explicit Skyline.exe ;

    # this is the default target which builds Skyline
    make Build
        : # sources
        : # actions
            @do_skyline_build
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <assembly>../../pwiz/utility/bindings/CLI//pwiz_data_cli
            <assembly>../../pwiz/utility/bindings/CLI/timstof_prm_scheduler//PrmPasefScheduler
            <assembly>TestDiagnostics//TestDiagnostics
            <conditional>@build-location
            <dependency>Skyline.exe
    ;

    if --teamcity-test-decoration in [ modules.peek : ARGV ]
    {
        explicit Build ;
    }


    make InspectCode
        : # sources
        : # actions
            @do_Inspect_Code
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <assembly>../../pwiz/utility/bindings/CLI//pwiz_data_cli
            <assembly>../../pwiz/utility/bindings/CLI/timstof_prm_scheduler//PrmPasefScheduler
            <conditional>@build-location
            <dependency>Skyline.exe
            <dependency>../../pwiz/utility/bindings/CLI//pwiz_data_cli/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz/utility/bindings/CLI//pwiz_data_cli.xml/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz/utility/bindings/CLI/timstof_prm_scheduler//PrmPasefScheduler/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz/utility/bindings/CLI/timstof_prm_scheduler//PrmPasefScheduler.xml/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz_aux/msrc/utility/vendor_api/Waters//install_pwiz_vendor_api_waters/<location>$(PWIZ_WRAPPER_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz_tools/BiblioSpec/src//BlibBuild/<runtime-debugging>off/<location>$(BIBLIO_SPEC_PATH)/obj/$(PLATFORM)
            <dependency>../../pwiz_tools/BiblioSpec/src//BlibFilter/<runtime-debugging>off/<location>$(BIBLIO_SPEC_PATH)/obj/$(PLATFORM)
    ;
        
    
        
    make SkylineBatch.exe
        : # sources
        : # actions
            @do_skyline_batch
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;
        
    make SkylineBatchTest
        : # sources
        : # actions
            @do_skyline_batch_test
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>SkylineBatch.exe
        ;
    explicit SkylineBatchTest ;
        
    
        
    make Test
        : # sources
        : # actions
            @do_skyline_test
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;
    
    if [ modules.peek : WIX ]
    {
        alias TestData : Executables/Installer//Test ;
    }
    else
    {
        make TestData
            : # sources
            : # actions
                @do_skyline_test_a
            : # requirements
                <link>shared:<build>no
                <conditional>@no-express-requirement
                <conditional>@msvc-dotnet-requirement
                <conditional>@build-location
                <dependency>Skyline.exe
            ;
    }

    make TestPass1Subset
        : # sources
        : # actions
            @do_skyline_test_pass1_subset
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;

    make TestFunctional
        : # sources
        : # actions
            @do_skyline_test_functional
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;
        
    make Skyline.passed
        : # sources
        : # actions
            @do_skyline_test_passed
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
            # note: we build TestTutorial.dll in do_skyline_build, but it takes too long to run in a Jam build
        ;

    make SkylineTester.zip
        : # sources
        : # actions
            @create_skyline_zips
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;

    make SkylineTesterWithTestData.zip
        : # sources
        : # actions
            @create_skylinetester_zip_with_testdata
        : # requirements
            <link>shared:<build>no
            <conditional>@no-express-requirement
            <conditional>@msvc-dotnet-requirement
            <conditional>@build-location
            <dependency>Skyline.exe
        ;
    explicit SkylineTesterWithTestData.zip ;

    explicit InspectCode ;
}
