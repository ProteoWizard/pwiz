#
# Original author: Matt Chambers <matt.chambers42 .@. gmail.com>
#
# Copyright 2020
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import modules path feature ;

path-constant THIS_PATH : . ;

# read these from global module
TEST_PRECOMMAND = [ modules.peek : TEST_PRECOMMAND ] ;
TEST_POSTCOMMAND = [ modules.peek : TEST_POSTCOMMAND ] ;

rule setup_templates ( targets + : sources * : properties * )
{
    local .version = "$(SKYLINE_YEAR).$(SKYLINE_ORDINAL).$(SKYLINE_BRANCH).$(SKYLINE_DOY)" ;
    VERSION on $(targets) = $(.version) ;

    TARGET_NAME on $(targets) = $(SKYLINE_TARGETNAME) ;

    local address-model = [ feature.get-values <address-model> : $(properties) ] ;

    if $(address-model) = 64
    {
        ARTIFACT_NAME on $(targets) = $(SKYLINE_TARGETNAME)-$(.version)-x86_64 ;
        SKYLINE_BUILD_PATH on $(targets) = "$(SKYLINE_PATH)\\bin\\x64\\Release" ;
        ARCH on $(targets) = x64 ;
    }
    else
    {
        ARTIFACT_NAME on $(targets) = $(SKYLINE_TARGETNAME)-$(.version)-x86 ;
        SKYLINE_BUILD_PATH on $(targets) = "$(SKYLINE_PATH)\\bin\\x86\\Release" ;
        ARCH on $(targets) = x86 ;
    }

    INSTALL_PATH on $(targets) = "%LocalAppData%\\Programs\\$(SKYLINE_TARGETNAME)" ;

    ADDRESS_MODEL on $(targets) = $(address-model:E=32) ;
    LOCATION on $(targets) = [ path.native [ feature.get-values <location> : $(properties) ]  ] ;
    OUTPUT_PATH on $(targets) = [ path.native $(PWIZ_BUILD_PATH)/SkylineDeploy/ ] ; # OutDir requires trailing slash
    INTERMEDIATE_PATH on $(targets) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/obj/" ;
}


rule msbuild_deploy ( targets + : sources * : properties * )
{
    setup_templates $(targets) : $(sources) : $(properties) ;
}

actions msbuild_deploy
{
    pushd "$(LOCATION)"
    "%WIX%\bin\candle.exe" $(ARTIFACT_NAME).wxs -nologo -arch $(ARCH) -dAddressModel=$(ADDRESS_MODEL) -dSkyline.TargetName=$(TARGET_NAME) -dSkyline.ProjectDir=$(SKYLINE_PATH) -dSkyline.TargetDir=$(SKYLINE_PATH)\bin\$(ARCH)\$(CONFIGURATION)
    "%WIX%\bin\light.exe" $(ARTIFACT_NAME).wixObj -nologo -ext WixUIExtension -ext WixNetFxExtension -cultures:en-us
    set EXIT=%ERRORLEVEL%
    if %EXIT% NEQ 0 exit %EXIT%
    echo Built $(ARTIFACT_NAME).msi > setup.exe
    popd
}

rule build-location ( properties * )
{
    local result ;
    # don't override the location when it's already set
    if ! <location> in $(properties:G)
    {
        local address-model = [ feature.get-values <address-model> : $(properties) ] ;

        if $(address-model) = 64
        {
            return <location>"$(SKYLINE_PATH)\\bin\\x64" ;
        }
        else
        {
            return <location>"$(SKYLINE_PATH)\\bin\\x86" ;
        }
    }
    else
    {
        return $(properties) ;
    }
}

make setup.exe
    : # sources
    : # actions
        @msbuild_deploy
    : # requirements
        <variant>debug:<build>no # don't make debug installs
        <dependency>../..//SkylineBatch.exe
        <conditional>@build-location
        <conditional>@msvc-requirement
    ;
    
.teamcity-test-decoration = "" ;
if --teamcity-test-decoration in [ modules.peek : ARGV ]
{
    .teamcity-test-decoration = "teamcitytestdecoration=1" ;
}

rule test_msi ( targets + : sources * : properties * )
{
    msbuild_deploy $(targets) : $(sources) : $(properties) ;
}

actions test_msi
{
    set name=TestSkylineInstall
    $(TEST_PRECOMMAND)

    $(MSVC_CURRENT_SETUP_SCRIPT)
    echo Installing $(ARTIFACT_NAME)...
    set TEMP=%LOCALAPPDATA%\Temp
    copy "$(LOCATION)\$(ARTIFACT_NAME).msi" "%TEMP%"
    $(PWIZ_LIBRARIES_PATH)\tuxliketimeout.exe 60000 msiexec /qn /l* "%TEMP%\$(ARTIFACT_NAME)-install.log" /norestart /i "%TEMP%\$(ARTIFACT_NAME).msi" REBOOT=ReallySuppress ALLUSERS=2 MSIINSTALLPERUSER=1
    set EXIT=%ERRORLEVEL%
    IF %EXIT% NEQ 0 echo Install failed with code %EXIT%.
    set status=%EXIT%
    $(TEST_POSTCOMMAND)
    IF %EXIT% NEQ 0 (
      copy "%TEMP%\$(ARTIFACT_NAME)-install.log" "$(LOCATION)"
      del "%TEMP%\$(ARTIFACT_NAME).msi"
      $(TEST_POSTCOMMAND)
      exit %EXIT%
    )

    set PATH_TMP=%PATH%
    set PATH=
    copy "$(SKYLINE_BUILD_PATH)\*Test*.dll" "$(INSTALL_PATH)"
    copy "$(SKYLINE_BUILD_PATH)\Microsoft*.dll" "$(INSTALL_PATH)"
    copy "$(SKYLINE_BUILD_PATH)\TestRunner.exe*" "$(INSTALL_PATH)"
    $(PWIZ_LIBRARIES_PATH)\tuxliketimeout.exe 600000 "$(INSTALL_PATH)\TestRunner.exe" log=TestDataInstalled.log test=TestData.dll,TestDdaSearch loop=1 offscreen=0 language=en $(.teamcity-test-decoration)
    set TEST_EXIT=%ERRORLEVEL%
    IF %TEST_EXIT% NEQ 0 echo Deployment test failed with code %TEST_EXIT%.
    set PATH=%PATH_TMP%
    
    set name=TestSkylineUninstall
    $(TEST_PRECOMMAND)

    echo Uninstalling $(ARTIFACT_NAME)...
    $(PWIZ_LIBRARIES_PATH)\tuxliketimeout.exe 60000 msiexec /qn /l* "%TEMP%\$(ARTIFACT_NAME)-uninstall.log" /norestart /x "%TEMP%\$(ARTIFACT_NAME).msi" REBOOT=ReallySuppress
    set EXIT=%ERRORLEVEL%
    rmdir /s /q "$(INSTALL_PATH)"
    IF %TEST_EXIT% NEQ 0 IF %EXIT% NEQ 0 set status=%EXIT%
    IF %EXIT% NEQ 0 echo Uninstall failed with code %EXIT%.

    set status=%TEST_EXIT%
    $(TEST_POSTCOMMAND)
    IF %TEST_EXIT% EQU 0 echo Deployment test passed.
    IF %TEST_EXIT% EQU 0 echo Deployment test passed. > "$(LOCATION)\Test.passed"

    rmdir /s /q "$(INSTALL_PATH)"
    copy "%TEMP%\$(ARTIFACT_NAME)-install.log" "$(LOCATION)"
    copy "%TEMP%\$(ARTIFACT_NAME)-uninstall.log" "$(LOCATION)"
    del "%TEMP%\$(ARTIFACT_NAME).msi"

    IF %TEST_EXIT% NEQ 0 exit 1
}

make Test.passed
    : # sources
    : # actions
        @test_msi
    : # requirements
        <variant>debug:<build>no # don't test debug installs
        <dependency>setup.exe
        <conditional>@build-location
        <conditional>@msvc-requirement
    ;
explicit Test.passed ;
alias Test : Test.passed ;