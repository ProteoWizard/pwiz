<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NHibernate.Mapping.Attributes</name>
    </assembly>
    <members>
        <member name="T:NHibernate.Mapping.Attributes.AnyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.AnyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.AnyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.IdType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.IdTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.MetaType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.MetaTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Update">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.UpdateSpecified">
            <summary> Tells if Update has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Index">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.LazySpecified">
            <summary> Tells if Lazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AnyAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ArrayAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ArrayAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ArrayAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Inverse">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.InverseSpecified">
            <summary> Tells if Inverse has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.ElementClass">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.CollectionTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ArrayAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.AttributeIdentifierAttribute">
            <summary> Use this attribute to give a value to a field identified in a mapping attribute. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.AttributeIdentifierAttribute.#ctor(System.String)">
            <summary> Default constructor </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AttributeIdentifierAttribute.Name">
            <summary> Gets or sets the name used to identify the field (without the quotes). </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AttributeIdentifierAttribute.Value">
            <summary> Gets or sets the value of the identified field. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AttributeIdentifierAttribute.ValueObject">
            <summary> Gets or sets the value of the identified field. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AttributeIdentifierAttribute.ValueType">
            <summary> Gets or sets the value of the identified field. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.AttributeIdentifierAttribute.ValueFormat">
            <summary> Gets or sets the 'format' used by System.Enum.Format() in ValueObject. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.BagAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.BagAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.BagAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Inverse">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.InverseSpecified">
            <summary> Tells if Inverse has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.OrderBy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.CollectionTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.Generic">
            <summary>The concrete collection should use a generic version or an object-based version.</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BagAttribute.GenericSpecified">
            <summary> Tells if Generic has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.BaseAttribute">
            <summary>
            Attribute taking an order position.
            </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.BaseAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Mapping.Attributes.BaseAttribute"/> class.
            </summary>
            <remarks>
            This constructor is only called by classes that derive from <see cref="T:NHibernate.Mapping.Attributes.BaseAttribute"/>.
            </remarks>
            <param name="position">The position at which the attribute has been declared.</param>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.BaseAttribute.Position">
            <summary> The position at which the attribute has been declared. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.BaseAttribute.CompareTo(System.Object)">
            <summary> Compares the current instance with another object of the same type. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CacheAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CacheAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CacheAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CacheAttribute.Usage">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CacheAttribute.Region">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CacheAttribute.Include">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CacheInclude">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheInclude.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheInclude.All">
            <summary>all</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheInclude.NonLazy">
            <summary>non-lazy</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CacheMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheMode.Get">
            <summary>get</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheMode.Ignore">
            <summary>ignore</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheMode.Normal">
            <summary>normal</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheMode.Put">
            <summary>put</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheMode.Refresh">
            <summary>refresh</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CacheUsage">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheUsage.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheUsage.ReadOnly">
            <summary>read-only</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheUsage.ReadWrite">
            <summary>read-write</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheUsage.NonStrictReadWrite">
            <summary>nonstrict-read-write</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CacheUsage.Transactional">
            <summary>transactional</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ClassAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ClassAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ClassAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.NameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Proxy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.ProxyType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.LazySpecified">
            <summary> Tells if Lazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.SchemaAction">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.DiscriminatorValue">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.DiscriminatorValueObject">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.DiscriminatorValueEnumFormat">
            <summary>'format' used by System.Enum.Format() in DiscriminatorValueObject</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Abstract">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.AbstractSpecified">
            <summary> Tells if Abstract has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Polymorphism">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.DynamicUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.DynamicUpdateSpecified">
            <summary> Tells if DynamicUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.DynamicInsert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.DynamicInsertSpecified">
            <summary> Tells if DynamicInsert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.SelectBeforeUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.SelectBeforeUpdateSpecified">
            <summary> Tells if SelectBeforeUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.RowId">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ClassAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CollectionFetchMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionFetchMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionFetchMode.Select">
            <summary>select</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionFetchMode.Join">
            <summary>join</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionFetchMode.Subselect">
            <summary>subselect</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CollectionIdAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CollectionIdAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CollectionIdAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CollectionIdAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CollectionIdAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CollectionIdAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CollectionIdAttribute.Length">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CollectionLazy">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionLazy.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionLazy.True">
            <summary>true</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionLazy.False">
            <summary>false</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CollectionLazy.Extra">
            <summary>extra</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ColumnAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ColumnAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ColumnAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Length">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Precision">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Scale">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.NotNull">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.NotNullSpecified">
            <summary> Tells if NotNull has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.UniqueKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.SqlType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Index">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ColumnAttribute.Default">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CommentAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CommentAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CommentAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CommentAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ComponentAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ComponentAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ComponentAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Update">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.UpdateSpecified">
            <summary> Tells if Update has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.LazySpecified">
            <summary> Tells if Lazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ComponentPropertyAttribute">
            <summary> Use this attribute to define a "component" on a property/field. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ComponentPropertyAttribute.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentPropertyAttribute.ComponentType">
            <summary> Gets or sets the type of the component. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ComponentPropertyAttribute.PropertyName">
            <summary> Gets or sets the name of the property which has the type of the component. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CompositeElementAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeElementAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeElementAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeElementAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeElementAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeElementAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CompositeIdAttribute">
            <summary>A composite key may be modelled by a .NET class with a property for each key column. The class must be Serializable and override equals() and hashCode()</summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeIdAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeIdAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.Mapped">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.MappedSpecified">
            <summary> Tells if Mapped has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIdAttribute.UnsavedValue">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CompositeIndexAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeIndexAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeIndexAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIndexAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeIndexAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CompositeMapKeyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeMapKeyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CompositeMapKeyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CompositeMapKeyAttribute.Class">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CreateAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CreateAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.CreateAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.CreateAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.CustomSqlCheck">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CustomSqlCheck.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CustomSqlCheck.None">
            <summary>none</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CustomSqlCheck.RowCount">
            <summary>rowcount</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.CustomSqlCheck.Param">
            <summary>param</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.DatabaseObjectAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DatabaseObjectAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DatabaseObjectAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.DefinitionAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DefinitionAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DefinitionAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DefinitionAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DefinitionAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.DialectScopeAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DialectScopeAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DialectScopeAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DialectScopeAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DialectScopeAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.DiscriminatorAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DiscriminatorAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DiscriminatorAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.NotNull">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.NotNullSpecified">
            <summary> Tells if NotNull has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.Length">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.Force">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.ForceSpecified">
            <summary> Tells if Force has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DiscriminatorAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.DropAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DropAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DropAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DropAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.DynamicComponentAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DynamicComponentAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.DynamicComponentAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.Update">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.UpdateSpecified">
            <summary> Tells if Update has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.DynamicComponentAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ElementAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ElementAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ElementAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Length">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Precision">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Scale">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.NotNull">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.NotNullSpecified">
            <summary> Tells if NotNull has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ElementAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.FetchMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FetchMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FetchMode.Select">
            <summary>select</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FetchMode.Join">
            <summary>join</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.FilterAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FilterAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FilterAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterAttribute.Condition">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.FilterDefAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FilterDefAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FilterDefAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterDefAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterDefAttribute.Condition">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterDefAttribute.UseManyToOne">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterDefAttribute.UseManyToOneSpecified">
            <summary> Tells if UseManyToOne has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterDefAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.FilterParamAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FilterParamAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FilterParamAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterParamAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FilterParamAttribute.Type">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.FlushMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FlushMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FlushMode.Auto">
            <summary>auto</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FlushMode.Manual">
            <summary>manual</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FlushMode.Always">
            <summary>always</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.FlushMode.Never">
            <summary>never</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.FormulaAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FormulaAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.FormulaAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.FormulaAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.GeneratorAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.GeneratorAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.GeneratorAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.GeneratorAttribute.Class">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.HbmSerializer">
            <summary>
            Build hbm.xml files from entities (Class, Subclass or JoinedSubclass).
            </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.Default">
            <summary> Gets a static instance of HbmSerializer (if you don't want/need to create an instance). </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmWriter">
            <summary> Gets or sets the HbmWriter to use. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.Validate">
            <summary> Gets or sets whether generated xml files must be validated against NHibernate mapping schema. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.WriteDateComment">
            <summary> Gets or sets whether generated xml files will contain a comment with the date/time of the generation. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.Error">
            <summary> Gets errors that occur while serializing. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmDefaultLazy">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmSchema">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmDefaultCascade">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmDefaultAccess">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmDefaultAccessType">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmAutoImport">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmNamespace">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmAssembly">
            <summary> Gets or sets this "hibernate-mapping" attribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmDefaultLazyIsSpecified">
            <summary> Gets or sets if this "hibernate-mapping" attribute is specified </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmAutoImportIsSpecified">
            <summary> Gets or sets if this "hibernate-mapping" attribute is specified </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmSchemaIsSpecified">
            <summary> Gets or sets if this "hibernate-mapping" attribute is specified </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmDefaultAccessIsSpecified">
            <summary> Gets or sets if this "hibernate-mapping" attribute is specified </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmAssemblyIsSpecified">
            <summary> Gets or sets if this "hibernate-mapping" attribute is specified </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmNamespaceIsSpecified">
            <summary> Gets or sets if this "hibernate-mapping" attribute is specified </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmSerializer.HbmDefaultCascadeIsSpecified">
            <summary> Gets or sets if this "hibernate-mapping" attribute is specified </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.String,System.Reflection.Assembly)">
            <summary> Writes a hbm.xml file in the specified directory for each mapped class in the specified assembly. </summary>
            <param name="directory">Directory where each serialized hbm.xml file will be written.</param>
            <param name="assembly">Assembly used to extract user-defined types containing a valid attribute (can be [Class] or [xSubclass]).</param>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.Reflection.Assembly,System.String)">
            <summary> Writes the mapping of all mapped classes of the specified assembly in the specified hbm.xml file. </summary>
            <param name="assembly">Assembly used to extract user-defined types containing a valid attribute (can be [Class] or [xSubclass]).</param>
            <param name="filePath">Where the xml is written.</param>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.IO.Stream,System.Reflection.Assembly)">
            <summary> Writes the mapping of all mapped classes of the specified assembly in the specified stream. </summary>
            <param name="stream">Where the xml is written.</param>
            <param name="assembly">Assembly used to extract user-defined types containing a valid attribute (can be [Class] or [xSubclass]).</param>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.Reflection.Assembly)">
            <summary> Writes the mapping of all mapped classes of the specified assembly in a MemoryStream and returns it. </summary>
            <param name="assembly">Assembly used to extract user-defined types containing a valid attribute (can be [Class] or [xSubclass]).</param>
            <returns>Stream containing the XML mapping.</returns>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.Type)">
            <summary> Writes the mapping of the specified class in a MemoryStream and returns it. </summary>
            <param name="type">User-defined type containing a valid attribute (can be [Class] or [xSubclass]).</param>
            <returns>Stream containing the XML mapping.</returns>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.String,System.Type)">
            <summary> Writes the mapping of the specified class in the specified hbm.xml file. </summary>
            <param name="filePath">Where the xml is written.</param>
            <param name="type">User-defined type containing a valid attribute (can be [Class] or [xSubclass]).</param>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.IO.Stream,System.Type)">
            <summary> Writes the mapping of the specified class in the specified stream. </summary>
            <param name="stream">Where the xml is written.</param>
            <param name="type">User-defined type containing a valid attribute (can be [Class] or [xSubclass]).</param>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmSerializer.Serialize(System.IO.Stream,System.Type,System.Xml.XmlTextWriter,System.Boolean)">
            <summary> Writes the mapping of the specified class in the specified stream. </summary>
            <param name="stream">Where the xml is written; can be null if you send the writer.</param>
            <param name="type">User-defined type containing a valid attribute (can be [Class] or [xSubclass]).</param>
            <param name="writer">The XmlTextWriter used to write the xml; can be null if you send the stream. You can also create it yourself, but don't forget to write the StartElement ("hibernate-mapping") before.</param>
            <param name="writeEndDocument">Tells if the EndElement of "hibernate-mapping" must be written; send false to append many classes in the same stream.</param>
            <returns>The parameter writer if it was not null; else it is a new writer (created using the stream). Send it back to append many classes in this stream.</returns>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.HbmWriter">
            <summary> Write a XmlSchemaElement from attributes in a System.Type. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmWriter.DefaultHelper">
            <summary> Gets or sets the HbmWriterHelper used by HbmWriter </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmWriter.StartQuote">
            <summary> Gets or sets the beginning string used when declaring an identifier for an AttributeIdenfierAttribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmWriter.EndQuote">
            <summary> Gets or sets the ending string used when declaring an identifier for an AttributeIdenfierAttribute </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmWriter.Patterns">
            <summary> Gets or sets the Patterns to convert properties types (the key is the pattern string and the value is the replacement string) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.FindAttributedMembers(NHibernate.Mapping.Attributes.BaseAttribute,System.Type,System.Type)">
            <summary> Searches the members of the class for any member with the attribute defined. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.GetSortedAttributes(System.Reflection.MemberInfo)">
            <summary> Return all (BaseAttribute derived) attributes in the MethodDeclaration sorted using their position. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.IsNextElement(NHibernate.Mapping.Attributes.BaseAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Tells if 'element1' come after 'element2' in rootType's 'sub-elements' order. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.GetXmlEnumValue(System.Type,System.Object)">
            <summary> Gets the xml enum value from the associated attributed enum. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.GetAttributeValue(System.String,System.Type)">
            <summary> Returns the value received or uses it as an identifier to find its value in a AttributeIdentifierAttribute in the mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteUserDefinedContent(System.Xml.XmlWriter,System.Type,System.Type,NHibernate.Mapping.Attributes.BaseAttribute)">
            <summary> Write user-defined content; should be of the specified contentAttributeType. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteUserDefinedContent(System.Xml.XmlWriter,System.Reflection.MemberInfo,System.Type,NHibernate.Mapping.Attributes.BaseAttribute)">
            <summary> Write user-defined content; should be of the specified contentAttributeType. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteAny(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.AnyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Any XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteArray(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ArrayAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Array XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteBag(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.BagAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Bag XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteCache(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CacheAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Cache XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteClass(System.Xml.XmlWriter,System.Type)">
            <summary> Write a Class XML Element from attributes in a type. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedClassTypes(System.Xml.XmlWriter,System.Type)">
            <summary> Write Class XML Elements from nested mapped classes in a not-mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteCollectionId(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CollectionIdAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a CollectionId XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteColumn(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ColumnAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Column XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteComment(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CommentAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Comment XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteComponent(System.Xml.XmlWriter,System.Type)">
            <summary> Write a Component XML Element from attributes in a type. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedComponentTypes(System.Xml.XmlWriter,System.Type)">
            <summary> Write Component XML Elements from nested mapped classes in a not-mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteCompositeElement(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CompositeElementAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a CompositeElement XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteCompositeId(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CompositeIdAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a CompositeId XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteCompositeIndex(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CompositeIndexAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a CompositeIndex XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteCompositeMapKey(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CompositeMapKeyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a CompositeMapKey XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteCreate(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.CreateAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Create XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteDatabaseObject(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.DatabaseObjectAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a DatabaseObject XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteDefinition(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.DefinitionAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Definition XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteDialectScope(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.DialectScopeAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a DialectScope XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteDiscriminator(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.DiscriminatorAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Discriminator XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteDrop(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.DropAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Drop XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteDynamicComponent(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.DynamicComponentAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a DynamicComponent XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteElement(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ElementAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Element XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteFilter(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.FilterAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Filter XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteFilterDef(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.FilterDefAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a FilterDef XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteFilterParam(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.FilterParamAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a FilterParam XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteFormula(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.FormulaAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Formula XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteGenerator(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.GeneratorAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Generator XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteHibernateMapping(System.Xml.XmlWriter,System.Type)">
            <summary> Write a HibernateMapping XML Element from attributes in a type. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedHibernateMappingTypes(System.Xml.XmlWriter,System.Type)">
            <summary> Write HibernateMapping XML Elements from nested mapped classes in a not-mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteId(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.IdAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Id XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteIdBag(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.IdBagAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a IdBag XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteImport(System.Xml.XmlWriter,System.Type)">
            <summary> Write a Import XML Element from attributes in a type. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedImportTypes(System.Xml.XmlWriter,System.Type)">
            <summary> Write Import XML Elements from nested mapped classes in a not-mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteIndex(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.IndexAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Index XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteIndexManyToAny(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.IndexManyToAnyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a IndexManyToAny XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteIndexManyToMany(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.IndexManyToManyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a IndexManyToMany XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteJoin(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.JoinAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Join XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteJoinedSubclass(System.Xml.XmlWriter,System.Type)">
            <summary> Write a JoinedSubclass XML Element from attributes in a type. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedJoinedSubclassTypes(System.Xml.XmlWriter,System.Type)">
            <summary> Write JoinedSubclass XML Elements from nested mapped classes in a not-mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteKey(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.KeyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Key XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteKeyManyToOne(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.KeyManyToOneAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a KeyManyToOne XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteKeyProperty(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.KeyPropertyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a KeyProperty XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteList(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ListAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a List XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteListIndex(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ListIndexAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ListIndex XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteLoadCollection(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.LoadCollectionAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a LoadCollection XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteLoader(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.LoaderAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Loader XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteManyToAny(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ManyToAnyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ManyToAny XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteManyToMany(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ManyToManyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ManyToMany XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteManyToOne(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ManyToOneAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ManyToOne XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteMap(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.MapAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Map XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteMapKey(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.MapKeyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a MapKey XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteMapKeyManyToMany(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a MapKeyManyToMany XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteMeta(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.MetaAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Meta XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteMetaValue(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.MetaValueAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a MetaValue XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNaturalId(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.NaturalIdAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a NaturalId XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedCompositeElement(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.NestedCompositeElementAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a NestedCompositeElement XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteOneToMany(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.OneToManyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a OneToMany XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteOneToOne(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.OneToOneAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a OneToOne XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteParam(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ParamAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Param XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteParent(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ParentAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Parent XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WritePrimitiveArray(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.PrimitiveArrayAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a PrimitiveArray XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteProperties(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.PropertiesAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Properties XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteProperty(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.PropertyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Property XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteQuery(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.QueryAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Query XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteQueryParam(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.QueryParamAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a QueryParam XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteResultSet(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ResultSetAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ResultSet XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteReturn(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ReturnAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Return XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteReturnColumn(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ReturnColumnAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ReturnColumn XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteReturnDiscriminator(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ReturnDiscriminatorAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ReturnDiscriminator XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteReturnJoin(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ReturnJoinAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ReturnJoin XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteReturnProperty(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ReturnPropertyAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ReturnProperty XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteReturnScalar(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.ReturnScalarAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a ReturnScalar XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSet(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SetAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Set XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSqlDelete(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SqlDeleteAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a SqlDelete XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSqlDeleteAll(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SqlDeleteAllAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a SqlDeleteAll XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSqlInsert(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SqlInsertAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a SqlInsert XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSqlQuery(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SqlQueryAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a SqlQuery XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSqlUpdate(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SqlUpdateAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a SqlUpdate XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSubclass(System.Xml.XmlWriter,System.Type)">
            <summary> Write a Subclass XML Element from attributes in a type. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedSubclassTypes(System.Xml.XmlWriter,System.Type)">
            <summary> Write Subclass XML Elements from nested mapped classes in a not-mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSubselect(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SubselectAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Subselect XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteSynchronize(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.SynchronizeAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Synchronize XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteTimestamp(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.TimestampAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Timestamp XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteTuplizer(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.TuplizerAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Tuplizer XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteType(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.TypeAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Type XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteTypeDef(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.TypeDefAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a TypeDef XML Element from attributes in a member. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteUnionSubclass(System.Xml.XmlWriter,System.Type)">
            <summary> Write a UnionSubclass XML Element from attributes in a type. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteNestedUnionSubclassTypes(System.Xml.XmlWriter,System.Type)">
            <summary> Write UnionSubclass XML Elements from nested mapped classes in a not-mapped class. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HbmWriter.WriteVersion(System.Xml.XmlWriter,System.Reflection.MemberInfo,NHibernate.Mapping.Attributes.VersionAttribute,NHibernate.Mapping.Attributes.BaseAttribute,System.Type)">
            <summary> Write a Version XML Element from attributes in a member. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.HbmWriterEx">
            <summary>
            Customized HbmWriter.
            Support ComponentPropertyAttribute.
            </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmWriterEx.DoNotAutoDetectClassName">
            <summary>
            Gets or sets whether, when a class attribute doesn't have a name and entity-name, its name should be the class type name.
            </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.HbmWriterHelper">
            <summary>
            Return the value to use when a (required) attribute is not specified.
            Note: Implementations of Get_XXX_YYY_DefaultValue()
              return [type|property].Name; // YYY is the "identifier" of XXX
              ThrowRequiredValueNotProvidedException(); // There is no way to get it
            </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.HbmWriterHelperEx">
            <summary>
            Customized HbmWriterHelper.
            Support ComponentPropertyAttribute.
            </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HbmWriterHelperEx.DefaultValue">
            <summary> Value returned by overridden methods. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.HibernateMappingAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HibernateMappingAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.HibernateMappingAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.DefaultCascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.DefaultAccess">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.DefaultAccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.DefaultLazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.DefaultLazySpecified">
            <summary> Tells if DefaultLazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.AutoImport">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.AutoImportSpecified">
            <summary> Tells if AutoImport has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.Namespace">
            <summary>Namespace used to find not-Fully Qualified Type Names</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.HibernateMappingAttribute.Assembly">
            <summary>Assembly used to find not-Fully Qualified Type Names</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.IdAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IdAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IdAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.Length">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.UnsavedValue">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.UnsavedValueObject">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdAttribute.Generator">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.IdBagAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IdBagAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IdBagAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Inverse">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.InverseSpecified">
            <summary> Tells if Inverse has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.OrderBy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.CollectionTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.Generic">
            <summary>The concrete collection should use a generic version or an object-based version.</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IdBagAttribute.GenericSpecified">
            <summary> Tells if Generic has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ImportAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ImportAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ImportAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ImportAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ImportAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ImportAttribute.Rename">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.IndexAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IndexAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IndexAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexAttribute.Length">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute.IdType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute.IdTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute.MetaType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute.MetaTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToAnyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.IndexManyToManyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.IndexManyToManyAttribute.ForeignKey">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.JoinAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.JoinAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.JoinAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.Inverse">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.InverseSpecified">
            <summary> Tells if Inverse has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.Optional">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinAttribute.OptionalSpecified">
            <summary> Tells if Optional has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.JoinedSubclassAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.NameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Proxy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.ProxyType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.SchemaAction">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.DynamicUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.DynamicUpdateSpecified">
            <summary> Tells if DynamicUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.DynamicInsert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.DynamicInsertSpecified">
            <summary> Tells if DynamicInsert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.SelectBeforeUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.SelectBeforeUpdateSpecified">
            <summary> Tells if SelectBeforeUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Extends">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.ExtendsType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.LazySpecified">
            <summary> Tells if Lazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Abstract">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.AbstractSpecified">
            <summary> Tells if Abstract has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.JoinedSubclassAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.JoinFetch">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.JoinFetch.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.JoinFetch.Join">
            <summary>join</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.JoinFetch.Select">
            <summary>select</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.KeyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.KeyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.KeyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.PropertyRef">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.ForeignKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.OnDelete">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.NotNull">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.NotNullSpecified">
            <summary> Tells if NotNull has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.Update">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.UpdateSpecified">
            <summary> Tells if Update has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.KeyManyToOneAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.ForeignKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyManyToOneAttribute.NotFound">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.KeyPropertyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.KeyPropertyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.KeyPropertyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.Length">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.KeyPropertyAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.Laziness">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.Laziness.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.Laziness.False">
            <summary>false</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.Laziness.Proxy">
            <summary>proxy</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.Laziness.NoProxy">
            <summary>no-proxy</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ListAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ListAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ListAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Inverse">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.InverseSpecified">
            <summary> Tells if Inverse has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.OrderBy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.CollectionTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.Generic">
            <summary>The concrete collection should use a generic version or an object-based version.</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListAttribute.GenericSpecified">
            <summary> Tells if Generic has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ListIndexAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ListIndexAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ListIndexAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListIndexAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ListIndexAttribute.Base">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.LoadCollectionAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.LoadCollectionAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.LoadCollectionAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.LoadCollectionAttribute.Alias">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.LoadCollectionAttribute.Role">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.LoadCollectionAttribute.LockMode">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.LoaderAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.LoaderAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.LoaderAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.LoaderAttribute.QueryRef">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.LockMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.LockMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.LockMode.None">
            <summary>none</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.LockMode.Read">
            <summary>read</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.LockMode.Upgrade">
            <summary>upgrade</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.LockMode.UpgradeNoWait">
            <summary>upgrade-nowait</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.LockMode.Write">
            <summary>write</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ManyToAnyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ManyToAnyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ManyToAnyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToAnyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToAnyAttribute.IdType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToAnyAttribute.IdTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToAnyAttribute.MetaType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToAnyAttribute.MetaTypeType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ManyToManyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ManyToManyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ManyToManyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.NotFound">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.ForeignKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.OrderBy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToManyAttribute.PropertyRef">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ManyToOneAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ManyToOneAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ManyToOneAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.NotNull">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.NotNullSpecified">
            <summary> Tells if NotNull has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.UniqueKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Index">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Update">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.UpdateSpecified">
            <summary> Tells if Update has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.ForeignKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.PropertyRef">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.NotFound">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ManyToOneAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.MapAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MapAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MapAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Inverse">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.InverseSpecified">
            <summary> Tells if Inverse has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.OrderBy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.CollectionTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Generic">
            <summary>The concrete collection should use a generic version or an object-based version.</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.GenericSpecified">
            <summary> Tells if Generic has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.Sort">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapAttribute.SortType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.MapKeyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MapKeyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MapKeyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyAttribute.Length">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MapKeyManyToManyAttribute.ForeignKey">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.MappingException">
            <summary>
            Exception occuring when NHibernate.Mapping.Attributes finds an error in your mapping (using its .NET attributes).
            Most of the time, the error is due to an omission of a required type/name in the mapping.
            </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Mapping.Attributes.MappingException"/> class.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Mapping.Attributes.MappingException"/> class.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the innerException parameter 
            is not a null reference, the current exception is raised in a catch block that handles 
            the inner exception.
            </param>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Mapping.Attributes.MappingException"/> class
            with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.MetaAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MetaAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MetaAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MetaAttribute.Attribute">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MetaAttribute.Inherit">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MetaAttribute.InheritSpecified">
            <summary> Tells if Inherit has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MetaAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.MetaValueAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MetaValueAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.MetaValueAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MetaValueAttribute.Value">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MetaValueAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.MetaValueAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.NaturalIdAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.NaturalIdAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.NaturalIdAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NaturalIdAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NaturalIdAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.NestedCompositeElementAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.NotFoundMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.NotFoundMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.NotFoundMode.Ignore">
            <summary>ignore</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.NotFoundMode.Exception">
            <summary>exception</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.OnDelete">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OnDelete.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OnDelete.Cascade">
            <summary>cascade</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OnDelete.NoAction">
            <summary>noaction</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.OneToManyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.OneToManyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.OneToManyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToManyAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToManyAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToManyAttribute.NotFound">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToManyAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToManyAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToManyAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.OneToOneAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.OneToOneAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.OneToOneAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Constrained">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.ConstrainedSpecified">
            <summary> Tells if Constrained has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.ForeignKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.PropertyRef">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.OneToOneAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.OptimisticLockMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OptimisticLockMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OptimisticLockMode.None">
            <summary>none</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OptimisticLockMode.Version">
            <summary>version</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OptimisticLockMode.Dirty">
            <summary>dirty</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OptimisticLockMode.All">
            <summary>all</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.OuterJoinStrategy">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OuterJoinStrategy.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OuterJoinStrategy.Auto">
            <summary>auto</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OuterJoinStrategy.True">
            <summary>true</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.OuterJoinStrategy.False">
            <summary>false</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ParamAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ParamAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ParamAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ParamAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ParamAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ParentAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ParentAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ParentAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ParentAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ParentAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ParentAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.PolymorphismType">
            <summary>Types of polymorphism</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PolymorphismType.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PolymorphismType.Implicit">
            <summary>implicit</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PolymorphismType.Explicit">
            <summary>explicit</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.CollectionTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PrimitiveArrayAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.PrimitiveArrayFetch">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayFetch.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayFetch.Join">
            <summary>join</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayFetch.Select">
            <summary>select</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayFetch.Subselect">
            <summary>subselect</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.PrimitiveArrayOuterJoin">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayOuterJoin.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayOuterJoin.True">
            <summary>true</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayOuterJoin.False">
            <summary>false</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PrimitiveArrayOuterJoin.Auto">
            <summary>auto</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.PropertiesAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.PropertiesAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.PropertiesAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.Update">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.UpdateSpecified">
            <summary> Tells if Update has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertiesAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.PropertyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.PropertyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.PropertyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Length">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Precision">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Scale">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.NotNull">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.NotNullSpecified">
            <summary> Tells if NotNull has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Unique">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.UniqueSpecified">
            <summary> Tells if Unique has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.UniqueKey">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Index">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Update">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.UpdateSpecified">
            <summary> Tells if Update has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Formula">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.LazySpecified">
            <summary> Tells if Lazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.PropertyAttribute.Generated">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.PropertyGeneration">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PropertyGeneration.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PropertyGeneration.Never">
            <summary>never</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PropertyGeneration.Insert">
            <summary>insert</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.PropertyGeneration.Always">
            <summary>always</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.QueryAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.QueryAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.QueryAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.FlushMode">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.Cacheable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.CacheableSpecified">
            <summary> Tells if Cacheable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.CacheRegion">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.FetchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.Timeout">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.CacheMode">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.ReadOnly">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.ReadOnlySpecified">
            <summary> Tells if ReadOnly has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.Comment">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.QueryParamAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.QueryParamAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.QueryParamAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryParamAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.QueryParamAttribute.Type">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.RawXmlAttribute">
            <summary> Use this attribute to add any XML at a specific place. </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.RawXmlAttribute.#ctor">
            <summary> Default constructor </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.RawXmlAttribute.After">
            <summary> Gets or sets the type of XML elements after which this XML will be added (omit to put on top). </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.RawXmlAttribute.Content">
            <summary> Gets or sets the XML content. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.RestrictedLaziness">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.RestrictedLaziness.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.RestrictedLaziness.False">
            <summary>false</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.RestrictedLaziness.Proxy">
            <summary>proxy</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ResultSetAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ResultSetAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ResultSetAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ResultSetAttribute.Name">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ReturnAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnAttribute.Alias">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnAttribute.LockMode">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ReturnColumnAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnColumnAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnColumnAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnColumnAttribute.Name">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ReturnDiscriminatorAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnDiscriminatorAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnDiscriminatorAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnDiscriminatorAttribute.Column">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ReturnJoinAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnJoinAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnJoinAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnJoinAttribute.Alias">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnJoinAttribute.Property">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnJoinAttribute.LockMode">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ReturnPropertyAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnPropertyAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnPropertyAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnPropertyAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnPropertyAttribute.Column">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.ReturnScalarAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnScalarAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.ReturnScalarAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnScalarAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.ReturnScalarAttribute.Type">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SetAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SetAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SetAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Inverse">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.InverseSpecified">
            <summary> Tells if Inverse has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Mutable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.MutableSpecified">
            <summary> Tells if Mutable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Cascade">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.OrderBy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Where">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.OuterJoin">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Fetch">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.CollectionType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.CollectionTypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.OptimisticLock">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.OptimisticLockSpecified">
            <summary> Tells if OptimisticLock has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Generic">
            <summary>The concrete collection should use a generic version or an object-based version.</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.GenericSpecified">
            <summary> Tells if Generic has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.Sort">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SetAttribute.SortType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SqlDeleteAllAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlDeleteAllAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlDeleteAllAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAllAttribute.Callable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAllAttribute.CallableSpecified">
            <summary> Tells if Callable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAllAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAllAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SqlDeleteAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlDeleteAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlDeleteAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAttribute.Callable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAttribute.CallableSpecified">
            <summary> Tells if Callable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlDeleteAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SqlInsertAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlInsertAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlInsertAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlInsertAttribute.Callable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlInsertAttribute.CallableSpecified">
            <summary> Tells if Callable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlInsertAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlInsertAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SqlQueryAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlQueryAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlQueryAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.ResultSetRef">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.FlushMode">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.Cacheable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.CacheableSpecified">
            <summary> Tells if Cacheable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.CacheRegion">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.FetchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.Timeout">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.CacheMode">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.ReadOnly">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.ReadOnlySpecified">
            <summary> Tells if ReadOnly has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.Comment">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.Callable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.CallableSpecified">
            <summary> Tells if Callable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlQueryAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SqlUpdateAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlUpdateAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SqlUpdateAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlUpdateAttribute.Callable">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlUpdateAttribute.CallableSpecified">
            <summary> Tells if Callable has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlUpdateAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SqlUpdateAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SubclassAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SubclassAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SubclassAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.NameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.Proxy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.ProxyType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.DiscriminatorValue">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.DiscriminatorValueObject">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.DiscriminatorValueEnumFormat">
            <summary>'format' used by System.Enum.Format() in DiscriminatorValueObject</summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.DynamicUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.DynamicUpdateSpecified">
            <summary> Tells if DynamicUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.DynamicInsert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.DynamicInsertSpecified">
            <summary> Tells if DynamicInsert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.SelectBeforeUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.SelectBeforeUpdateSpecified">
            <summary> Tells if SelectBeforeUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.Extends">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.ExtendsType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.LazySpecified">
            <summary> Tells if Lazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.Abstract">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.AbstractSpecified">
            <summary> Tells if Abstract has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubclassAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SubselectAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SubselectAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SubselectAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SubselectAttribute.Content">
            <summary> Gets or sets the content of this element </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.SynchronizeAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SynchronizeAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.SynchronizeAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.SynchronizeAttribute.Table">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.TimestampAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TimestampAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TimestampAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.UnsavedValue">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.Source">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TimestampAttribute.Generated">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.TimestampSource">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TimestampSource.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TimestampSource.Vm">
            <summary>vm</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TimestampSource.Db">
            <summary>db</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.TimestampUnsavedValue">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TimestampUnsavedValue.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TimestampUnsavedValue.Null">
            <summary>null</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TimestampUnsavedValue.Undefined">
            <summary>undefined</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.TuplizerAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TuplizerAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TuplizerAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TuplizerAttribute.EntityMode">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TuplizerAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TuplizerAttribute.ClassType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.TuplizerEntityMode">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TuplizerEntityMode.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TuplizerEntityMode.Poco">
            <summary>poco</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.TuplizerEntityMode.DynamicMap">
            <summary>dynamic-map</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.TypeAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TypeAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TypeAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TypeAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TypeAttribute.NameType">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.TypeDefAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TypeDefAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.TypeDefAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TypeDefAttribute.Class">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.TypeDefAttribute.Name">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.UnionSubclassAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.UnionSubclassAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.UnionSubclassAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.EntityName">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.EntityNameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.NameType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Proxy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.ProxyType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Table">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Schema">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Catalog">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Subselect">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.DynamicUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.DynamicUpdateSpecified">
            <summary> Tells if DynamicUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.DynamicInsert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.DynamicInsertSpecified">
            <summary> Tells if DynamicInsert has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.SelectBeforeUpdate">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.SelectBeforeUpdateSpecified">
            <summary> Tells if SelectBeforeUpdate has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Extends">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.ExtendsType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Lazy">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.LazySpecified">
            <summary> Tells if Lazy has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Abstract">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.AbstractSpecified">
            <summary> Tells if Abstract has been specified. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Persister">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.PersisterType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Check">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.BatchSize">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.UnionSubclassAttribute.Node">
            <summary> </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.UnsavedValueType">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.UnsavedValueType.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.UnsavedValueType.Undefined">
            <summary>undefined</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.UnsavedValueType.Any">
            <summary>any</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.UnsavedValueType.None">
            <summary>none</summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.VersionAttribute">
            <summary> </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.VersionAttribute.#ctor">
            <summary> Default constructor (position=0) </summary>
        </member>
        <member name="M:NHibernate.Mapping.Attributes.VersionAttribute.#ctor(System.Int32)">
            <summary> Constructor taking the position of the attribute. </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.Name">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.Node">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.Access">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.AccessType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.Column">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.Type">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.TypeType">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.UnsavedValue">
            <summary>undefined|any|none|null|0|-1|... </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.UnsavedValueObject">
            <summary>undefined|any|none|null|0|-1|... </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.Generated">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.Insert">
            <summary> </summary>
        </member>
        <member name="P:NHibernate.Mapping.Attributes.VersionAttribute.InsertSpecified">
            <summary> Tells if Insert has been specified. </summary>
        </member>
        <member name="T:NHibernate.Mapping.Attributes.VersionGeneration">
            <summary> </summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.VersionGeneration.Unspecified">
            <summary>Default value (don't use it)</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.VersionGeneration.Never">
            <summary>never</summary>
        </member>
        <member name="F:NHibernate.Mapping.Attributes.VersionGeneration.Always">
            <summary>always</summary>
        </member>
    </members>
</doc>
