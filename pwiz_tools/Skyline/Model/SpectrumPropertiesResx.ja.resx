<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema

    Version 1.3

    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">1.3</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
      [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
      [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>

    There are any number of "resheader" rows that contain simple 
    name/value pairs.

    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.

    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
      : System.Serialization.Formatters.Binary.BinaryFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
      : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
      : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
      : using a System.ComponentModel.TypeConverter
      : and then encoded with base64 encoding.
  -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Category_AcquisitionInfo" xml:space="preserve">
    <value>測定済み</value>
  </data>
  <data name="Category_FileInfo" xml:space="preserve">
    <value>ファイル</value>
  </data>
  <data name="Category_MatchInfo" xml:space="preserve">
    <value>検索</value>
  </data>
  <data name="Category_PrecursorInfo" xml:space="preserve">
    <value>プリカーサー</value>
  </data>
  <data name="CCS" xml:space="preserve">
    <value>CCS</value>
  </data>
  <data name="Charge" xml:space="preserve">
    <value>電荷</value>
  </data>
  <data name="Description_CCS" xml:space="preserve">
    <value>スペクトルを取得するために単離されたイオンの衝突断面積(CCS)</value>
  </data>
  <data name="Description_Charge" xml:space="preserve">
    <value>選択されたイオンのプリカーサー電荷</value>
  </data>
  <data name="Description_FileName" xml:space="preserve">
    <value>ファイル名およびスペクトルの元データとなるファイルへのフルパス</value>
  </data>
  <data name="Description_IdFileName" xml:space="preserve">
    <value>ファイル名およびターゲットイオンがスペクトルに一致したファイルへのフルパス</value>
  </data>
  <data name="Description_Ion Mobility" xml:space="preserve">
    <value>スペクトルを取得するために単離されたイオンのRawイオン移動度値(msec、Vs/cm^2、Vなど)</value>
  </data>
  <data name="Description_LibraryName" xml:space="preserve">
    <value>このスペクトル一致を含むライブラリの名前</value>
  </data>
  <data name="Description_PrecursorMz" xml:space="preserve">
    <value>イオンの選択に使用したプリカーサーm/z</value>
  </data>
  <data name="Description_RetentionTime" xml:space="preserve">
    <value>スペクトル取得の保持時間</value>
  </data>
  <data name="Description_Score" xml:space="preserve">
    <value>最も良く一致したスペクトルの選択に使用した確率スコア</value>
  </data>
  <data name="Description_ScoreType" xml:space="preserve">
    <value>最も良く一致したスペクトルの選択に使用した確率スコアのスコアタイプ(q値、事後誤差確率など)</value>
  </data>
  <data name="Description_SpecIdInFile" xml:space="preserve">
    <value>スペクトルソースファイル内のスペクトルのスペクトルID</value>
  </data>
  <data name="Description_SpectrumCount" xml:space="preserve">
    <value>ライブラリ内にあるこのペプチドに対して測定されたスペクトルの数</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>ファイル名</value>
  </data>
  <data name="FilePath" xml:space="preserve">
    <value>ファイルパス</value>
  </data>
  <data name="IdFileName" xml:space="preserve">
    <value>IDファイル名</value>
  </data>
  <data name="IonMobility" xml:space="preserve">
    <value>イオン移動度</value>
  </data>
  <data name="Label" xml:space="preserve">
    <value>ラベル</value>
  </data>
  <data name="LibraryName" xml:space="preserve">
    <value>ライブラリ名</value>
  </data>
  <data name="PrecursorMz" xml:space="preserve">
    <value>プリカーサーm/z</value>
  </data>
  <data name="RetentionTime" xml:space="preserve">
    <value>保持時間</value>
  </data>
  <data name="Score" xml:space="preserve">
    <value>スコア</value>
  </data>
  <data name="ScoreType" xml:space="preserve">
    <value>スコアタイプ</value>
  </data>
  <data name="SpecIdInFile" xml:space="preserve">
    <value>ファイル内のスペクトルID</value>
  </data>
  <data name="SpectrumCount" xml:space="preserve">
    <value>スペクトル数</value>
  </data>
</root>