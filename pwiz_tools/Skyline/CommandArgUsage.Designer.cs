//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace pwiz.Skyline {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CommandArgUsage {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CommandArgUsage() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("pwiz.Skyline.CommandArgUsage", typeof(CommandArgUsage).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name to give the spectral library in an –add-library-path operation..
        /// </summary>
        internal static string _add_library_name {
            get {
                return ResourceManager.GetString("_add_library_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify a spectral library to be added to the open document..
        /// </summary>
        internal static string _add_library_path {
            get {
                return ResourceManager.GetString("_add_library_path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Runs a file line by line treating each line like a SkylineRunner/Cmd input. Useful for automating the execution of multiple commands.  The open Skyline file remains active through all commands..
        /// </summary>
        internal static string _batch_commands {
            get {
                return ResourceManager.GetString("_batch_commands", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export base peak chromatograms. Requires the --chromatogram-file argument..
        /// </summary>
        internal static string _chromatogram_base_peaks {
            get {
                return ResourceManager.GetString("_chromatogram_base_peaks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to the tab delimited file to export chromatograms to. Defaults to exporting precursors and products..
        /// </summary>
        internal static string _chromatogram_file {
            get {
                return ResourceManager.GetString("_chromatogram_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export precursor ion chromatograms. Requires the --chromatogram-file argument..
        /// </summary>
        internal static string _chromatogram_precursors {
            get {
                return ResourceManager.GetString("_chromatogram_precursors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export product ion chromatograms. Requires the --chromatogram-file argument..
        /// </summary>
        internal static string _chromatogram_products {
            get {
                return ResourceManager.GetString("_chromatogram_products", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export total ion current chromatograms. Requires the --chromatogram-file argument..
        /// </summary>
        internal static string _chromatogram_tics {
            get {
                return ResourceManager.GetString("_chromatogram_tics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add decoys to a template document for reintegrate model generation with mProphet. (decoy generation method is optional and defaults to “reverse”).
        /// </summary>
        internal static string _decoys_add {
            get {
                return ResourceManager.GetString("_decoys_add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A number of decoys to add. (optional – default is to generate as many decoys as targets).
        /// </summary>
        internal static string _decoys_add_count {
            get {
                return ResourceManager.GetString("_decoys_add_count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces any existing decoys to be discarded when --decoys-add is used..
        /// </summary>
        internal static string _decoys_discard {
            get {
                return ResourceManager.GetString("_decoys_discard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to specify a default root directory for all other path arguments, other than the directory in which the command is run..
        /// </summary>
        internal static string _dir {
            get {
                return ResourceManager.GetString("_dir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds an extra column for energy ramp to the transition list.  Optional. Defaults to false..
        /// </summary>
        internal static string _exp_add_energy_ramp {
            get {
                return ResourceManager.GetString("_exp_add_energy_ramp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dwell time per transition. This option is required for unscheduled transition lists..
        /// </summary>
        internal static string _exp_dwell_time {
            get {
                return ResourceManager.GetString("_exp_dwell_time", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the method or transition list file (or directory) to export to. This option is required for method and transition list export..
        /// </summary>
        internal static string _exp_file {
            get {
                return ResourceManager.GetString("_exp_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignore protein boundaries in creating methods..
        /// </summary>
        internal static string _exp_ignore_proteins {
            get {
                return ResourceManager.GetString("_exp_ignore_proteins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export an isolation list. This option is required for exporting an isolation list and has no default. This option cannot be used with –exp-translist-instrument or –exp-method-instrument, because you cannot export an isolation list and a transition list or method simultaneously..
        /// </summary>
        internal static string _exp_isolationlist_instrument {
            get {
                return ResourceManager.GetString("_exp_isolationlist_instrument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of transitions per injection for export strategies “protein” and “buckets” OR maximum number of simultaneous transitions for scheduled methods. The default is 100..
        /// </summary>
        internal static string _exp_max_trans {
            get {
                return ResourceManager.GetString("_exp_max_trans", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export a method. This option is required for exporting a method and has no default. This option cannot be used with –exp-isolationlist-instrument or --exp-translist-instrument, because you cannot export a method and an isolation/transition list simultaneously..
        /// </summary>
        internal static string _exp_method_instrument {
            get {
                return ResourceManager.GetString("_exp_method_instrument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sets a standard, scheduled or triggered method. The default is “standard”..
        /// </summary>
        internal static string _exp_method_type {
            get {
                return ResourceManager.GetString("_exp_method_type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export a method with extra transitions for finding optimal collision energy or declustering potential..
        /// </summary>
        internal static string _exp_optimizing {
            get {
                return ResourceManager.GetString("_exp_optimizing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Order exported method by m/z values in ascending order (precursor m/z, then product m/z when applicable) for optimized quadrupole switching..
        /// </summary>
        internal static string _exp_order_by_mz {
            get {
                return ResourceManager.GetString("_exp_order_by_mz", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Controls export behavior for documents with both positive and negative transitions. Allows for output of only positive or only negative transitions, or creates separate outputs for each polarity. Defaults to all, and is ignored for single polarity documents..
        /// </summary>
        internal static string _exp_polarity {
            get {
                return ResourceManager.GetString("_exp_polarity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For --exp-method-type=triggered specifies the number of transitions to make primary..
        /// </summary>
        internal static string _exp_primary_count {
            get {
                return ResourceManager.GetString("_exp_primary_count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Run length of the entire gradient in minutes. This option is required for unscheduled experiments..
        /// </summary>
        internal static string _exp_run_length {
            get {
                return ResourceManager.GetString("_exp_run_length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use this only if creating a scheduled or triggered method. The default is to schedule based on an average of all replicates, but if you specify one, the method will be scheduled based on that replicate..
        /// </summary>
        internal static string _exp_scheduling_replicate {
            get {
                return ResourceManager.GetString("_exp_scheduling_replicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strategy for dividing a method into injections. The default is “single”..
        /// </summary>
        internal static string _exp_strategy {
            get {
                return ResourceManager.GetString("_exp_strategy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path of the method template. This can be a file or a directory depending on your instrument. This option is required for method export..
        /// </summary>
        internal static string _exp_template {
            get {
                return ResourceManager.GetString("_exp_template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export a transition list. This option is required for exporting a transition list and has no default. This option cannot be used with –exp-isolation-list or --exp-method-instrument, because you cannot export a transition list and an isolation list or method simultaneously..
        /// </summary>
        internal static string _exp_translist_instrument {
            get {
                return ResourceManager.GetString("_exp_translist_instrument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds an extra column for SLens (which defaults to 50) to the transition list.  Optional. Defaults to false..
        /// </summary>
        internal static string _exp_use_s_lens {
            get {
                return ResourceManager.GetString("_exp_use_s_lens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolving power of the precursor mass analyzer. If the mass analyzer is &apos;Centroided&apos; the value is in PPM..
        /// </summary>
        internal static string _full_scan_precursor_res {
            get {
                return ResourceManager.GetString("_full_scan_precursor_res", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The m/z value at which the precursor mass analyzer resolving power is specified. (applies only to orbitrap and ft_icr mass analyzers).
        /// </summary>
        internal static string _full_scan_precursor_res_mz {
            get {
                return ResourceManager.GetString("_full_scan_precursor_res_mz", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resolving power of the product mass analyzer. If the mass analyzer is &apos;Centroided&apos; the value is in PPM..
        /// </summary>
        internal static string _full_scan_product_res {
            get {
                return ResourceManager.GetString("_full_scan_product_res", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The m/z value at which the product mass analyzer resolving power is specified. (applies only to orbitrap and ft_icr mass analyzers).
        /// </summary>
        internal static string _full_scan_product_res_mz {
            get {
                return ResourceManager.GetString("_full_scan_product_res_mz", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of minutes on either side of the predicted time or MS/MS IDs, i.e. ± minutes..
        /// </summary>
        internal static string _full_scan_rt_filter_tolerance {
            get {
                return ResourceManager.GetString("_full_scan_rt_filter_tolerance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows this text..
        /// </summary>
        internal static string _help {
            get {
                return ResourceManager.GetString("_help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When present imports all recognized transitions from a transition list or assay library, with error rows reported as warnings..
        /// </summary>
        internal static string _ignore_transition_errors {
            get {
                return ResourceManager.GetString("_ignore_transition_errors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports from a folder all files or sub-folders which are not already in the document, naming each with the base-name of the file or sub-folder, unless the --import-naming-pattern parameter is also supplied. If --import-replicate-name is supplied, then all files are added to one multi-injection replicate..
        /// </summary>
        internal static string _import_all {
            get {
                return ResourceManager.GetString("_import_all", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports from a folder all files but not subfolders which are not already in the document, naming each with the base-name of the file, unless the --import-naming-pattern parameter is also supplied. If --import-replicate-name is supplied, then all files are added to one multi-injection replicate..
        /// </summary>
        internal static string _import_all_files {
            get {
                return ResourceManager.GetString("_import_all_files", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imports annotations from a CSV file into the document. Use File &gt; Export &gt; Annotations to create example files of the required format with paths to associate the annotations to document elements..
        /// </summary>
        internal static string _import_annotations {
            get {
                return ResourceManager.GetString("_import_annotations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Append the import-file to the given replicate. This is an intention check in case the document already has a replicate with the given name. By default this is set to false. This option only works with the -–import-file option..
        /// </summary>
        internal static string _import_append {
            get {
                return ResourceManager.GetString("_import_append", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import an assay library transition list with columns for iRT and relative product ion abundance to create an iRT calculator and spectral library for enhanced peak picking..
        /// </summary>
        internal static string _import_assay_library {
            get {
                return ResourceManager.GetString("_import_assay_library", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When importing from a folder, only import from files with modified time before the given date..
        /// </summary>
        internal static string _import_before {
            get {
                return ResourceManager.GetString("_import_before", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import another Skyline document file into the open document. This may be specified multiple times for multiple files..
        /// </summary>
        internal static string _import_document {
            get {
                return ResourceManager.GetString("_import_document", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matching peptides are merged if used, otherwise not..
        /// </summary>
        internal static string _import_document_merge_peptides {
            get {
                return ResourceManager.GetString("_import_document_merge_peptides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines how any results in the imported document are handled. The default is to remove them..
        /// </summary>
        internal static string _import_document_results {
            get {
                return ResourceManager.GetString("_import_document_results", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import a FASTA file into the open document..
        /// </summary>
        internal static string _import_fasta {
            get {
                return ResourceManager.GetString("_import_fasta", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attach a replicate to the open document..
        /// </summary>
        internal static string _import_file {
            get {
                return ResourceManager.GetString("_import_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A regular expression that is applied to file names to select the ones that will be imported..
        /// </summary>
        internal static string _import_filename_pattern {
            get {
                return ResourceManager.GetString("_import_filename_pattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waters lockmass correction m/z for negative ion scans..
        /// </summary>
        internal static string _import_lockmass_negative {
            get {
                return ResourceManager.GetString("_import_lockmass_negative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waters lockmass correction m/z for positive ion scans..
        /// </summary>
        internal static string _import_lockmass_positive {
            get {
                return ResourceManager.GetString("_import_lockmass_positive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waters lockmass correction tolerance m/z..
        /// </summary>
        internal static string _import_lockmass_tolerance {
            get {
                return ResourceManager.GetString("_import_lockmass_tolerance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A regular expression from which the first group will be used to name replicates in an --import-all operation (e.g. [^_]_(.*) for everything after the first underscore)..
        /// </summary>
        internal static string _import_naming_pattern {
            get {
                return ResourceManager.GetString("_import_naming_pattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import results files to individual .skyd files without joining them to the main document .skyd file. This is useful for distributed processing, as on HPC cluster..
        /// </summary>
        internal static string _import_no_join {
            get {
                return ResourceManager.GetString("_import_no_join", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When importing from a folder, only import from files with modified time on or after the given date..
        /// </summary>
        internal static string _import_on_or_after {
            get {
                return ResourceManager.GetString("_import_on_or_after", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the data being imported contains extra transitions for detecting optimal collision energy or declustering potential..
        /// </summary>
        internal static string _import_optimizing {
            get {
                return ResourceManager.GetString("_import_optimizing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A number of sub-processes will be run for single-file import, after which the results from each single file will be joined by the main process. This can produce 10x performance gains on24-core NUMA servers and 3-4x even on i7 processors, under the right conditions. Be sure to test with your system..
        /// </summary>
        internal static string _import_process_count {
            get {
                return ResourceManager.GetString("_import_process_count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name to give the new replicate in an –import-file operation..
        /// </summary>
        internal static string _import_replicate_name {
            get {
                return ResourceManager.GetString("_import_replicate_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A regular expression that is applied to sample names (e.g. in a multi-injection .wiff file) to select the ones that will be imported..
        /// </summary>
        internal static string _import_samplename_pattern {
            get {
                return ResourceManager.GetString("_import_samplename_pattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adds all modifications found in peptide search results files to the open document..
        /// </summary>
        internal static string _import_search_add_mods {
            get {
                return ResourceManager.GetString("_import_search_add_mods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defines a cutoff score (between 0 and 1) to be used when building a spectral library from peptide search results files, where 1 is for highest confidence matches and 0 includes everything. [default 0.95].
        /// </summary>
        internal static string _import_search_cutoff_score {
            get {
                return ResourceManager.GetString("_import_search_cutoff_score", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import a peptide search results file into the open document, building a document-specific spectral library. This may be specified multiple times for multiple files. Use –import-fasta argument to add matched peptides as targets..
        /// </summary>
        internal static string _import_search_file {
            get {
                return ResourceManager.GetString("_import_search_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevent spectra with multiple ambiguous peptide matches from being discarded when building the spectral library..
        /// </summary>
        internal static string _import_search_include_ambiguous {
            get {
                return ResourceManager.GetString("_import_search_include_ambiguous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For MaxQuant msms.txt files to force use of the spectra in the file rather than opening raw data files for the original spectra. The MaxQuant msms.txt files contain charge-state deconvoluted spectra which may not be appropriate for target selection..
        /// </summary>
        internal static string _import_search_prefer_embedded_spectra {
            get {
                return ResourceManager.GetString("_import_search_prefer_embedded_spectra", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A number of files will be imported in parallel using threads in the main process (equivalent to “Files to import simultaneously” in the user interface), after which the results from each single file will be joined. This can produce 2-4x performance gains under the right conditions. Be sure to test with your system..
        /// </summary>
        internal static string _import_threads {
            get {
                return ResourceManager.GetString("_import_threads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import a simple transition list with Q1, Q3 and peptide sequence.  Also supports molecule transition lists in CSV format with suitable headers..
        /// </summary>
        internal static string _import_transition_list {
            get {
                return ResourceManager.GetString("_import_transition_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If importing a file fails with an error the message is emitted as a warning, the replicate is removed, and importing continues to completion..
        /// </summary>
        internal static string _import_warn_on_failure {
            get {
                return ResourceManager.GetString("_import_warn_on_failure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Open a Skyline file.
        /// </summary>
        internal static string _in {
            get {
                return ResourceManager.GetString("_in", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name for the iRT calculator created during assay library import. (optional) The default name is the document base name..
        /// </summary>
        internal static string _irt_calc_name {
            get {
                return ResourceManager.GetString("_irt_calc_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to an existing iRT calculator (.irtdb file) to be used with an imported assay library. Or, if –irt-standards-group-name or –irt-standards-file are used, then this is the output path for the created .irtdb file. (optional) The default iRT calculator path is path/to/document.irtdb.
        /// </summary>
        internal static string _irt_database_path {
            get {
                return ResourceManager.GetString("_irt_database_path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to a separate assay library containing the iRT standards to be applied to an imported assay library. (optional).
        /// </summary>
        internal static string _irt_standards_file {
            get {
                return ResourceManager.GetString("_irt_standards_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of a protein or peptide list containing the iRT standards within an imported assay library. (optional).
        /// </summary>
        internal static string _irt_standards_group_name {
            get {
                return ResourceManager.GetString("_irt_standards_group_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keeps any empty proteins in the open document after importing a FASTA file..
        /// </summary>
        internal static string _keep_empty_proteins {
            get {
                return ResourceManager.GetString("_keep_empty_proteins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sends all logged output to a file..
        /// </summary>
        internal static string _log_file {
            get {
                return ResourceManager.GetString("_log_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All logging output will be preceded by two memory usage values managed and process private bytes in MB, rounded to the nearest MB..
        /// </summary>
        internal static string _memstamp {
            get {
                return ResourceManager.GetString("_memstamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Same as save except writes to the specified file.
        /// </summary>
        internal static string _out {
            get {
                return ResourceManager.GetString("_out", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to a folder on the Panorama server to which the file is to be published (e.g. MyProject/MyFolder)..
        /// </summary>
        internal static string _panorama_folder {
            get {
                return ResourceManager.GetString("_panorama_folder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The password for a user with access to publish to the Panorama server..
        /// </summary>
        internal static string _panorama_password {
            get {
                return ResourceManager.GetString("_panorama_password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to URL of the Panorama server to which the --in file is to be published. The URL should contain the protocol (http or https), hostname and port, if required. Examples:
        ///https://panoramaweb.org
        ///or
        ///http://localhost:8080.
        /// </summary>
        internal static string _panorama_server {
            get {
                return ResourceManager.GetString("_panorama_server", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The username/email address for a user with access to publish to the Panorama server..
        /// </summary>
        internal static string _panorama_username {
            get {
                return ResourceManager.GetString("_panorama_username", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add back precursors of an isotope label type..
        /// </summary>
        internal static string _refine_add_label_type {
            get {
                return ResourceManager.GetString("_refine_add_label_type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All proteins will be reset to auto-select the peptides they contain..
        /// </summary>
        internal static string _refine_auto_select_peptides {
            get {
                return ResourceManager.GetString("_refine_auto_select_peptides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All peptides will be reset to auto-select the precursors they contain..
        /// </summary>
        internal static string _refine_auto_select_precursors {
            get {
                return ResourceManager.GetString("_refine_auto_select_precursors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All precursors will be reset to auto-select the transitions they contain..
        /// </summary>
        internal static string _refine_auto_select_transitions {
            get {
                return ResourceManager.GetString("_refine_auto_select_transitions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precursors of the specified isotope label type will be removed (default) or added if --refine-add-label-type is also used..
        /// </summary>
        internal static string _refine_label_type {
            get {
                return ResourceManager.GetString("_refine_label_type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All elements with peak found ratio above this number
        ///will be removed from the document:
        ///
        ///Green = 1.0
        ///Orange &amp;gt;= 0.5
        ///Red &amp;lt; 0.5.
        /// </summary>
        internal static string _refine_max_peak_found_ratio {
            get {
                return ResourceManager.GetString("_refine_max_peak_found_ratio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All transitions with an average area peak ranking
        ///greater than this number will be removed from the
        ///document..
        /// </summary>
        internal static string _refine_max_peptide_peak_rank {
            get {
                return ResourceManager.GetString("_refine_max_peptide_peak_rank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only the precursor charge state with the maximum peak area will be retained..
        /// </summary>
        internal static string _refine_max_precursor_only {
            get {
                return ResourceManager.GetString("_refine_max_precursor_only", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All transitions with an average area peak ranking
        ///greater than this number will be removed from the
        ///document..
        /// </summary>
        internal static string _refine_max_transition_peak_rank {
            get {
                return ResourceManager.GetString("_refine_max_transition_peak_rank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All precursors with a product ion peak area to library
        ///spectrum dot-product below this threshold will be removed
        ///from the document..
        /// </summary>
        internal static string _refine_min_dotp {
            get {
                return ResourceManager.GetString("_refine_min_dotp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All precursors with a MS1 precursor peak area to expected
        ///isotope distribution dot-product below this threshold will be
        ///removed from the document..
        /// </summary>
        internal static string _refine_min_idotp {
            get {
                return ResourceManager.GetString("_refine_min_idotp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All elements with peak found ratio below this number
        ///will be removed from the document:
        ///
        ///Green = 1.0
        ///Orange &amp;gt;= 0.5
        ///Red &amp;lt; 0.5.
        /// </summary>
        internal static string _refine_min_peak_found_ratio {
            get {
                return ResourceManager.GetString("_refine_min_peak_found_ratio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Proteins with fewer than this number of peptides will be
        ///removed from the document..
        /// </summary>
        internal static string _refine_min_peptides {
            get {
                return ResourceManager.GetString("_refine_min_peptides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precursors will be removed from the document
        ///until the target value for the correlation coefficient of a linear
        ///regression with the optimal retention time calculator
        ///exceed this threshold..
        /// </summary>
        internal static string _refine_min_time_correlation {
            get {
                return ResourceManager.GetString("_refine_min_time_correlation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Precursors with fewer than this number of transitions will be
        ///removed from the document..
        /// </summary>
        internal static string _refine_min_transitions {
            get {
                return ResourceManager.GetString("_refine_min_transitions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All targets that do not correspond to a library match will be removed..
        /// </summary>
        internal static string _refine_missing_library {
            get {
                return ResourceManager.GetString("_refine_missing_library", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All elements without measured results will be
        ///removed from the document..
        /// </summary>
        internal static string _refine_missing_results {
            get {
                return ResourceManager.GetString("_refine_missing_results", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Causes refinement to choose larger product ions
        ///when smaller, less selective ions yeild only fractionally
        ///greater peak area..
        /// </summary>
        internal static string _refine_prefer_larger_products {
            get {
                return ResourceManager.GetString("_refine_prefer_larger_products", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All peptides that are not unique within the document
        ///will be removed..
        /// </summary>
        internal static string _refine_remove_duplicates {
            get {
                return ResourceManager.GetString("_refine_remove_duplicates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All repeated peptides will be removed to leave only the
        ///first occurrence of any peptide..
        /// </summary>
        internal static string _refine_remove_repeats {
            get {
                return ResourceManager.GetString("_refine_remove_repeats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use only the best replicate for each peptide in refinement value calculations. (use for fractionation).
        /// </summary>
        internal static string _refine_use_best_result {
            get {
                return ResourceManager.GetString("_refine_use_best_result", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This option will cause a new model to be created, using the mProphet algorithm with all available scores for the results found in the document. (requires --reintegrate-model-name).
        /// </summary>
        internal static string _reintegrate_create_model {
            get {
                return ResourceManager.GetString("_reintegrate_create_model", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use to exclude a particular feature score by name from the model. Names can be found in the user interface. This argument may be used multiple times to exclude multiple features..
        /// </summary>
        internal static string _reintegrate_exclude_feature {
            get {
                return ResourceManager.GetString("_reintegrate_exclude_feature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Causes detailed information about model training to be logged..
        /// </summary>
        internal static string _reintegrate_log_training {
            get {
                return ResourceManager.GetString("_reintegrate_log_training", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the use of both decoys and second best peaks during reintegration. The default is to use decoys only..
        /// </summary>
        internal static string _reintegrate_model_both {
            get {
                return ResourceManager.GetString("_reintegrate_model_both", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can be used to control the number of iterations performed during model creation. By default up to 10 are allowed and iterations stop when a new model produces fewer detections..
        /// </summary>
        internal static string _reintegrate_model_iteration_count {
            get {
                return ResourceManager.GetString("_reintegrate_model_iteration_count", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of a scoring model to use for the reintegrate operation. The model can either be pre-defined (e.g. using the Edit &gt; Refine &gt; Reintegrate form) or created automatically during this operation by using --reintegrate-create-model..
        /// </summary>
        internal static string _reintegrate_model_name {
            get {
                return ResourceManager.GetString("_reintegrate_model_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forces the use of second best peaks during reintegration. The default is to use decoys only..
        /// </summary>
        internal static string _reintegrate_model_second_best {
            get {
                return ResourceManager.GetString("_reintegrate_model_second_best", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Existing manually integrated peaks will be overwritten with peaks chosen by the reintegration model. (requires --reintegrate-model-name).
        /// </summary>
        internal static string _reintegrate_overwrite_peaks {
            get {
                return ResourceManager.GetString("_reintegrate_overwrite_peaks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove all results from the open document..
        /// </summary>
        internal static string _remove_all {
            get {
                return ResourceManager.GetString("_remove_all", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove all results from the open document with an acquired time before the given date..
        /// </summary>
        internal static string _remove_before {
            get {
                return ResourceManager.GetString("_remove_before", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add reports from a saved report template file to the running program..
        /// </summary>
        internal static string _report_add {
            get {
                return ResourceManager.GetString("_report_add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies how to resolve report name conflicts, by either overwriting or skipping them, when using --report-add (default is to output an error message for conflicts).
        /// </summary>
        internal static string _report_conflict_resolution {
            get {
                return ResourceManager.GetString("_report_conflict_resolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to export the report to. Required if --report-name is specified..
        /// </summary>
        internal static string _report_file {
            get {
                return ResourceManager.GetString("_report_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CSV for comma-separated reports (or semicolon separated, depending on your localization) or TSV for tab separated reports [default CSV].
        /// </summary>
        internal static string _report_format {
            get {
                return ResourceManager.GetString("_report_format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exports the report with the “Invariant” language setting, using English (US) number formats and header text without spaces, ideal for use with the R statistical programming environment..
        /// </summary>
        internal static string _report_invariant {
            get {
                return ResourceManager.GetString("_report_invariant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of a report to export as it appears in the Skyline Export Report form..
        /// </summary>
        internal static string _report_name {
            get {
                return ResourceManager.GetString("_report_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves any changes to the file.
        /// </summary>
        internal static string _save {
            get {
                return ResourceManager.GetString("_save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Causes settings changes to the global environment, e.g. added reports, libraries, enzymes, etc. to be saved to the program configuration file..
        /// </summary>
        internal static string _save_settings {
            get {
                return ResourceManager.GetString("_save_settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the type, &apos;minimal&apos; or &apos;complete&apos;, of archive to share when --share-zip is specified. Minimal is the default attempting to reduce the size of the archive to the minimum necessary to represent the targets in the document while &apos;complete&apos; maintains full fidelity of all project files..
        /// </summary>
        internal static string _share_type {
            get {
                return ResourceManager.GetString("_share_type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves the entire project (document, results, libraries, etc.) to a ZIP archive. Defaults to a minimal archive..
        /// </summary>
        internal static string _share_zip {
            get {
                return ResourceManager.GetString("_share_zip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All logging output will be preceded by a time and date..
        /// </summary>
        internal static string _timestamp {
            get {
                return ResourceManager.GetString("_timestamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of a tool to be added by its settings rather than an installation ZIP file..
        /// </summary>
        internal static string _tool_add {
            get {
                return ResourceManager.GetString("_tool_add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import tools from a tool installation ZIP file..
        /// </summary>
        internal static string _tool_add_zip {
            get {
                return ResourceManager.GetString("_tool_add_zip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional command-line arguments for the tool to be added, used when the tool is executed. (Not applicable to web URL commands).
        /// </summary>
        internal static string _tool_arguments {
            get {
                return ResourceManager.GetString("_tool_arguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command or webpage URL to run for a command being added by its settings rather than an installation ZIP file..
        /// </summary>
        internal static string _tool_command {
            get {
                return ResourceManager.GetString("_tool_command", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tells how to resolve a tool name conflict, by either overwriting an existing installation or skipping installation of the new tool..
        /// </summary>
        internal static string _tool_conflict_resolution {
            get {
                return ResourceManager.GetString("_tool_conflict_resolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignore required packages when installing a tool from a ZIP file..
        /// </summary>
        internal static string _tool_ignore_required_packages {
            get {
                return ResourceManager.GetString("_tool_ignore_required_packages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional initial directory for the tool to be added, used when the tool is executed.  (Not applicable to web URL commands).
        /// </summary>
        internal static string _tool_initial_dir {
            get {
                return ResourceManager.GetString("_tool_initial_dir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exports all the tools in the Tools menu to a text file as line separated lists of arguments for --batch-commands..
        /// </summary>
        internal static string _tool_list_export {
            get {
                return ResourceManager.GetString("_tool_list_export", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When present the tool output is piped to the Immediate Window at runtime..
        /// </summary>
        internal static string _tool_output_to_immediate_window {
            get {
                return ResourceManager.GetString("_tool_output_to_immediate_window", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a program title and version to use with the -–tool-program-path command. Together these commands are for importing tools from a ZIP file that use the $(ProgramPath()) macro as their command. For more information see the documentation on External Tools. e.g.
        ///--tool-program-macro=R,2.15.2.
        /// </summary>
        internal static string _tool_program_macro {
            get {
                return ResourceManager.GetString("_tool_program_macro", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the path to an executable on the local machine for the program title and version specified by the -–tool-program-macro flag..
        /// </summary>
        internal static string _tool_program_path {
            get {
                return ResourceManager.GetString("_tool_program_path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of a report in the settings to use as the input report for the tool..
        /// </summary>
        internal static string _tool_report {
            get {
                return ResourceManager.GetString("_tool_report", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify whether tool conflicts from the provided ZIP file should be resolved by overwriting or installing in parallel. This is for conflicts related to tool versioning and report names..
        /// </summary>
        internal static string _tool_zip_conflict_resolution {
            get {
                return ResourceManager.GetString("_tool_zip_conflict_resolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify whether conflicting custom annotations from the provided ZIP file should overwrite (true) existing annotations or be skipped (false)..
        /// </summary>
        internal static string _tool_zip_overwrite_annotations {
            get {
                return ResourceManager.GetString("_tool_zip_overwrite_annotations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A comma-separated list of precursor ion charge states to apply to peptide molecules to generate precursor targets. Changes the transition filter settings for the open document..
        /// </summary>
        internal static string _tran_precursor_ion_charges {
            get {
                return ResourceManager.GetString("_tran_precursor_ion_charges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes the transition settings collision energy prediction setting to one of the previously defined options..
        /// </summary>
        internal static string _tran_predict_ce {
            get {
                return ResourceManager.GetString("_tran_predict_ce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes the transition settings compensation voltage prediction setting to one of the previously defined options..
        /// </summary>
        internal static string _tran_predict_cov {
            get {
                return ResourceManager.GetString("_tran_predict_cov", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes the transition settings declustering potential prediction setting to one of the previously defined options..
        /// </summary>
        internal static string _tran_predict_dp {
            get {
                return ResourceManager.GetString("_tran_predict_dp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes the transition settings optimization library used in predicting instrument parameters to one of the previously defined options..
        /// </summary>
        internal static string _tran_predict_optdb {
            get {
                return ResourceManager.GetString("_tran_predict_optdb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A comma-separated list of product ion charge states to apply to peptide fragments to generate product ion transitions. Changes the transition filter settings for the open document..
        /// </summary>
        internal static string _tran_product_ion_charges {
            get {
                return ResourceManager.GetString("_tran_product_ion_charges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A comma-separated list of product ion types expected in peptide fragmentation to generate product ion transitions. Changes the transition filter settings for the open document..
        /// </summary>
        internal static string _tran_product_ion_types {
            get {
                return ResourceManager.GetString("_tran_product_ion_types", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Emits version information for the running installation.
        /// </summary>
        internal static string _version {
            get {
                return ResourceManager.GetString("_version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Applies To.
        /// </summary>
        internal static string CommandArgGroup_ToString_Applies_To {
            get {
                return ResourceManager.GetString("CommandArgGroup_ToString_Applies_To", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument.
        /// </summary>
        internal static string CommandArgGroup_ToString_Argument {
            get {
                return ResourceManager.GetString("CommandArgGroup_ToString_Argument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description.
        /// </summary>
        internal static string CommandArgGroup_ToString_Description {
            get {
                return ResourceManager.GetString("CommandArgGroup_ToString_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Agilent
        ///SCIEX.
        /// </summary>
        internal static string CommandArgs_ARG_EXP_DWELL_TIME_AppliesTo {
            get {
                return ResourceManager.GetString("CommandArgs_ARG_EXP_DWELL_TIME_AppliesTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thermo
        ///Waters.
        /// </summary>
        internal static string CommandArgs_ARG_EXP_RUN_LENGTH_AppliesTo {
            get {
                return ResourceManager.GetString("CommandArgs_ARG_EXP_RUN_LENGTH_AppliesTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thermo.
        /// </summary>
        internal static string CommandArgs_ARG_EXP_Thermo {
            get {
                return ResourceManager.GetString("CommandArgs_ARG_EXP_Thermo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;&lt;arguments&gt;&quot;.
        /// </summary>
        internal static string CommandArgs_COMMAND_ARGUMENTS_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_COMMAND_ARGUMENTS_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;command | url&gt;.
        /// </summary>
        internal static string CommandArgs_COMMAND_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_COMMAND_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;date&gt;.
        /// </summary>
        internal static string CommandArgs_DATE_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_DATE_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;feature name&gt;.
        /// </summary>
        internal static string CommandArgs_FEATURE_NAME_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_FEATURE_NAME_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding spectral libraries.
        /// </summary>
        internal static string CommandArgs_GROUP_ADD_LIBRARY_Adding_spectral_libraries {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_ADD_LIBRARY_Adding_spectral_libraries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing annotations.
        /// </summary>
        internal static string CommandArgs_GROUP_ANNOTATIONS_Importing_annotations {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_ANNOTATIONS_Importing_annotations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exporting chromatograms.
        /// </summary>
        internal static string CommandArgs_GROUP_CHROMATOGRAM_Exporting_chromatograms {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_CHROMATOGRAM_Exporting_chromatograms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Adding decoy peptides.
        /// </summary>
        internal static string CommandArgs_GROUP_DECOYS {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_DECOYS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method and transition list options.
        /// </summary>
        internal static string CommandArgs_GROUP_EXP_GENERAL_Method_and_transition_list_options {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_EXP_GENERAL_Method_and_transition_list_options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vendor-specific method and transition list options.
        /// </summary>
        internal static string CommandArgs_GROUP_EXP_INSTRUMENT_Vendor_specific_method_and_transition_list_options {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_EXP_INSTRUMENT_Vendor_specific_method_and_transition_list_optio" +
                        "ns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing FASTA files.
        /// </summary>
        internal static string CommandArgs_GROUP_FASTA_Importing_FASTA_files {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_FASTA_Importing_FASTA_files", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General input/output.
        /// </summary>
        internal static string CommandArgs_GROUP_GENERAL_IO_General_input_output {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_GENERAL_IO_General_input_output", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing other Skyline documents.
        /// </summary>
        internal static string CommandArgs_GROUP_IMPORT_DOC_Importing_other_Skyline_documents {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_IMPORT_DOC_Importing_other_Skyline_documents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing results replicates.
        /// </summary>
        internal static string CommandArgs_GROUP_IMPORT_Importing_results_replicates {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_IMPORT_Importing_results_replicates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing transition lists and assay libraries.
        /// </summary>
        internal static string CommandArgs_GROUP_IMPORT_LIST_Importing_transition_lists_and_assay_libraries {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_IMPORT_LIST_Importing_transition_lists_and_assay_libraries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Importing peptide searches.
        /// </summary>
        internal static string CommandArgs_GROUP_IMPORT_SEARCH_Importing_peptide_searches {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_IMPORT_SEARCH_Importing_peptide_searches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal use only.
        /// </summary>
        internal static string CommandArgs_GROUP_INTERNAL {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_INTERNAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exporting isolation/transition lists.
        /// </summary>
        internal static string CommandArgs_GROUP_LISTS_Exporting_isolation_transition_lists {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_LISTS_Exporting_isolation_transition_lists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exporting native instrument methods.
        /// </summary>
        internal static string CommandArgs_GROUP_METHOD_Exporting_native_instrument_methods {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_METHOD_Exporting_native_instrument_methods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If the arguments above are used along with arguments to import results files into the document (--import-file or -–import-all) the Skyline document will be uploaded to the given Panorama server only if new results are added to the document..
        /// </summary>
        internal static string CommandArgs_GROUP_PANORAMA_postamble {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_PANORAMA_postamble", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publishing to Panorama.
        /// </summary>
        internal static string CommandArgs_GROUP_PANORAMA_Publishing_to_Panorama {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_PANORAMA_Publishing_to_Panorama", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refining the targets list.
        /// </summary>
        internal static string CommandArgs_GROUP_REFINEMENT {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_REFINEMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Refining the targets list based on imported results.
        /// </summary>
        internal static string CommandArgs_GROUP_REFINEMENT_W_RESULTS {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_REFINEMENT_W_RESULTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reintegrate with advanced peak picking models.
        /// </summary>
        internal static string CommandArgs_GROUP_REINTEGRATE_Reintegrate_with_advanced_peak_picking_models {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_REINTEGRATE_Reintegrate_with_advanced_peak_picking_models", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Removing results replicates.
        /// </summary>
        internal static string CommandArgs_GROUP_REMOVE_Removing_results_replicates {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_REMOVE_Removing_results_replicates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exporting reports.
        /// </summary>
        internal static string CommandArgs_GROUP_REPORT_Exporting_reports {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_REPORT_Exporting_reports", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Document Settings.
        /// </summary>
        internal static string CommandArgs_GROUP_SETTINGS_Document_Settings {
            get {
                return ResourceManager.GetString("CommandArgs_GROUP_SETTINGS_Document_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;integer&gt;.
        /// </summary>
        internal static string CommandArgs_INT_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_INT_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;label type&gt;.
        /// </summary>
        internal static string CommandArgs_LABEL_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_LABEL_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;millis&gt;.
        /// </summary>
        internal static string CommandArgs_MILLIS_VALE {
            get {
                return ResourceManager.GetString("CommandArgs_MILLIS_VALE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;minutes&gt;.
        /// </summary>
        internal static string CommandArgs_MINUTES_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_MINUTES_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;m/z value&gt;.
        /// </summary>
        internal static string CommandArgs_MZ_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_MZ_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;name&gt;.
        /// </summary>
        internal static string CommandArgs_NAME_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_NAME_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;number&gt;.
        /// </summary>
        internal static string CommandArgs_NUM_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_NUM_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;password&gt;.
        /// </summary>
        internal static string CommandArgs_PASSWORD_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_PASSWORD_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to path/to/file.
        /// </summary>
        internal static string CommandArgs_PATH_TO_FILE_path_to_file {
            get {
                return ResourceManager.GetString("CommandArgs_PATH_TO_FILE_path_to_file", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to path/to/folder.
        /// </summary>
        internal static string CommandArgs_PATH_TO_FOLDER {
            get {
                return ResourceManager.GetString("CommandArgs_PATH_TO_FOLDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;pipe name&gt;.
        /// </summary>
        internal static string CommandArgs_PIPE_NAME_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_PIPE_NAME_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;program title&gt;[,&lt;program version&gt;].
        /// </summary>
        internal static string CommandArgs_PROGRAM_MACRO_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_PROGRAM_MACRO_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;reg-ex&gt;.
        /// </summary>
        internal static string CommandArgs_REGEX_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_REGEX_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;report name&gt;.
        /// </summary>
        internal static string CommandArgs_REPORT_NAME_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_REPORT_NAME_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;resolving power&gt;.
        /// </summary>
        internal static string CommandArgs_RP_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_RP_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;server url&gt;.
        /// </summary>
        internal static string CommandArgs_SERVER_URL_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_SERVER_URL_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SkylineRunner.exe is a tiny shim executable less than 10 KB in size.  It requires a Skyline installation, performed with the self-updating web installers, on the computer on which SkylineRunner is run.  SkylineRunner simply starts a separate Skyline process running without any user interface, pipes the parameter options from the command-line to the running Skyline instance, and prints output from its Skyline instance to the command console. You can still run multiple instances of SkylineRunner and it will s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommandArgs_Usage_ {
            get {
                return ResourceManager.GetString("CommandArgs_Usage_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SkylineRunner.exe is a tiny shim executable less than 10 KB in size.  It requires a Skyline installation, performed with the self-updating web installers, on the computer on which SkylineRunner is run.  SkylineRunner simply starts a separate Skyline process running without any user interface, pipes the parameter options from the command-line to the running Skyline instance, and prints output from its Skyline instance to the command console. You can still run multiple instances of SkylineRunner and it will s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommandArgs_Usage_para2 {
            get {
                return ResourceManager.GetString("CommandArgs_Usage_para2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SkylineCmd.exe is a much simpler executable which is always installed beside Skyline.exe. It uses the Skyline.exe module as a DLL providing a much cleaner command-line implementation than SkylineRunner.exe, but you must know where SkylineCmd.exe lives on disk to run it, which is usually not the case with the web installer. Usually, you will use either the “Unplugged” installer or the Administrator installer (or recently the Wine Docker Container for Linux systems) if you want to use SkylineCmd.exe. The “Unp [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommandArgs_Usage_para3 {
            get {
                return ResourceManager.GetString("CommandArgs_Usage_para3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Skyline command-line interface is intended for automating tasks such as quality control, scheduling and refinement, during acquisition.  With the Skyline command-line interface, you can open a Skyline document, import a newly acquired data file, and export a report or new method. You can also run large-scale chromatogram extraction and peak picking for proteomewide DIA and DDA experiments faster and consuming less memory than using the full graphic user interface. (See Webinar 14: https://skyline.ms/web [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommandArgs_Usage_para4 {
            get {
                return ResourceManager.GetString("CommandArgs_Usage_para4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To access the command-line interface for Skyline you can use either SkylineRunner.exe or SkylineCmd.exe..
        /// </summary>
        internal static string CommandArgs_Usage_To_access_the_command_line_interface_for_Skyline_you_can_use_either_SkylineRunner_exe_or_SkylineCmd_exe_ {
            get {
                return ResourceManager.GetString("CommandArgs_Usage_To_access_the_command_line_interface_for_Skyline_you_can_use_ei" +
                        "ther_SkylineRunner_exe_or_SkylineCmd_exe_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Until the section titled Settings Customization all other command line arguments rely on the &apos;--in&apos; argument because they all rely on having a Skyline document open..
        /// </summary>
        internal static string CommandArgs_Usage_Until_the_section_titled_Settings_Customization_all_other_command_line_arguments_rely_on_the____in__argument_because_they_all_rely_on_having_a_Skyline_document_open_ {
            get {
                return ResourceManager.GetString("CommandArgs_Usage_Until_the_section_titled_Settings_Customization_all_other_comma" +
                        "nd_line_arguments_rely_on_the____in__argument_because_they_all_rely_on_having_a_" +
                        "Skyline_document_open_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;username&gt;.
        /// </summary>
        internal static string CommandArgs_USERNAME_VALUE {
            get {
                return ResourceManager.GetString("CommandArgs_USERNAME_VALUE", resourceCulture);
            }
        }
    }
}
