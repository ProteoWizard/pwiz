#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2009 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 


import modules ;
import path ;


path-constant API_PATH : . ;

if [ modules.peek : NT ]
{

rule vendor-api-requirements ( properties * )
{
    local result ;
    local dll_location = [ wiff-dll-location $(API_PATH) : $(properties) ] ;
    if <toolset>msvc in $(properties) &&
       $(dll_location)
    {
        # HACK: <link>shared isn't being passed in properties like I'd expect, so I also check the command-line
        if <link>shared in $(properties) || "link=shared" in [ modules.peek : ARGV ]
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc/<link>shared ;
        }
        else
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc ;
        }
        result += <assembly>$(dll_location)/Clearcore2.Data.AnalystDataProvider.dll ;
        result += <assembly>$(dll_location)/Clearcore2.Data.Client.dll ;
        result += <assembly>$(dll_location)/Clearcore2.Data.dll ;
        result += <assembly>$(dll_location)/Clearcore2.RawXYProcessing.dll ;
        result += <assembly>$(dll_location)/Clearcore2.Data.CommonInterfaces.dll ;
        result += <assembly>$(dll_location)/Sciex.Data.XYData.dll ;
        result += <assembly>$(dll_location)/SCIEX.Apis.Data.v1.dll ;
        result += <assembly-dependency>$(dll_location)/$(PLATFORM)/SQLite.Interop.dll ;
        result += <assembly>$(PWIZ_LIBRARIES_PATH)/SQLite/$(PLATFORM)/System.Data.SQLite.DLL ;

        result += <assembly-dependency>$(dll_location)/Clearcore2.Compression.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.Data.Wiff2.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.Data.WiffReader.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.Devices.Types.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.Domain.Acquisition.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.Infrastructure.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.InternalRawXYProcessing.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.Muni.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.StructuredStorage.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.Utility.dll ;
        result += <assembly-dependency>$(dll_location)/Clearcore2.XmlHelpers.dll ;
        result += <assembly-dependency>$(dll_location)/OFX.Core.Contracts.dll ;
        result += <assembly-dependency>$(dll_location)/protobuf-net.dll ;
        result += <assembly-dependency>$(dll_location)/Sciex.Clearcore.FMan.dll ;
        result += <assembly-dependency>$(dll_location)/Sciex.FMan.dll ;
        result += <assembly-dependency>$(dll_location)/Sciex.Wiff.dll ;
        result += <assembly-dependency>$(dll_location)/Sciex.Data.Processing.DLL ;
        result += <assembly-dependency>$(dll_location)/Sciex.Data.SimpleTypes.dll ;

        result += <include>$(dll_location) ;
        result += <define>PWIZ_READER_ABI ;
        result += <cxxflags>/wd4564 ; # warning C4564: method 'x' defines unsupported default parameter 'y'
    }
    else
    {
        result += <build>no ;
    }
    return $(result) ;
}

lib pwiz_vendor_api_abi
    : # sources
        WiffFile.cpp
    : # requirements

        # - when boost::thread is link=static, the exe header is tweaked to call
        #   thread-local storage initialization routines (before main())
        # - when a /clr object is link=static, the exe header is similarly tweaked
        #   to initialize the CLR
        # - these two tweaks are incompatible: either boost::thread must be link=shared,
        #   or the CLR object must be
        # HACK: not needed when using hacked tss_pe.cpp
        #<link>shared

        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
        <conditional>@vendor-api-requirements
        <toolset>msvc:<using-clr>true # requires hacked msvc.jam
        <link>static # <using-clr>true and <link>shared don't mix
    : # default-build
    : # usage-requirements
        <conditional>@vendor-api-requirements
    ;

# a test utility, not a unit test
exe WiffFileTest
    : WiffFileTest.cpp
      pwiz_vendor_api_abi
    ;

explicit WiffFileTest ;

rule install-requirements ( properties * )
{
    local result ;
    local dll_location = [ wiff-dll-location $(API_PATH) : $(properties) ] ;
    if $(dll_location)
    {
        result += <source>$(dll_location)/Clearcore2.Compression.dll ;
        result += <source>$(dll_location)/Clearcore2.Data.AnalystDataProvider.dll ;
        result += <source>$(dll_location)/Clearcore2.Data.dll ;
        result += <source>$(dll_location)/Clearcore2.Data.Client.dll ;
        result += <source>$(dll_location)/Clearcore2.Data.Wiff2.dll ;
        result += <source>$(dll_location)/Clearcore2.Data.WiffReader.dll ;
        result += <source>$(dll_location)/Clearcore2.Data.CommonInterfaces.dll ;
        result += <source>$(dll_location)/Clearcore2.Devices.Types.dll ;
        result += <source>$(dll_location)/Clearcore2.Domain.Acquisition.dll ;
        result += <source>$(dll_location)/Clearcore2.Infrastructure.dll ;
        result += <source>$(dll_location)/Clearcore2.InternalRawXYProcessing.dll ;
        result += <source>$(dll_location)/Clearcore2.Muni.dll ;
        result += <source>$(dll_location)/Clearcore2.RawXYProcessing.dll ;
        result += <source>$(dll_location)/Clearcore2.StructuredStorage.dll ;
        result += <source>$(dll_location)/Clearcore2.Utility.dll ;
        result += <source>$(dll_location)/Clearcore2.XmlHelpers.dll ;
        result += <source>$(dll_location)/OFX.Core.Contracts.dll ;
        result += <source>$(dll_location)/protobuf-net.dll ;
        result += <source>$(dll_location)/Sciex.Clearcore.FMan.dll ;
        result += <source>$(dll_location)/Sciex.FMan.dll ;
        result += <source>$(dll_location)/Sciex.Wiff.dll ;
        result += <source>$(dll_location)/Sciex.Data.Processing.DLL ;
        result += <source>$(dll_location)/Sciex.Data.SimpleTypes.dll ;
        result += <source>$(dll_location)/Sciex.Data.XYData.dll ;
        
        result += <source>$(dll_location)/SCIEX.Apis.Data.v1.dll ;
        result += <assembly-dependency>$(dll_location)/$(PLATFORM)/SQLite.Interop.dll ;
        result += <source>$(PWIZ_LIBRARIES_PATH)/SQLite/$(PLATFORM)/System.Data.SQLite.dll ;

        #result += <assembly-dependency-ex>$(dll_location)/$(PLATFORM)/SQLite_v1.0.98/System.Data.SQLite.dll|<location-prefix>SQLite_v1.0.98 ;

    }
    return $(result) ;
}

rule install-sqlite ( properties * )
{
    local result ;
    local dll_location = [ wiff-dll-location $(API_PATH) : $(properties) ] ;
    if $(dll_location)
    {
        if <address-model>64 in $(properties)
        {
            #result += <install-source-root>$(dll_location)/x64 ;
            #result += <source>$(dll_location)/x64/SQLite_v1.0.98/System.Data.SQLite.DLL ;
            result += <source>$(dll_location)/x64/SQLite.Interop.dll ;
        }
        else
        {
            #result += <install-source-root>$(dll_location)/x86 ;
            #result += <source>$(dll_location)/x86/SQLite_v1.0.98/System.Data.SQLite.DLL ;
            result += <source>$(dll_location)/x86/SQLite.Interop.dll ;
        }
    }
    return $(result) ;
}

install install_pwiz_vendor_api_abi_dlls
    : : <conditional>@install-requirements
    ;

install install_pwiz_vendor_api_abi_sqlite
    : : <conditional>@install-sqlite # separate rule because of <install-source-root>
    ;
explicit install_pwiz_vendor_api_abi_dlls install_pwiz_vendor_api_abi_sqlite ;
}
