#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2009 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 


import modules ;
import path ;


path-constant API_PATH : $(PWIZ_ROOT_PATH)/pwiz_aux/msrc/utility/vendor_api/Agilent ;


if [ modules.peek : NT ]
{

rule vendor-api-requirements ( properties * )
{
    local result ;
    local dll_location = [ mhdac-dll-location $(API_PATH) : $(properties) ] ;
    if $(dll_location)
    {
        result += <source>MassHunterData.cpp ;
        result += <source>MidacData.cpp ;
        result += <using-clr>true ; # requires hacked msvc.jam
        result += <link>static ; # <using-clr>true and <link>shared don't mix
    }
    return $(result) [ vendor-api-usage-requirements $(properties) ] ;
}

rule vendor-api-usage-requirements ( properties * )
{
    local result ;
    local dll_location = [ mhdac-dll-location $(API_PATH) : $(properties) ] ;
    if $(dll_location)
    {
        # HACK: <link>shared isn't being passed in properties like I'd expect, so I also check the command-line
        if <link>shared in $(properties) || "link=shared" in [ modules.peek : ARGV ]
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc/<link>shared ;
        }
        else
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc ;
        }
        result += <cxxflags>/wd4945 ; # warning C4945: 'x' : cannot import symbol from 'some.dll': as 'x' has already been imported from another assembly
        result += <assembly>$(dll_location)/MassSpecDataReader.dll ;
        result += <assembly>$(dll_location)/BaseCommon.dll ;
        result += <assembly>$(dll_location)/BaseDataAccess.dll ;
        result += <assembly>$(dll_location)/BaseError.dll ;
        result += <assembly-dependency>$(dll_location)/BaseTof.dll ;
        result += <assembly>$(dll_location)/MIDAC.dll ;
        result += <assembly-dependency>$(dll_location)/agtsampleinforw.dll ;
        if ! ( <toolset-msvc:version>9.0 in $(properties) || 9.0express in $(properties:G=) )
        {
            result += <assembly-dependency>$(dll_location)/BaseDataAccess.dll.config ;
        }
        result += <assembly-dependency>$(API_PATH)/EULA.MHDAC ;
    }
    return $(result) ;
}

rule msvc-agilent-requirement ( properties * )
{
    # Must be msvc
    if ! <toolset>msvc in $(properties) { return <build>no ; }

    # If msvc 9.0, must be 32-bit
    if ( <toolset-msvc:version>9.0 in $(properties) || 9.0express in $(properties:G=) ) &&
         <address-model>64 in $(properties)
    { return <build>no ; }
}

lib pwiz_vendor_api_agilent
    : # sources
    : # requirements

        # - when boost::thread is link=static, the exe header is tweaked to call
        #   thread-local storage initialization routines (before main())
        # - when a /clr object is link=static, the exe header is similarly tweaked
        #   to initialize the CLR
        # - these two tweaks are incompatible: either boost::thread must be link=shared,
        #   or the CLR object must be
        # HACK: not needed when using hacked tss_pe.cpp
        #<link>shared
        
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
        <conditional>@vendor-api-requirements
        <conditional>@msvc-agilent-requirement
    : # default-build
    : # usage-requirements
        <conditional>@vendor-api-usage-requirements
        <conditional>@msvc-agilent-requirement
    ;


# a test utility, not a unit test
exe MassHunterDataTest
    : MassHunterDataTest.cpp
      pwiz_vendor_api_agilent
    ;

explicit MassHunterDataTest ;

rule install-requirements ( properties * )
{
    local result ;
    local dll_location = [ mhdac-dll-location $(API_PATH) : $(properties) ] ;
    if $(dll_location)
    {
        result += <source>$(dll_location)\\agtsampleinforw.dll ;
        result += <source>$(dll_location)\\BaseCommon.dll ;
        result += <source>$(dll_location)\\BaseDataAccess.dll ;
        if ! ( <toolset-msvc:version>9.0 in $(properties) || 9.0express in $(properties:G=) )
        {
            result += <source>$(dll_location)\\BaseDataAccess.dll.config ;
        }
        result += <source>$(dll_location)\\BaseError.dll ;
        result += <source>$(dll_location)\\BaseTof.dll ;
        result += <source>$(dll_location)\\MassSpecDataReader.dll ;
        result += <source>$(dll_location)\\MIDAC.dll ;
        result += <source>$(API_PATH)\\EULA.MHDAC ;
    }
    return $(result) ;
}

install install_pwiz_vendor_api_agilent
    : : <conditional>@install-requirements
    ;

explicit install_pwiz_vendor_api_agilent ;

install install_pwiz_vendor_api_agilent_eula
    : $(API_PATH)/EULA.MHDAC
    ;

explicit install_pwiz_vendor_api_agilent_eula ;

}
