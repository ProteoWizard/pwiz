#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2014 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 


import modules ;
import path ;


path-constant API_PATH : $(PWIZ_ROOT_PATH)/pwiz_aux/msrc/utility/vendor_api/UIMF ;

rule uimf-dll-location
{
    if --i-agree-to-the-vendor-licenses in [ modules.peek : ARGV ] &&
        $(API_PATH) &&
       [ path.exists $(API_PATH)\\UIMFLibrary.dll ]
    {
        return $(API_PATH) ;
    }
}

if [ modules.peek : NT ]
{

.dll-location = [ uimf-dll-location ] ;
if $(.dll-location)
{
    .hasDLLs = true ;
}

rule vendor-api-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) && $(.hasDLLs) && ! [ without-binary-msdata ]
    {
        result += <source>UIMFReader.cpp ;
        result += <using-clr>true ; # requires hacked msvc.jam
        result += <link>static ; # <using-clr>true and <link>shared don't mix
    }
    return $(result) [ vendor-api-usage-requirements $(properties) ] ;
}

rule vendor-api-usage-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) && $(.hasDLLs) && ! [ without-binary-msdata ]
    {
        # HACK: <link>shared isn't being passed in properties like I'd expect, so I also check the command-line
        if <link>shared in $(properties) || "link=shared" in [ modules.peek : ARGV ]
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc/<link>shared ;
            result += <library>$(PWIZ_LIBRARIES_PATH)/SQLite//sqlite3pp/<link>shared ;
        }
        else
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc ;
            result += <library>$(PWIZ_LIBRARIES_PATH)/SQLite//sqlite3pp ;
        }

        result += <assembly>$(.dll-location)/UIMFLibrary.dll ;
        if ( [ MATCH (x64) : $(PLATFORM) ] )
        {
            result += <assembly-dependency>$(PWIZ_LIBRARIES_PATH)/SQLite/x64/System.Data.SQLite.dll ;
        }
        else
        {
            result += <assembly-dependency>$(PWIZ_LIBRARIES_PATH)/SQLite/x86/System.Data.SQLite.dll ;
        }

    }
    return $(result) ;
}

lib pwiz_vendor_api_uimf
    : # sources
    : # requirements

        # - when boost::thread is link=static, the exe header is tweaked to call
        #   thread-local storage initialization routines (before main())
        # - when a /clr object is link=static, the exe header is similarly tweaked
        #   to initialize the CLR
        # - these two tweaks are incompatible: either boost::thread must be link=shared,
        #   or the CLR object must be
        # HACK: not needed when using hacked tss_pe.cpp
        #<link>shared
        
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
        <toolset>msvc:<cxxflags>/wd4564 # warning C4564: method 'GetIntensityBlockForDemultiplexing' of class 'UIMFLibrary::DataReader' defines unsupported default parameter 'numFramesToSum'
        <conditional>@vendor-api-requirements
        <conditional>@msvc-dotnet-requirement
    : # default-build
    : # usage-requirements
        <conditional>@vendor-api-usage-requirements
        <conditional>@msvc-dotnet-requirement
    ;


# a test utility, not a unit test
exe UIMFReaderTest
    : UIMFReaderTest.cpp
      pwiz_vendor_api_uimf
    ;

explicit UIMFReaderTest ;

rule install-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) && $(.hasDLLs) && ! [ without-binary-msdata ]
    {
        result += <source>$(.dll-location)\\UIMFLibrary.dll ;

        if ( [ MATCH (x64) : $(PLATFORM) ] )
        {
            result += <source>$(PWIZ_LIBRARIES_PATH)/SQLite/x64/System.Data.SQLite.dll ;
        }
        else
        {
            result += <source>$(PWIZ_LIBRARIES_PATH)/SQLite/x86/System.Data.SQLite.dll ;
        }
    }
    return $(result) ;
}

install install_pwiz_vendor_api_uimf
    : : <conditional>@install-requirements
    ;

explicit install_pwiz_vendor_api_uimf ;

}
