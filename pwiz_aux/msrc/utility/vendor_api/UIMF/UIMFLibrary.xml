<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UIMFLibrary</name>
    </assembly>
    <members>
        <member name="T:UIMFLibrary.BinCentricTableCreation">
            <summary>
            The bin centric table creation.
            </summary>
        </member>
        <member name="F:UIMFLibrary.BinCentricTableCreation.mTaskProgressMessageTime">
            <summary>
            Tracks the last time the progress was reported via a Message event for a long-running task
            </summary>
        </member>
        <member name="F:UIMFLibrary.BinCentricTableCreation.mTaskStartTime">
            <summary>
            Tracks the start time of a long-running task
            </summary>
        </member>
        <member name="F:UIMFLibrary.BinCentricTableCreation.CREATE_BINS_INDEX">
            <summary>
            Command for creating the Bin_intensities index
            </summary>
        </member>
        <member name="F:UIMFLibrary.BinCentricTableCreation.CREATE_BINS_TABLE">
            <summary>
            Command for creating the Bin_Intensities table
            </summary>
        </member>
        <member name="F:UIMFLibrary.BinCentricTableCreation.TRUNCATE_BINS_TABLE">
            <summary>
            Command for clearing the Bin_Intensities table (so that we can re-populate it)
            </summary>
        </member>
        <member name="F:UIMFLibrary.BinCentricTableCreation.INSERT_BIN_INTENSITIES">
            <summary>
            Command for adding a row to the Bin_Intensities table
            </summary>
        </member>
        <member name="F:UIMFLibrary.BinCentricTableCreation.BIN_SIZE">
            <summary>
            Bin size
            </summary>
        </member>
        <member name="E:UIMFLibrary.BinCentricTableCreation.OnError">
            <summary>
            Error event handler
            </summary>
        </member>
        <member name="E:UIMFLibrary.BinCentricTableCreation.Message">
            <summary>
            Message event handler.
            </summary>
        </member>
        <member name="E:UIMFLibrary.BinCentricTableCreation.OnProgress">
            <summary>
            Progress event handler.
            </summary>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.CreateBinCentricTable(System.Data.SQLite.SQLiteConnection,UIMFLibrary.DataReader)">
            <summary>
            Create the bin centric table.
            </summary>
            <param name="uimfWriterConnection">
            UIMF Writer connection
            </param>
            <param name="uimfReader">
            UIMF Reader connection
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.CreateBinCentricTable(System.Data.SQLite.SQLiteConnection,UIMFLibrary.DataReader,System.String)">
            <summary>
            Create the bin centric table.
            </summary>
            <param name="uimfWriterConnection">
            UIMF Writer connection
            </param>
            <param name="uimfReader">
            UIMF Reader connection
            </param>
            <param name="workingDirectory">
            Working directory
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.OnErrorMessage(UIMFLibrary.MessageEventArgs)">
            <summary>
            Raise the error event
            </summary>
            <param name="e">
            Message event args
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.OnMessage(UIMFLibrary.MessageEventArgs)">
            <summary>
            Raise the message event
            </summary>
            <param name="e">
            Message event args
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.OnProgressUpdate(UIMFLibrary.ProgressEventArgs)">
            <summary>
            Raise the progress event
            </summary>
            <param name="e">
            Message event args
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.ClearBinIntensitiesTable(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Delete all rows from the Bin_Intensities table
            </summary>
            <param name="uimfWriterConnection"></param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.CreateBinIntensitiesIndex(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Create the bin intensities index.
            </summary>
            <param name="uimfWriterConnection">
            UIMF writer
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.CreateBinIntensitiesTable(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Create the bin intensities table.
            </summary>
            <param name="uimfWriterConnection">
            UIMF writer
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.CreateBlankDatabase(System.String,System.Int32)">
            <summary>
            Create a blank database.
            </summary>
            <param name="locationForNewDatabase">
            File path for the new database.
            </param>
            <param name="numBins">
            Number of bins
            </param>
            <returns>
            Number of tables created<see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.CreateIndexes(System.String,System.Int32)">
            <summary>
            Create the indices
            </summary>
            <param name="locationForNewDatabase">
            File path for the new database.
            </param>
            <param name="numBins">
            Number of bins
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.CreateTemporaryDatabase(UIMFLibrary.DataReader,System.String)">
            <summary>
            Create the temporary database.
            </summary>
            <param name="uimfReader">
            UIMF reader
            </param>
            <param name="workingDirectory">
            Working directory path
            </param>
            <returns>
            Full path to the SqLite temporary database<see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.GetCreateIndexesQuery(System.Int32)">
            <summary>
            Create the indices for a given bin
            </summary>
            <param name="binNumber">
            Bin number.
            </param>
            <returns>
            Query for creating a Bin_Intensities index<see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.GetCreateIntensitiesTableQuery(System.Int32)">
            <summary>
            Create the intensities table for a given bin
            </summary>
            <param name="binNumber">
            Bin number.
            </param>
            <returns>
            Query for creating a Bin_Intensities table<see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.GetInsertIntensityQuery(System.Int32)">
            <summary>
            Get intensities for a given bin
            </summary>
            <param name="binNumber">
            Bin number
            </param>
            <returns>
            Query for insert into a Bin_Intensities table <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.GetMinAndMaxBin(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get the min and max bin numbers
            </summary>
            <param name="binNumber">
            Bin number
            </param>
            <param name="minBin">
            Output: minimum bin index
            </param>
            <param name="maxBin">
            Output: maximum bin index
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.GetReadSingleBinQuery(System.Int32)">
            <summary>
            Get the statement for reading intensities for a given bin
            </summary>
            <param name="binNumber">
            Bin number
            </param>
            <returns>
            Query for obtaining intensities for a single bin<see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.InsertBinCentricData(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteConnection,UIMFLibrary.DataReader)">
            <summary>
            Insert bin centric data.
            </summary>
            <param name="uimfWriterConnection">
            UIMF Writer object
            </param>
            <param name="temporaryDatabaseConnection">
            Temporary database connection.
            </param>
            <param name="uimfReader">
            UIMF reader object
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.SortDataForBin(System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteCommand,System.Int32,System.Int32)">
            <summary>
            Sort data for bin.
            </summary>
            <param name="inConnection">
            SQLite connection
            </param>
            <param name="insertCommand">
            Insert command
            </param>
            <param name="binNumber">
            Bin number
            </param>
            <param name="numImsScans">
            Number of IMS scans
            </param>
        </member>
        <member name="M:UIMFLibrary.BinCentricTableCreation.UpdateProgress(System.Double,System.String)">
            <summary>
            Update progress.
            </summary>
            <param name="percentComplete">Percent complete; value between 0 and 100</param>
            <param name="currentTask">Current task</param>
        </member>
        <member name="T:UIMFLibrary.GlobalParameters">
            <summary>
            The global parameters.
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.BinWidth">
             <summary>
            Width of TOF bins (in ns)
             </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.Bins">
            <summary>
            Total number of TOF bins in frame
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.DatasetType">
            <summary>
            Type of dataset (HMS/HMS/HMS-MSn)
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.DateStarted">
            <summary>
            Date started.
            </summary>
            <remarks>
            Format has traditionally been M/d/yyyy hh:mm:ss tt
            For example, 6/4/2014 12:56:44 PM</remarks>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.FrameDataBlobVersion">
            <summary>
            Version of FrameDataBlob in T_Frame
            </summary>
            <remarks>Obsolete / never used</remarks>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.InstrumentName">
            <summary>
            Instrument name.
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.NumFrames">
            <summary>
            Number of frames in dataset
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.Prescan_Accumulations">
            <summary>
            Number of prescan accumulations
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.Prescan_Continuous">
            <summary>
            Prescan Continuous flag
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.Prescan_Profile">
            <summary>
            Prescan profile.
            </summary>
            <remarks>
            If continuous is true, set this to NULL;
            </remarks>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.Prescan_TICThreshold">
            <summary>
            Prescan TIC threshold
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.Prescan_TOFPulses">
            <summary>
            Prescan TOF pulses
            </summary>
            <remarks>
            Tracks the maximum scan number in any frame
            </remarks>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.ScanDataBlobVersion">
            <summary>
            Version of ScanInfoBlob in T_Frame
            </summary>
            <remarks>Obsolete / never used</remarks>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.TOFCorrectionTime">
            <summary>
            TOF correction time.
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.TOFIntensityType">
            <summary>
            Data type of intensity in each TOF record (ADC is int, TDC is short, FOLDED is float)
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParameters.TimeOffset">
            <summary>
            Time offset from 0. All bin numbers must be offset by this amount
            </summary>
        </member>
        <member name="T:UIMFLibrary.FrameParameters">
            <summary>
            The frame parameters.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.Accumulations">
            <summary>
            Number of collected and summed acquisitions in a frame
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.AverageTOFLength">
            <summary>
            Average TOF length, in nanoseconds
            </summary>
            <remarks>
            Average time between TOF trigger pulses
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.CalibrationDone">
            <summary>
            Tracks whether frame has been calibrated
            </summary>
            <remarks>
            Set to 1 after a frame has been calibrated
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.CalibrationIntercept">
            <summary>
            Calibration intercept, t0
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.CalibrationSlope">
            <summary>
            Calibration slope, k0
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.Decoded">
            <summary>
            Tracks whether frame has been decoded
            </summary>
            <remarks>
            Set to 1 after a frame has been decoded (added June 27, 2011)
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.Duration">
            <summary>
            Frame duration, in seconds
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.ESIVoltage">
            <summary>
            Electrospray voltage.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.FloatVoltage">
            <summary>
            Float voltage.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.FragmentationProfile">
            <summary>
            Voltage profile used in fragmentation
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.FrameNum">
            <summary>
            Frame number
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.FrameType">
            <summary>
            Frame type
            </summary>
            <remarks>
            Bitmap: 0=MS (Legacy); 1=MS (Regular); 2=MS/MS (Frag); 3=Calibration; 4=Prescan
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.HighPressureFunnelPressure">
            <summary>
            High pressure funnel pressure.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.IMFProfile">
            <summary>
            IMFProfile Name
            </summary>
            <remarks>
            Stores the name of the sequence used to encode the data when acquiring data multiplexed
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.IonFunnelTrapPressure">
            <summary>
            Ion funnel trap pressure.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.MPBitOrder">
            <summary>
            MP bit order
            </summary>
            <remarks>
            Determines original size of bit sequence
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.PressureBack">
            <summary>
            Pressure at back of Drift Tube
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.PressureFront">
            <summary>
             Pressure at front of Drift Tube
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.QuadrupolePressure">
            <summary>
            Quadrupole pressure.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.RearIonFunnelPressure">
            <summary>
            Rear ion funnel pressure.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.Scans">
            <summary>
            Number of TOF scans in a frame
            </summary>
            <remarks>
            This is actually the maximum scan number in the frame,
            since a frame might not start at scan 1 and may have missing scans
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.StartTime">
            <summary>
            Start time of frame, in minutes
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.TOFLosses">
            <summary>
            Number of TOF Losses (lost/skipped scans due to I/O problems)
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.Temperature">
            <summary>
            Ambient temperature
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.a2">
            <summary>
            a2 parameter for residual mass error correction
            </summary>
            <remarks>
            ResidualMassError = a2*t + b2*t^3 + c2*t^5 + d2*t^7 + e2*t^9 + f2*t^11
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.b2">
            <summary>
            b2 parameter for residual mass error correction
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.c2">
            <summary>
            c2 parameter for residual mass error correction
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.d2">
            <summary>
            d2 parameter for residual mass error correction
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.e2">
            <summary>
            e2 parameter for residual mass error correction
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.f2">
            <summary>
            f2 parameter for residual mass error correction
            </summary>
            <remarks>
            ResidualMassError = a2t + b2t^3 + c2t^5 + d2t^7 + e2t^9 + f2t^11
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltCapInlet">
            <summary>
            Capillary Inlet Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltCond1">
            <summary>
            Fragmentation Conductance Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltCond2">
            <summary>
            Fragmentation Conductance Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltEntranceCondLmt">
            <summary>
            Entrance Cond Limit Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltEntranceHPFIn">
            <summary>
            HPF In Voltage
            </summary>
            <remarks>
            Renamed from voltEntranceIFTIn to voltEntranceHPFIn in July 2011
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltEntranceHPFOut">
            <summary>
            HPF Out Voltage
            </summary>
            <remarks>
            Renamed from voltEntranceIFTOut to voltEntranceHPFOut in July 2011
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltExitCondLmt">
            <summary>
            Exit Cond Limit Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltExitHPFIn">
            <summary>
            HPF In Voltage
            </summary>
            /// <remarks>
            Renamed from voltExitIFTIn to voltExitHPFIn in July 2011
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltExitHPFOut">
            <summary>
            HPF Out Voltage
            </summary>
            /// <remarks>
            Renamed from voltExitIFTOut to voltExitHPFOut in July 2011
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltHVRack1">
            <summary>
            Volt hv rack 1.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltHVRack2">
            <summary>
            Volt hv rack 2.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltHVRack3">
            <summary>
            Volt hv rack 3.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltHVRack4">
            <summary>
            Volt hv rack 4.
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltIMSOut">
            <summary>
            IMS Out Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltJetDist">
            <summary>
            Jet Disruptor Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltQuad1">
            <summary>
            Fragmentation Quadrupole Voltage 1
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltQuad2">
            <summary>
            Fragmentation Quadrupole Voltage 2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltTrapIn">
            <summary>
            Trap In Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParameters.voltTrapOut">
            <summary>
            Trap Out Voltage
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.FrameParameters"/> class.
            This constructor assumes the developer will manually store a value in StartTime
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameParameters.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.FrameParameters"/> class.
            This constructor auto-populates StartTime using Now minutes dtRunStartTime using the correct format
            </summary>
            <param name="dtRunStartTime">
            </param>
        </member>
        <member name="P:UIMFLibrary.FrameParameters.voltEntranceIFTIn">
            <summary>
            Included for backwards compatibility
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParameters.voltEntranceIFTOut">
            <summary>
            Included for backwards compatibility
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParameters.voltExitIFTIn">
            <summary>
            Included for backwards compatibility
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParameters.voltExitIFTOut">
            <summary>
            Included for backwards compatibility
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameParameters.CopyTo(UIMFLibrary.FrameParameters@)">
            <summary>
            Copy the frame parameters to a target (deep copy)
            </summary>
            <param name="Target">
            Output: target object
            </param>
        </member>
        <member name="T:UIMFLibrary.MessageEventArgs">
            <summary>
            Message event args
            </summary>
        </member>
        <member name="F:UIMFLibrary.MessageEventArgs.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="M:UIMFLibrary.MessageEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.MessageEventArgs"/> class.
            </summary>
            <param name="message">
            Message.
            </param>
        </member>
        <member name="T:UIMFLibrary.FrameNumShiftEventArgs">
            <summary>
            FrameNum shift event args
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameNumShiftEventArgs.DecrementAmount">
            <summary>
            Number of frames that frame numbers in FrameRanges were decremented by
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameNumShiftEventArgs.FrameRanges">
            <summary>
            Frame numbers that were shifted, for example:
            37,89-200
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameNumShiftEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.FrameNumShiftEventArgs"/> class.
            </summary>
            <param name="decrementAmount"></param>
            <param name="frameRanges"></param>
        </member>
        <member name="T:UIMFLibrary.ProgressEventArgs">
            <summary>
            The progress event args.
            </summary>
        </member>
        <member name="F:UIMFLibrary.ProgressEventArgs.PercentComplete">
            <summary>
            Value between 0 and 100
            </summary>
        </member>
        <member name="M:UIMFLibrary.ProgressEventArgs.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.ProgressEventArgs"/> class.
            </summary>
            <param name="percentComplete">
            Percent complete.
            </param>
        </member>
        <member name="E:UIMFLibrary.FrameNumShifter.FrameShiftEvent">
            <summary>
            Error event
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameNumShifter.DBConnection">
            <summary>
            Connection to the database
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameNumShifter.HasLegacyParameterTables">
            <summary>
            True if the UIMF file has the Frame_Parameters table
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameNumShifter.#ctor(System.Data.SQLite.SQLiteConnection,System.Boolean)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameNumShifter.RenumberFrames">
            <summary>
            Renumber frames so that the first frame is frame 1 and to assure that there are no gaps in frame numbers
            </summary>
            <remarks>This method is used by the UIMFDemultiplexer when the first frame to process is not frame 1</remarks>
        </member>
        <member name="M:UIMFLibrary.FrameNumShifter.ShiftFramesInBatch(System.Data.IDbCommand,System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32)">
            <summary>
            Shift the frame number for the frames in frameNums, shifting down by decrementAmount
            </summary>
            <param name="dbCommand"></param>
            <param name="frameNums"></param>
            <param name="decrementAmount"></param>
            <remarks>Used by RenumberFrames when adjusting frames to start at frame 1 and to not have any gaps</remarks>
        </member>
        <member name="T:UIMFLibrary.FrameParam">
            <summary>
            Frame parameter container
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParam.Definition">
            <summary>
            Frame parameter definition
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParam.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameParam.#ctor(UIMFLibrary.FrameParamDef,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="paramDef">Frame parameter definition</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:UIMFLibrary.FrameParam.#ctor(UIMFLibrary.FrameParamDef,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="paramDef">Frame parameter definition</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:UIMFLibrary.FrameParam.ToString">
            <summary>
            Customized ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:UIMFLibrary.FrameParamKeyType">
            <summary>
            Known frame parameters
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.Unknown">
            <summary>
            Unknown frame parameter key
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.StartTimeMinutes">
            <summary>
            Key: Frame start time
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.DurationSeconds">
            <summary>
            Key: Duration of frame
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.Accumulations">
            <summary>
            Key: Number of accumulations in frame
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.FrameType">
            <summary>
            Key: FrameType
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.Decoded">
            <summary>
            Key: Decoded
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.CalibrationDone">
            <summary>
            Key: Calibration done
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.Scans">
            <summary>
            Key: Maximum scan number in the frame
            </summary>
            <remarks>
            A frame might not start at scan 1 and may have missing scans, so Scans is actually the maximum scan number
            If ScanNumFirst and ScanNumLast are defined, Scans should be equal to ScanNumLast
            </remarks>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MultiplexingEncodingSequence">
            <summary>
            Key: Multiplexing Encoding sequence
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MPBitOrder">
            <summary>
            Key: Multiplexing bit order
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.TOFLosses">
            <summary>
            Key: TOF Losses
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.AverageTOFLength">
            <summary>
            Key: Average TOF length
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.CalibrationSlope">
            <summary>
            Key: Calibration Slope
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.CalibrationIntercept">
            <summary>
            Key: Calibration Intercept
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MassCalibrationCoefficienta2">
            <summary>
            Key: Mass Calibration Coefficient: a2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MassCalibrationCoefficientb2">
            <summary>
            Key: Mass Calibration Coefficient: b2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MassCalibrationCoefficientc2">
            <summary>
            Key: Mass Calibration Coefficient: c2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MassCalibrationCoefficientd2">
            <summary>
            Key: Mass Calibration Coefficient: d2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MassCalibrationCoefficiente2">
            <summary>
            Key: Mass Calibration Coefficient: e2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.MassCalibrationCoefficientf2">
            <summary>
            Key: Mass Calibration Coefficient: f2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.AmbientTemperature">
            <summary>
            Key: Ambient temperature, in Celsius
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltHVRack1">
            <summary>
            Key: Voltage High Voltage Rack 1
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltHVRack2">
            <summary>
            Key: Voltage High Voltage Rack 2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltHVRack3">
            <summary>
            Key: Voltage High Voltage Rack 3
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltHVRack4">
            <summary>
            Key: Voltage High Voltage Rack 4
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltCapInlet">
            <summary>
            Key: Voltage Cap Inlet
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltEntranceHPFIn">
            <summary>
            Key: Voltage Entrance HPF In
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltEntranceHPFOut">
            <summary>
            Key: Voltage Entrance HPF Out
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltEntranceCondLmt">
            <summary>
            Key: Voltage Entrance CondLmt
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltTrapOut">
            <summary>
            Key: Voltage Trap Out
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltTrapIn">
            <summary>
            Key: Voltage Trap In
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltJetDist">
            <summary>
            Key: Voltage Jet Dist
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltQuad1">
            <summary>
            Key: Voltage Quad 1
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltCond1">
            <summary>
            Key: Voltage Cond 1
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltQuad2">
            <summary>
            Key: Voltage Quad 2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltCond2">
            <summary>
            Key: Voltage Cond 2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltIMSOut">
            <summary>
            Key: Voltage IMS Out
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltExitHPFIn">
            <summary>
            Key: Voltage Exit HPF In
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltExitHPFOut">
            <summary>
            Key: Voltage Exit HPF Out
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.VoltExitCondLmt">
            <summary>
            Key: Voltage Exit CondLmt
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.PressureFront">
            <summary>
            Key: Pressure Front
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.PressureBack">
            <summary>
            Key: Pressure Back
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.HighPressureFunnelPressure">
            <summary>
            Key: High Pressure Funnel Pressure
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.IonFunnelTrapPressure">
            <summary>
            Key: Ion Funnel Trap Pressure
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.RearIonFunnelPressure">
            <summary>
            Key: Rear Ion Funnel Pressure
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.QuadrupolePressure">
            <summary>
            Key: Quadrupole Pressure
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.ESIVoltage">
            <summary>
            Key: ESI Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.FloatVoltage">
            <summary>
            Key: Float Voltage
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.FragmentationProfile">
            <summary>
            Key: Fragmentation Profile
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.ScanNumFirst">
            <summary>
            Key: Scan Number First
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.ScanNumLast">
            <summary>
            Key: Scan Number Last
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.PressureUnits">
            <summary>
            Key: Pressure Units
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParamKeyType.DriftTubeTemperature">
            <summary>
            Key: Temperature of the drift tube, in Celsius
            </summary>
        </member>
        <member name="T:UIMFLibrary.FrameParamDef">
            <summary>
            Frame parameter definition
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParamDef.ParamType">
            <summary>
            Parameter Type
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParamDef.Name">
            <summary>
            Parameter Name
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParamDef.DataType">
            <summary>
            .NET data type
            </summary>
        </member>
        <member name="P:UIMFLibrary.FrameParamDef.Description">
            <summary>
            Parameter Description
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameParamDef.#ctor(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Constructor
            </summary>
            <param name="paramType">Strongly typed enum of the new parameter</param>
        </member>
        <member name="M:UIMFLibrary.FrameParamDef.#ctor(UIMFLibrary.FrameParamKeyType,System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="paramType">Strongly typed enum of the new parameter</param>
            <param name="name">Parameter name</param>
            <param name="dataType">Parameter .NET data type (as a string)</param>
            <param name="description">Parameter description</param>
            <remarks>Does not verify that paramID is a valid member of FrameParamKeyType</remarks>
        </member>
        <member name="M:UIMFLibrary.FrameParamDef.#ctor(UIMFLibrary.FrameParamKeyType,System.String,System.Type,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="paramType">Strongly typed enum of the new parameter</param>
            <param name="name">Parameter name</param>
            <param name="dataType">Parameter .NET data type (as a Type)</param>
            <param name="description">Parameter description</param>
            <remarks>Does not verify that paramID is a valid member of FrameParamKeyType</remarks>
        </member>
        <member name="M:UIMFLibrary.FrameParamDef.CopyTo">
            <summary>
            Clone this frame parameter definition (deep copy)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamDef.ToString">
            <summary>
            Customized ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="T:UIMFLibrary.FrameParams">
            <summary>
            Container for a set of frame parameters
            </summary>
        </member>
        <member name="T:UIMFLibrary.FrameParams.MassCalibrationCoefficientsType">
            <summary>
            Mass Calibration Coefficients
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParams.MassCalibrationCoefficientsType.a2">
            <summary>
            Calibration Coefficient a2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParams.MassCalibrationCoefficientsType.b2">
            <summary>
            Calibration Coefficient b2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParams.MassCalibrationCoefficientsType.c2">
            <summary>
            Calibration Coefficient c2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParams.MassCalibrationCoefficientsType.d2">
            <summary>
            Calibration Coefficient d2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParams.MassCalibrationCoefficientsType.e2">
            <summary>
            Calibration Coefficient e2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParams.MassCalibrationCoefficientsType.f2">
            <summary>
            Calibration Coefficient f2
            </summary>
        </member>
        <member name="F:UIMFLibrary.FrameParams.mCachedMassCalibrationCoefficients">
            <summary>
            Mass calibration coefficients are cached to allow for fast lookup via external classes
            </summary>
            <remarks>Do not make this an auto-property since this structure's members are updated directly in UpdateCachedParam</remarks>
        </member>
        <member name="P:UIMFLibrary.FrameParams.Values">
            <summary>
            Frame parameters dictionary
            </summary>
            <remarks>Key is parameter type; value is the frame parameter container (<see cref="T:UIMFLibrary.FrameParam"/> class)</remarks>
        </member>
        <member name="P:UIMFLibrary.FrameParams.CalibrationSlope">
            <summary>
            Calibration slope
            </summary>
            <remarks>Returns 0 if not defined</remarks>
        </member>
        <member name="P:UIMFLibrary.FrameParams.CalibrationIntercept">
            <summary>
            Calibration intercept
            </summary>
            <remarks>Returns 0 if not defined</remarks>
        </member>
        <member name="P:UIMFLibrary.FrameParams.FrameType">
            <summary>
            Frame type
            </summary>
            <remarks>Returns MS1 if not defined</remarks>
        </member>
        <member name="P:UIMFLibrary.FrameParams.MassCalibrationCoefficients">
            <summary>
            Mass calibration coefficients
            </summary>
            <remarks>Provided for quick reference to avoid having to access the dictionary and convert from string to double</remarks>
        </member>
        <member name="P:UIMFLibrary.FrameParams.Scans">
            <summary>
            Scans per frame
            </summary>
            <remarks>Returns 0 if not defined</remarks>
        </member>
        <member name="M:UIMFLibrary.FrameParams.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamKeyType,System.Double)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (double)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamKeyType,System.Int32)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (int)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamKeyType,System.String)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (string)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamKeyType,System.Object)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (dynamic)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValueDynamic(UIMFLibrary.FrameParamKeyType,System.Object)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (dynamic)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamDef,System.Double)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramDef">Frame parameter definition (<see cref="T:UIMFLibrary.FrameParamDef"/> class)</param>
            <param name="value">Value (double)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamDef,System.Int32)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramDef">Frame parameter definition (<see cref="T:UIMFLibrary.FrameParamDef"/> class)</param>
            <param name="value">Value (int)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamDef,System.String)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramDef">Frame parameter definition (<see cref="T:UIMFLibrary.FrameParamDef"/> class)</param>
            <param name="value">Value (string)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValue(UIMFLibrary.FrameParamDef,System.Object)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramDef">Frame parameter definition (<see cref="T:UIMFLibrary.FrameParamDef"/> class)</param>
            <param name="value">Value (dynamic)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.AddUpdateValueDynamic(UIMFLibrary.FrameParamDef,System.Object)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramDef">Frame parameter definition (<see cref="T:UIMFLibrary.FrameParamDef"/> class)</param>
            <param name="value">Value (dynamic)</param>
        </member>
        <member name="M:UIMFLibrary.FrameParams.GetValue(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>Value (dynamic)</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParams.GetValue(UIMFLibrary.FrameParamKeyType,System.Object)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (dynamic)</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParams.GetValueDouble(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>Value (double)</returns>
            <remarks>Returns 0 if not defined</remarks>
        </member>
        <member name="M:UIMFLibrary.FrameParams.GetValueDouble(UIMFLibrary.FrameParamKeyType,System.Double)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (double)</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParams.GetValueInt32(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>Value (int)</returns>
            <remarks>Returns 0 if not defined</remarks>
        </member>
        <member name="M:UIMFLibrary.FrameParams.GetValueInt32(UIMFLibrary.FrameParamKeyType,System.Int32)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (int)</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParams.GetValueString(UIMFLibrary.FrameParamKeyType,System.String)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (dynamic)</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParams.HasParameter(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Lookup whether or not a frame parameter is defined
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>True if defined, otherwise false</returns>
        </member>
        <member name="T:UIMFLibrary.FrameParamUtilities">
            <summary>
            Utility functions for working with frame parameters
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertByteArrayToFragmentationSequence(System.Byte[])">
            <summary>
            Convert the array of bytes defining a fragmentation sequence to an array of doubles
            </summary>
            <param name="blob">
            </param>
            <returns>
            Array of doubles
            </returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertDynamicToDouble(System.Object,System.Double@)">
            <summary>
            Convert a dynamic value to a string
            </summary>
            <param name="value"></param>
            <param name="convertedValue"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertDynamicToInt32(System.Object,System.Int32@)">
            <summary>
            Convert a dynamic value to an integer
            </summary>
            <param name="value"></param>
            <param name="convertedValue"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertToBlob(System.Double[])">
            <summary>
            Convert an array of doubles to an array of bytes
            </summary>
            <param name="frag">
            </param>
            <returns>
            Byte array
            </returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertFrameParameters(UIMFLibrary.FrameParameters)">
            <summary>
            Create a frame parameter dictionary using a FrameParameters class instance
            </summary>
            <param name="frameParameters"></param>
            <returns>Frame parameter dictionary</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertStringToDynamic(System.Type,System.String,System.Boolean)">
            <summary>
            Convert the string value to a dynamic variable of the given type
            </summary>
            <param name="targetType"></param>
            <param name="value"></param>
            <param name="returnNullOnError">When true, return null if the conversion fails; when false, return the value as a string</param>
            <returns></returns>
            <remarks>
            Supports byte, short, int, float, double, and DateTime
            All other types will continue to be strings
            </remarks>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertStringParamsToFrameParams(System.Collections.Generic.Dictionary{UIMFLibrary.FrameParamKeyType,System.String})">
            <summary>
            Convert a frame parameter dictionary to an instance of the <see cref="T:UIMFLibrary.FrameParams"/> class
            </summary>
            <param name="frameParamsByType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.ConvertDynamicParamsToFrameParams(System.Collections.Generic.Dictionary{UIMFLibrary.FrameParamKeyType,System.Object})">
            <summary>
            Convert a frame parameter dictionary to an instance of the <see cref="T:UIMFLibrary.FrameParams"/> class
            </summary>
            <param name="frameParamsByType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetDefaultValueByType(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Get the default value for the data type associated with teh given frame param key
            </summary>
            <param name="paramType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetDefaultValueByType(System.Type)">
            <summary>
            Get the default value for the given data type
            </summary>
            <param name="dataType"></param>
            <returns></returns>
            <remarks>This method is used by this class and by GlobalParamUtilities</remarks>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetFrameParamKeyDataType(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Get the system data type associated with a given frame parameter key
            </summary>
            <param name="paramType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetLegacyFrameParameters(System.Int32,UIMFLibrary.FrameParams)">
            <summary>
            Obtain a FrameParameters instance from a FrameParams instance
            </summary>
            <param name="frameNumber">Frame Number</param>
            <param name="frameParameters"><see cref="T:UIMFLibrary.FrameParams"/> instance</param>
            <returns>A new <see cref="T:UIMFLibrary.FrameParameters"/> instance</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetParamTypeByID(System.Int32)">
            <summary>
            Resolve FrameParam Key Type using the parameter id integer value
            </summary>
            <param name="paramID"></param>
            <returns>Specific FrameParamKeyType enum, or FrameParamKeyType.Unknown</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetParamTypeByName(System.String)">
            <summary>
            Resolve FrameParam Key Type using the parameter name
            </summary>
            <param name="paramName"></param>
            <returns>Specific FrameParamKeyType enum, or FrameParamKeyType.Unknown</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetParamDefByName(System.String)">
            <summary>
            Obtain a frame parameter definition instance given a parameter name
            </summary>
            <param name="paramName">Param key name</param>
            <returns><see cref="T:UIMFLibrary.FrameParamDef"/> instance</returns>
        </member>
        <member name="M:UIMFLibrary.FrameParamUtilities.GetParamDefByType(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Obtain a frame parameter definition instance given a parameter key type enum value
            </summary>
            <param name="paramType">Param key type enum</param>
            <returns><see cref="T:UIMFLibrary.FrameParamDef"/> instance</returns>
            <remarks>Will include the official parameter name, description, and data type for the given param key</remarks>
        </member>
        <member name="T:UIMFLibrary.FrameSetContainer">
            <summary>
            Class for tracking frame index of each frame number defined in a .UIMF file
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameSetContainer.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="numFramesInFile">
            Number of frames in the file.
            </param>
        </member>
        <member name="P:UIMFLibrary.FrameSetContainer.FrameIndexes">
            <summary>
            Mapping between frame number and frame index
            </summary>
            <remarks>Key is frame number, value is frame index</remarks>
        </member>
        <member name="P:UIMFLibrary.FrameSetContainer.NumFrames">
            <summary>
            Gets the num frames.
            </summary>
        </member>
        <member name="M:UIMFLibrary.FrameSetContainer.AddFrame(System.Int32)">
            <summary>
            Add a frame.
            </summary>
            <param name="frameNumber">
            Frame number.
            </param>
        </member>
        <member name="T:UIMFLibrary.GlobalParamKeyType">
            <summary>
            Known global parameters
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.Unknown">
            <summary>
            Unknown Global Parameter key
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.InstrumentName">
            <summary>
            Key: Instrument Name
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.DateStarted">
            <summary>
            Key: Date Data collection started
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.NumFrames">
            <summary>
            Key: Number of frames
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.TimeOffset">
            <summary>
            Key: Time offset
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.BinWidth">
            <summary>
            Key: Bin width
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.Bins">
            <summary>
            Key: Bins
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.TOFCorrectionTime">
            <summary>
            Key: TOF Correction Time
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.TOFIntensityType">
            <summary>
            Key: TOF Intensity type
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.DatasetType">
            <summary>
            Key: Dataset type
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.PrescanTOFPulses">
            <summary>
            Key: Prescan TOF Pulses
            </summary>
            <remarks>
            Tracks the maximum scan number in any frame
            </remarks>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.PrescanAccumulations">
            <summary>
            Key: Prescan Accumulations
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.PrescanTICThreshold">
            <summary>
            Key: Prescan TIC Threshold
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.PrescanContinuous">
            <summary>
            Key: Prescan Continuous
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.PrescanProfile">
            <summary>
            Key: Prescan Profile
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.InstrumentClass">
            <summary>
            Key: Instrument Class
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.PpmBinBasedStartMz">
            <summary>
            Key: PPM Bin Based Start m/z
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.PpmBinBasedEndMz">
            <summary>
            Key: PPM Bin Base End m/z
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.DriftTubeLength">
            <summary>
            Key: Drift tube length in centimeters (for IMS)
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamKeyType.DriftGas">
            <summary>
            Key: Drift Gas (for IMS)
            </summary>
        </member>
        <member name="T:UIMFLibrary.InstrumentClassType">
            <summary>
            Instrument Class types
            </summary>
        </member>
        <member name="F:UIMFLibrary.InstrumentClassType.TOF">
            <summary>
            TOF-based instrument
            </summary>
        </member>
        <member name="F:UIMFLibrary.InstrumentClassType.PpmBinBased">
            <summary>
            PPM bin based instrument
            </summary>
        </member>
        <member name="T:UIMFLibrary.GlobalParam">
            <summary>
            Global parameters
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParam.ParamType">
            <summary>
            Parameter Type
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParam.Name">
            <summary>
            Parameter Name
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParam.DataType">
            <summary>
            .NET data type
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParam.Description">
            <summary>
            Parameter Description
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParam.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="M:UIMFLibrary.GlobalParam.#ctor(UIMFLibrary.GlobalParamKeyType,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="paramType">Frame parameter definition</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:UIMFLibrary.GlobalParam.#ctor(UIMFLibrary.GlobalParamKeyType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="paramType">Frame parameter definition</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:UIMFLibrary.GlobalParam.ToString">
            <summary>
            Customized ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParam.InitializeByType(UIMFLibrary.GlobalParamKeyType)">
            <summary>
            Initialize this global parameter using the param type enum value
            </summary>
            <param name="paramType">Param key type enum</param>
        </member>
        <member name="T:UIMFLibrary.GlobalParams">
            <summary>
            Global parameters container
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParams.Values">
            <summary>
            Global parameters dictionary
            </summary>
            <remarks>Key is parameter type; value is the global parameter container (<see cref="T:UIMFLibrary.GlobalParam"/> class)</remarks>
        </member>
        <member name="P:UIMFLibrary.GlobalParams.Bins">
            <summary>
            Total number of TOF bins in frame
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParams.BinWidth">
            <summary>
            Width of TOF bins (in ns)
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParams.IsPpmBinBased">
            <summary>
            Returns True if storing data using the ppm bin-based mode
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParams.NumFrames">
            <summary>
            Number of frames in the dataset
            </summary>
        </member>
        <member name="P:UIMFLibrary.GlobalParams.TOFCorrectionTime">
            <summary>
            TOF correction time
            </summary>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.AddUpdateValue(UIMFLibrary.GlobalParamKeyType,System.Double)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (double)</param>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.AddUpdateValue(UIMFLibrary.GlobalParamKeyType,System.Int32)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (int)</param>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.AddUpdateValue(UIMFLibrary.GlobalParamKeyType,System.DateTime)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType"></param>
            <param name="value"></param>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.AddUpdateValue(UIMFLibrary.GlobalParamKeyType,System.String)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (string)</param>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.AddUpdateValue(UIMFLibrary.GlobalParamKeyType,System.Object)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (dynamic)</param>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.AddUpdateValueDynamic(UIMFLibrary.GlobalParamKeyType,System.Object)">
            <summary>
            Add or update a parameter's value
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="value">Value (string)</param>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.GetValue(UIMFLibrary.GlobalParamKeyType)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>Value (dynamic)</returns>
            <remarks>Returns an empty string if not defined</remarks>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.GetValue(UIMFLibrary.GlobalParamKeyType,System.Object)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (dynamic)</returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.GetValueDouble(UIMFLibrary.GlobalParamKeyType)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>Value (double)</returns>
            <remarks>Returns 0 if not defined</remarks>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.GetValueDouble(UIMFLibrary.GlobalParamKeyType,System.Double)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (double)</returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.GetValueInt32(UIMFLibrary.GlobalParamKeyType)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>Value (int)</returns>
            <remarks>Returns 0 if not defined</remarks>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.GetValueInt32(UIMFLibrary.GlobalParamKeyType,System.Int32)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (int)</returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.GetValueString(UIMFLibrary.GlobalParamKeyType,System.String)">
            <summary>
            Get the value for a parameter
            </summary>
            <param name="paramType">Parameter type</param>
            <param name="valueIfMissing">Value to return if the parameter is not defined</param>
            <returns>Value (string)</returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParams.HasParameter(UIMFLibrary.GlobalParamKeyType)">
            <summary>
            Lookup whether or not a global parameter is defined
            </summary>
            <param name="paramType">Parameter type</param>
            <returns>True if defined, otherwise false</returns>
        </member>
        <member name="T:UIMFLibrary.GlobalParamUtilities">
            <summary>
            Utility functions for working with Global parameters
            </summary>
        </member>
        <member name="F:UIMFLibrary.GlobalParamUtilities.mDataTypeAliasMap">
            <summary>
            Map between .net data type aliases and official data type names
            </summary>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.ConvertGlobalParameters(UIMFLibrary.GlobalParameters)">
            <summary>
            Create a Global parameter dictionary using a GlobalParameters class instance
            </summary>
            <param name="globalParameters"></param>
            <returns>Global parameter dictionary</returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.ConvertStringParamsToGlobalParams(System.Collections.Generic.Dictionary{UIMFLibrary.GlobalParamKeyType,System.String})">
            <summary>
            Convert a Global parameter dictionary to an instance of the <see cref="T:UIMFLibrary.GlobalParams"/> class
            </summary>
            <param name="GlobalParamsByType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.ConvertDynamicParamsToGlobalParams(System.Collections.Generic.Dictionary{UIMFLibrary.GlobalParamKeyType,System.Object})">
            <summary>
            Convert a Global parameter dictionary to an instance of the <see cref="T:UIMFLibrary.GlobalParams"/> class
            </summary>
            <param name="GlobalParamsByType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.GetDataTypeFromAlias(System.String)">
            <summary>
            Lookup the official .NET data type given the string name of a data type
            </summary>
            <param name="alias"></param>
            <returns>Official .NET data type</returns>
            <remarks>Returns System.Object if not match</remarks>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.GetDefaultValueByType(UIMFLibrary.GlobalParamKeyType)">
            <summary>
            Get the default value for the data type associated with the given frame param key
            </summary>
            <param name="paramType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.GetGlobalParamKeyDataType(UIMFLibrary.GlobalParamKeyType)">
            <summary>
            Get the system data type associated with a given global parameter key
            </summary>
            <param name="paramType"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.GetLegacyGlobalParameters(UIMFLibrary.GlobalParams)">
            <summary>
            Obtain a GlobalParameters instance from a GlobalParams instance
            </summary>
            <param name="globalParameters"><see cref="T:UIMFLibrary.GlobalParams"/> instance</param>
            <returns>A new <see cref="T:UIMFLibrary.GlobalParameters"/> instance</returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.GetParamTypeByID(System.Int32)">
            <summary>
            Resolve GlobalParam Key Type using the parameter id integer value
            </summary>
            <param name="paramID"></param>
            <returns>Specific GlobalParamKeyType enum, or GlobalParamKeyType.Unknown</returns>
        </member>
        <member name="M:UIMFLibrary.GlobalParamUtilities.GetParamTypeByName(System.String)">
            <summary>
            Resolve GlobalParam Key Type using the parameter name
            </summary>
            <param name="paramName"></param>
            <returns>Specific GlobalParamKeyType enum, or GlobalParamKeyType.Unknown</returns>
        </member>
        <member name="M:UIMFLibrary.IntensityBinConverterInt32.Encode(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Int32,System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert a list of intensity information by bin to a zero length encoded byte array
            </summary>
            <param name="binToIntensityMap">Keys are bin numbers and values are intensity values; intensity values are assumed to all be non-zero</param>
            <param name="timeOffset">Time offset</param>
            <param name="spectra">Spectra intensity bytes (output)</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="binNumberMaxIntensity">Bin number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
            <remarks>
            This function assumes that all data in binToIntensityMap has positive (non-zero) intensities
            </remarks>
        </member>
        <member name="M:UIMFLibrary.IntensityBinConverterInt32.Encode(System.Collections.Generic.IList{System.Tuple{System.Int32,System.Int32}},System.Int32,System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert a list of intensity information by bin to a zero length encoded byte array
            </summary>
            <param name="binToIntensityMap">Keys are bin numbers and values are intensity values; intensity values are assumed to all be non-zero</param>
            <param name="timeOffset">Time offset</param>
            <param name="spectra">Spectra intensity bytes (output)</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="binNumberMaxIntensity">Bin number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
            <remarks>
            This function assumes that all data in binToIntensityMap has positive (non-zero) intensities
            </remarks>
        </member>
        <member name="T:UIMFLibrary.IntensityConverterCLZF">
            <summary>
            Utilities for encoding intensity using run length encoding and LZF
            </summary>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Compress(System.Collections.Generic.IReadOnlyList{System.Int32},System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero run length encoded and LZF compressed byte array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensity bytes (output)</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Decompress(System.Byte[],System.Int32@)">
            <summary>
            Convert a LZF compressed and zero run length encoded byte array to a list of bin-intensity pairs
            </summary>
            <param name="compressedBinIntensity">LZF compressed and zero run length encoded byte array</param>
            <param name="basePeakIntensity">Highest intensity, and a data-type specifying parameter</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Compress(System.Collections.Generic.IReadOnlyList{System.Int16},System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero run length encoded and LZF compressed byte array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensity bytes (output)</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Decompress(System.Byte[],System.Int16@)">
            <summary>
            Convert a LZF compressed and zero run length encoded byte array to a list of bin-intensity pairs
            </summary>
            <param name="compressedBinIntensity">LZF compressed and zero run length encoded byte array</param>
            <param name="basePeakIntensity">Highest intensity, and a data-type specifying parameter</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Compress(System.Collections.Generic.IReadOnlyList{System.Single},System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero run length encoded and LZF compressed byte array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensity bytes (output)</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Decompress(System.Byte[],System.Single@)">
            <summary>
            Convert a LZF compressed and zero run length encoded byte array to a list of bin-intensity pairs
            </summary>
            <param name="compressedBinIntensity">LZF compressed and zero run length encoded byte array</param>
            <param name="basePeakIntensity">Highest intensity, and a data-type specifying parameter</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Compress(System.Collections.Generic.IReadOnlyList{System.Double},System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero run length encoded and LZF compressed byte array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensity bytes (output)</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterCLZF.Decompress(System.Byte[],System.Double@)">
            <summary>
            Convert a LZF compressed and zero run length encoded byte array to a list of bin-intensity pairs
            </summary>
            <param name="compressedBinIntensity">LZF compressed and zero run length encoded byte array</param>
            <param name="basePeakIntensity">Highest intensity, and a data-type specifying parameter</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterDouble.Encode(System.Double[],System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded byte array
            </summary>
            <param name="intensities"></param>
            <param name="spectra"></param>
            <param name="tic"></param>
            <param name="bpi"></param>
            <param name="indexOfMaxIntensity"></param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterFloat.Encode(System.Single[],System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded byte array
            </summary>
            <param name="intensities"></param>
            <param name="spectra"></param>
            <param name="tic"></param>
            <param name="bpi"></param>
            <param name="indexOfMaxIntensity"></param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterInt16.Encode(System.Int16[],System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded byte array
            </summary>
            <param name="intensities"></param>
            <param name="spectra"></param>
            <param name="tic"></param>
            <param name="bpi"></param>
            <param name="indexOfMaxIntensity"></param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="T:UIMFLibrary.IntensityConverterInt32">
            <summary>
            Convert sets of intensities to run-length zero encoding and compression
            </summary>
        </member>
        <member name="M:UIMFLibrary.IntensityConverterInt32.Encode(System.Collections.Generic.IReadOnlyList{System.Int32},System.Byte[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded byte array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensity bytes (output)</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="T:UIMFLibrary.IntensityEncoderUtilities">
            <summary>
            Utilities for encoding intensity using run length encoding
            </summary>
        </member>
        <member name="M:UIMFLibrary.IntensityEncoderUtilities.Encode(System.Int16[],System.Byte[]@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Encode the list of intensity values using run length encoding
            </summary>
            <param name="intensities">Intensities</param>
            <param name="spectra">Encoded intensities, as bytes</param>
            <param name="tic">Sum of all intensities</param>
            <param name="bpi">Largest intensity</param>
            <param name="indexOfMaxIntensity">Data index for the BPI</param>
            <param name="nonZeroCount">Number of non-zero values in intensities</param>
        </member>
        <member name="T:UIMFLibrary.IntensityPoint">
            <summary>
            Defines the IntensityPoint type.
            </summary>
        </member>
        <member name="M:UIMFLibrary.IntensityPoint.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.IntensityPoint"/> class.
            </summary>
            <param name="scanLc">
            LC scan (aka frame number)
            </param>
            <param name="scanIms">
            IMS scan
            </param>
            <param name="intensity">
            Intensity
            </param>
        </member>
        <member name="P:UIMFLibrary.IntensityPoint.Intensity">
            <summary>
            Gets or sets the intensity.
            </summary>
        </member>
        <member name="P:UIMFLibrary.IntensityPoint.IsSaturated">
            <summary>
            Gets or sets a value indicating whether is saturated.
            </summary>
        </member>
        <member name="P:UIMFLibrary.IntensityPoint.ScanIms">
            <summary>
            Gets the IMS scan
            </summary>
        </member>
        <member name="P:UIMFLibrary.IntensityPoint.ScanLc">
            <summary>
            Gets the LC scan number (aka frame number)
            </summary>
        </member>
        <member name="M:UIMFLibrary.IntensityPoint.op_Equality(UIMFLibrary.IntensityPoint,UIMFLibrary.IntensityPoint)">
            <summary>
            Overload the equals operator
            </summary>
            <param name="left">
            Left point
            </param>
            <param name="right">
            Right point
            </param>
            <returns>
            True if the points are equivalent
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityPoint.op_Inequality(UIMFLibrary.IntensityPoint,UIMFLibrary.IntensityPoint)">
            <summary>
            Overload the not equals operator
            </summary>
            <param name="left">
            Left point
            </param>
            <param name="right">
            Right point
            </param>
            <returns>
            /// True if the points are not equivalent
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityPoint.CompareTo(UIMFLibrary.IntensityPoint)">
            <summary>
            Compare this point to another one
            </summary>
            <param name="other">
            Comparison point
            </param>
            <returns>
            Comparison result<see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityPoint.Equals(UIMFLibrary.IntensityPoint)">
            <summary>
            Check whether this point equals another point
            </summary>
            <param name="other">
            Comparison point
            </param>
            <returns>
            True if the objects are equal<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityPoint.Equals(System.Object)">
            <summary>
            Check whether this point equals another point (as an object)
            </summary>
            <param name="obj">
            Comparison object
            </param>
            <returns>
            True if the comparison object is an equivalent IntensityPoint<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.IntensityPoint.GetHashCode">
            <summary>
            Get hash code for this point
            </summary>
            <returns>
            Hash code for this instance<see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:UIMFLibrary.LogEntry">
            <summary>
             Defines the LogEntry type.
            </summary>
        </member>
        <member name="P:UIMFLibrary.LogEntry.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:UIMFLibrary.LogEntry.PostedBy">
            <summary>
            Gets or sets the posted by.
            </summary>
        </member>
        <member name="P:UIMFLibrary.LogEntry.PostingTime">
            <summary>
            Gets or sets the posting time.
            </summary>
        </member>
        <member name="P:UIMFLibrary.LogEntry.Type">
            <summary>
            Gets or sets the type.
            </summary>
        </member>
        <member name="T:UIMFLibrary.MzCalibrator">
            <summary>
            The m/z calibrator.
            </summary>
            <remarks>
            Calibrate TOF to m/z according to formula: mass = (k * (t-t0))^2
            </remarks>
        </member>
        <member name="M:UIMFLibrary.MzCalibrator.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.MzCalibrator"/> class.
            </summary>
            <param name="k">
            k
            </param>
            <param name="t0">
            t0
            </param>
            <param name="binWidthNs">
            bin width, in nanoseconds
            </param>
            <remarks>
            mass = (k * (t-t0))^2
            </remarks>
        </member>
        <member name="P:UIMFLibrary.MzCalibrator.Description">
            <summary>
            Returns the calibration equation
            </summary>
        </member>
        <member name="P:UIMFLibrary.MzCalibrator.K">
            <summary>
            Gets or sets the k.
            </summary>
        </member>
        <member name="P:UIMFLibrary.MzCalibrator.T0">
            <summary>
            Gets or sets the t 0.
            </summary>
        </member>
        <member name="M:UIMFLibrary.MzCalibrator.MZtoTOF(System.Double)">
            <summary>
            Convert m/z to TOF value
            </summary>
            <param name="mz">
            mz
            </param>
            <returns>
            TOF value<see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.MzCalibrator.TOFtoMZ(System.Double)">
            <summary>
            Convert TOF value to m/z
            </summary>
            <param name="TOFValue">
            The tof value
            </param>
            <returns>
            m/z<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.MzCalibrator.MZtoBin(System.Double)">
            <summary>
            Convert m/z to bin number
            </summary>
            <param name="mz">m/z</param>
            <returns>bin number</returns>
        </member>
        <member name="M:UIMFLibrary.MzCalibrator.BinToMZ(System.Double)">
            <summary>
            Convert bin to m/z
            </summary>
            <param name="bin">bin number</param>
            <returns>m/z</returns>
        </member>
        <member name="M:UIMFLibrary.MzCalibrator.BinToTOF(System.Double)">
            <summary>
            Convert from a bin number to a TOF value
            </summary>
            <param name="bin"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.MzCalibrator.TOFtoBin(System.Double)">
            <summary>
            Convert from a TOF value to bin number
            </summary>
            <param name="TOF"></param>
            <returns></returns>
        </member>
        <member name="T:UIMFLibrary.MzCalibratorFtms">
            <summary>
            Extends MzCalibrator to add support for a scaling factor
            </summary>
        </member>
        <member name="M:UIMFLibrary.MzCalibratorFtms.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.MzCalibratorFtms"/> class.
            </summary>
            <param name="k">
            k
            </param>
            <param name="t0">
            t0
            </param>
            <param name="binWidthNs">
            bin width, in nanoseconds
            </param>
            <remarks>
            mass = (k * (t-t0))^2
            </remarks>
        </member>
        <member name="M:UIMFLibrary.MzCalibratorFtms.MZtoTOF(System.Double,System.Double)">
            <summary>
            Convert m/z to TOF value
            </summary>
            <param name="mz">
            mz
            </param>
            <param name="factor">
            The scaling factor
            </param>
            <returns>
            TOF value<see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.MzCalibratorFtms.ToftoMz(System.Double,System.Double)">
            <summary>
            Convert TOF value to m/z
            </summary>
            <param name="tofValue">
            The tof value
            </param>
            <param name="factor">
            The scaling factor
            </param>
            <returns>
            m/z<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="T:UIMFLibrary.ReaderWriterExtensions">
            <summary>
            Extension methods that use functionality specific to .NET 4.5 and above
            </summary>
        </member>
        <member name="M:UIMFLibrary.ReaderWriterExtensions.InsertFrameAsync(UIMFLibrary.DataWriter,System.Int32,System.Collections.Generic.Dictionary{UIMFLibrary.FrameParamKeyType,System.Object})">
            <summary>
            Asynchronously insert a frame
            </summary>
            <param name="dataWriter"></param>
            <param name="frameNum"></param>
            <param name="frameParameters"></param>
            <returns></returns>
        </member>
        <member name="T:UIMFLibrary.RlzEncode">
            <summary>
            Utilities for encoding intensity using run length encoding
            </summary>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <returns>
            Spectra intensities (output), run-length zero encoded
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Int32},System.Int32[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensities (output), run-length zero encoded</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Decode(System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Convert an array of zero length encoded data to a list of bin-intensity pairs
            </summary>
            <param name="encoded">Spectra intensities, run-length zero encoded</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Int16})">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <returns>
            Spectra intensities (output), run-length zero encoded
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Int16},System.Int16[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensities (output), run-length zero encoded</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Decode(System.Collections.Generic.IReadOnlyList{System.Int16})">
            <summary>
            Convert an array of zero length encoded data to a list of bin-intensity pairs
            </summary>
            <param name="encoded">Spectra intensities, run-length zero encoded</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Single})">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <returns>
            Spectra intensities (output), run-length zero encoded
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Single},System.Single[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensities (output), run-length zero encoded</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Decode(System.Collections.Generic.IReadOnlyList{System.Single})">
            <summary>
            Convert an array of zero length encoded data to a list of bin-intensity pairs
            </summary>
            <param name="encoded">Spectra intensities, run-length zero encoded</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <returns>
            Spectra intensities (output), run-length zero encoded
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Encode(System.Collections.Generic.IReadOnlyList{System.Double},System.Double[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Convert an array of intensities to a zero length encoded array
            </summary>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="spectra">Spectra intensities (output), run-length zero encoded</param>
            <param name="tic">TIC (output)</param>
            <param name="bpi">Base peak intensity (output)</param>
            <param name="indexOfMaxIntensity">Index number of the BPI</param>
            <returns>
            Number of non-zero data points
            </returns>
        </member>
        <member name="M:UIMFLibrary.RlzEncode.Decode(System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Convert an array of zero length encoded data to a list of bin-intensity pairs
            </summary>
            <param name="encoded">Spectra intensities, run-length zero encoded</param>
            <returns>List of tuples, where Item1 is the bin, and Item2 is the intensity</returns>
        </member>
        <member name="T:UIMFLibrary.ScanInfo">
            <summary>
            Class for tracking pre-computed information about a given scan
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.Frame">
            <summary>
            Frame number for scan
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.Scan">
            <summary>
            Scan number
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.NonZeroCount">
            <summary>
            Number of non-zero (positive) intensity values in the scan
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.BPI">
            <summary>
            Base peak intensity (highest intensity)
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.BPI_MZ">
            <summary>
            m/z of the base peak (the data point with the highest intensity)
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.TIC">
            <summary>
            Total Ion Current (sum of all intensities)
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.DriftTime">
            <summary>
            Drift time of data in this scan (normalized for pressure)
            </summary>
        </member>
        <member name="P:UIMFLibrary.ScanInfo.DriftTimeUnnormalized">
            <summary>
            Drift time of data in this scan (not normalized for pressure)
            </summary>
        </member>
        <member name="M:UIMFLibrary.ScanInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="frameNumber">Frame number</param>
            <param name="scanNumber">Scan number</param>
        </member>
        <member name="M:UIMFLibrary.ScanInfo.ToString">
            <summary>
            Summarize the data tracked by this class
            </summary>
            <returns></returns>
        </member>
        <member name="T:UIMFLibrary.SpectrumCache">
            <summary>
            The spectrum cache.
            </summary>
        </member>
        <member name="M:UIMFLibrary.SpectrumCache.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Collections.Generic.SortedList{System.Int32,System.Int32}},System.Collections.Generic.IDictionary{System.Int32,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.SpectrumCache"/> class.
            </summary>
            <param name="startFrameNumber">
            The start frame number.
            </param>
            <param name="endFrameNumber">
            The end frame number.
            </param>
            <param name="listOfIntensityDictionaries">
            The list of intensity dictionaries (previously a list of dictionaries, now a list of SortedList objects)
            </param>
            <param name="summedIntensityDictionary">
            The summed intensity dictionary.
            </param>
        </member>
        <member name="M:UIMFLibrary.SpectrumCache.#ctor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Collections.Generic.SortedList{System.Int32,System.Int32}},System.Collections.Generic.IDictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.SpectrumCache"/> class.
            </summary>
            <param name="startFrameNumber">
            The start frame number.
            </param>
            <param name="endFrameNumber">
            The end frame number.
            </param>
            <param name="listOfIntensityDictionaries">
            The list of intensity dictionaries.
            </param>
            <param name="summedIntensityDictionary">
            The summed intensity dictionary.
            </param>
            <param name="firstScan">The scan number of the first entry in listOfIntensityDictionaries that has non-zero intensities</param>
            <param name="lastScan">The scan number of the last entry in listOfIntensityDictionaries that has non-zero intensities</param>
        </member>
        <member name="P:UIMFLibrary.SpectrumCache.EndFrameNumber">
            <summary>
            Gets the end frame number.
            </summary>
        </member>
        <member name="P:UIMFLibrary.SpectrumCache.ListOfIntensityDictionaries">
            <summary>
            Gets the list of intensity Lists
            </summary>
            <remarks>
            List of SortedLists tracking the intensity information for scans 0 through NumScans-1 (older .UIMF files) or 1 through NumScans (newer .UIMF files)
            Keys in each SortedList are bin number; values are the intensity for the bin
            Prior to January 2015 we used a Dictionary(int, int), which gives faster lookups for .TryGetValue
            However, a Dictionary uses roughly 2x more memory vs. a SortedList, which can cause problems for rich UIMF files
            </remarks>
        </member>
        <member name="P:UIMFLibrary.SpectrumCache.StartFrameNumber">
            <summary>
            Gets the start frame number.
            </summary>
        </member>
        <member name="P:UIMFLibrary.SpectrumCache.FirstScan">
            <summary>
            Gets the first (minimum) scan number in ListOfIntensityDictionaries
            </summary>
        </member>
        <member name="P:UIMFLibrary.SpectrumCache.LastScan">
            <summary>
            Gets the last (maximum) scan number in ListOfIntensityDictionaries
            </summary>
        </member>
        <member name="P:UIMFLibrary.SpectrumCache.SummedIntensityDictionary">
            <summary>
            Gets the summed intensity dictionary.
            </summary>
        </member>
        <member name="P:UIMFLibrary.SpectrumCache.MemoryUsageEstimateMB">
            <summary>
            Estimated MB of data tracked by this cached spectrum
            </summary>
        </member>
        <member name="M:UIMFLibrary.SpectrumCache.UpdateMemoryUsageEstimate">
            <summary>
            Estimates the amount of memory used by SummedIntensityDictionary and ListOfIntensityDictionaries
            </summary>
            <remarks>
            SummedIntensityDictionary is an int,int dictionary, so each entry takes up 8 bytes.
            However, given the overhead inherent in a dictionary, we need to multiply by 5 to get a realistic estimate of the size.
            ListOfIntensityDictionaries used to be a list of dictionaries, but it is now a list of SortedList objects.
            Each entry nominally takes up 8 bytes, but in reality each entry takes up 16 bytes.</remarks>
        </member>
        <member name="T:UIMFLibrary.UIMFData">
            <summary>
            Base class for UIMFDataReader and UIMFDataWriter. Contains common functionality and resources. Does not contain any functionality that writes to the database.
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FRAME_PARAMETERS_TABLE">
            <summary>
            Name of table containing frame parameters - legacy format
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FRAME_PARAM_KEYS_TABLE">
            <summary>
            Name of table containing frame param keys
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FRAME_PARAMS_TABLE">
            <summary>
            Name of table containing frame parameters - new format
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FRAME_SCANS_TABLE">
            <summary>
            Name of table containing frame scan information
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.GLOBAL_PARAMETERS_TABLE">
            <summary>
            Name of table containing global parameters - legacy format
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.GLOBAL_PARAMS_TABLE">
            <summary>
            Name of table containing global parameters - new format
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.VERSION_INFO_TABLE">
            <summary>
            Name of table containing version info
            </summary>
        </member>
        <member name="T:UIMFLibrary.UIMFData.FrameType">
            <summary>
            Frame type.
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FrameType.MS1">
            <summary>
            MS1
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FrameType.MS2">
            <summary>
            MS2
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FrameType.Calibration">
            <summary>
            Calibration
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.FrameType.Prescan">
            <summary>
            Prescan
            </summary>
        </member>
        <member name="T:UIMFLibrary.UIMFData.UIMFTableType">
            <summary>
            Type of the table
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.UIMFTableType.LegacyGlobalParameters">
            <summary>
            Legacy global parameters
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.UIMFTableType.GlobalParams">
            <summary>
            Global params table
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.UIMFTableType.FrameParams">
            <summary>
            Frame params table
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.UIMFTableType.FrameScans">
            <summary>
            Frame scans table
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.UIMFTableType.VersionInfo">
            <summary>
            Version info table
            </summary>
        </member>
        <member name="T:UIMFLibrary.UIMFData.TableStatus">
            <summary>
            Table status
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.TableStatus.Exists">
            <summary>
            Table exists
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.TableStatus.Checked">
            <summary>
            Table checked
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.mErrMessageCounter">
            <summary>
            Number of error messages that have been caught
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.mUnrecognizedFrameParamTypes">
            <summary>
            Tracks the frame parameter types that were not recognized
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.mFrameParameterKeys">
            <summary>
            Frame parameter keys
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.mCultureInfoUS">
            <summary>
            U.S. Culture Info
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.mDbConnection">
            <summary>
            Connection to the database
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.mFilePath">
            <summary>
            Full path to the UIMF file
            </summary>
        </member>
        <member name="P:UIMFLibrary.UIMFData.mGlobalParameters">
            <summary>
            Global parameters object
            </summary>
        </member>
        <member name="F:UIMFLibrary.UIMFData.mTableStatus">
            <summary>
            This dictionary tracks the existing of key tables, including whether or not we have actually checked for the table
            </summary>
        </member>
        <member name="P:UIMFLibrary.UIMFData.HasFrameParamsTable">
            <summary>
            True if the UIMF file has table Frame_Params
            </summary>
            <remarks>When opening a .UIMF file without the Frame_Params table, the writer will auto-add it</remarks>
        </member>
        <member name="P:UIMFLibrary.UIMFData.HasGlobalParamsTable">
            <summary>
            True if the UIMF file has table Global_Params
            </summary>
            <remarks>When opening a .UIMF file without the Global_Params table, the writer will auto-add it</remarks>
        </member>
        <member name="P:UIMFLibrary.UIMFData.HasLegacyParameterTables">
            <summary>
            True if the UIMF file has tables Global_Parameters and Frame_Parameters
            </summary>
        </member>
        <member name="P:UIMFLibrary.UIMFData.HasVersionInfoTable">
            <summary>
            True if the UIMF file has table Version_Info
            </summary>
            <remarks>When opening a .UIMF file without the Version_Info table, the writer will auto-add it</remarks>
        </member>
        <member name="P:UIMFLibrary.UIMFData.UimfFilePath">
            <summary>
            Gets the uimf file path.
            </summary>
        </member>
        <member name="P:UIMFLibrary.UIMFData.UimfFormatVersion">
            <summary>
            The format version of the UIMF file
            </summary>
        </member>
        <member name="M:UIMFLibrary.UIMFData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.UIMFData"/> class.
            Constructor for UIMF DataWriter that takes the filename and begins the transaction.
            </summary>
            <param name="fileName">
            Full path to the data file
            </param>
            <remarks>When creating a brand new .UIMF file, you must call CreateTables() after instantiating the writer</remarks>
        </member>
        <member name="M:UIMFLibrary.UIMFData.Dispose">
            <summary>
            Dispose of any system resources
            </summary>
        </member>
        <member name="M:UIMFLibrary.UIMFData.Dispose(System.Boolean)">
            <summary>
            Dispose of any system resources
            </summary>
            <param name="disposing">
            True when disposing
            </param>
        </member>
        <member name="M:UIMFLibrary.UIMFData.DisposeCommand(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Dispose of the specified SQLite command
            </summary>
            <param name="dbCommand"></param>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetFrameParameterKeys(System.Boolean)">
            <summary>
            Get frame parameter keys
            </summary>
            <returns>
            Frame Parameter Keys.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetGlobalParameters">
            <summary>
            Return the global parameters using the legacy GlobalParameters object
            </summary>
            <returns>
            Global parameters class<see cref="T:UIMFLibrary.GlobalParameters"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetGlobalParams">
            <summary>
            Return the global parameters <see cref="T:UIMFLibrary.GlobalParams"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetTableColumnNames(System.String)">
            <summary>
            Determine the columns in a table or view
            </summary>
            <param name="tableName">
            Table name
            </param>
            <returns>
            List of column names in the table.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.IndexExists(System.String)">
            <summary>
            Looks for the given index in the SqLite database
            Note that index names are case sensitive
            </summary>
            <param name="indexName">
            </param>
            <returns>
            True if the index exists<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.TableExists(System.String)">
            <summary>
            Check whether a table exists.
            </summary>
            <param name="tableName">
            Table name.
            </param>
            <returns>
            True if the table or view exists<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.TableHasColumn(System.String,System.String)">
            <summary>
            Check whether a table has a specific column
            </summary>
            <param name="tableName">
            Table name.
            </param>
            <param name="columnName">
            Column name.
            </param>
            <returns>
            True if the table or view has the specified column<see cref="T:System.Boolean"/>.
            </returns>
            <remarks>
            This method works properly with tables that have no rows of data
            However, an exception is thrown if the table does not exist
            </remarks>
        </member>
        <member name="M:UIMFLibrary.UIMFData.ConvertBinToMZ(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Convert bin to mz.
            </summary>
            <param name="slope">
            Slope.
            </param>
            <param name="intercept">
            Intercept.
            </param>
            <param name="binWidth">
            Bin width (in ns)
            </param>
            <param name="correctionTimeForTOF">
            Correction time for tof.
            </param>
            <param name="bin">
            Bin number
            </param>
            <returns>
            m/z<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetBinClosestToMZ(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the bin value that corresponds to an m/z value.
            NOTE: this may not be accurate if the UIMF file uses polynomial calibration values  (e.g. FrameParameter A2)
            </summary>
            <param name="slope">
            </param>
            <param name="intercept">
            </param>
            <param name="binWidth">Bin width (in ns)
            </param>
            <param name="correctionTimeForTOF">
            </param>
            <param name="targetMZ">
            </param>
            <returns>
            Bin number<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetFrameParameterKeys(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Get frame parameter keys
            </summary>
            <returns>
            Frame Parameter Keys.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetTableColumnNames(System.Data.SQLite.SQLiteConnection,System.String)">
            <summary>
            Determine the columns in a table or view
            </summary>
            <param name="uimfConnection">
            SQLite connection
            </param>
            <param name="tableName">
            Table name
            </param>
            <returns>
            List of column names in the table.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.IndexExists(System.Data.SQLite.SQLiteConnection,System.String)">
            <summary>
            Looks for the given index in the SqLite database
            Note that index names are case sensitive
            </summary>
            <param name="uimfConnection">
            </param>
            <param name="indexName">
            </param>
            <returns>
            True if the index exists<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.TableExists(System.Data.SQLite.SQLiteConnection,System.String)">
            <summary>
            Looks for the given table in the SqLite database
            Note that table names are case sensitive
            </summary>
            <param name="uimfConnection">
            </param>
            <param name="tableName">
            </param>
            <returns>
            True if the table or view exists<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.TableHasColumn(System.Data.SQLite.SQLiteConnection,System.String,System.String)">
            <summary>
            Check whether a table has a column
            </summary>
            <param name="uimfConnection">
            SQLite connection
            </param>
            <param name="tableName">
            Table name
            </param>
            <param name="columnName">
            Column name.
            </param>
            <returns>
            True if the table or view has the specified column<see cref="T:System.Boolean"/>.
            </returns>
            <remarks>
            This method works properly with tables that have no rows of data
            However, an exception is thrown if the table does not exist
            </remarks>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetGlobalParametersFromTable(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Get global parameters from table.
            </summary>
            <param name="uimfConnection">
            UIMF database connection.
            </param>
            <returns>
            Global parameters object
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Convert object read from database to boolean
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Convert object read from database to double
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Convert object read from database to int16
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Convert object read from database to int32
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetSingle(System.Data.IDataRecord,System.String)">
            <summary>
            Convert object read from database to single/float
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Convert object read from database to string
            </summary>
            <param name="reader"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.WarnUnrecognizedFrameParamID(System.Int32,System.String)">
            <summary>
            Print a warning for unrecognized frame parameter IDs
            </summary>
            <param name="paramID"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:UIMFLibrary.UIMFData.CacheGlobalParameters">
            <summary>
            Read either the global params (or the legacy global parameters) and store them to mGlobalParameters
            </summary>
            <remarks>The writer uses this function to read the global parameters when appending data to an existing .UIMF file</remarks>
        </member>
        <member name="M:UIMFLibrary.UIMFData.CheckHasFrameParamsTable">
            <summary>
            Returns true if the Frame_Params table exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.CheckHasGlobalParamsTable">
            <summary>
            Returns true if the Global_Params table exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.CheckHasLegacyParameterTables">
            <summary>
            Returns true if the Global_Parameters table exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.CheckHasTable(UIMFLibrary.UIMFData.UIMFTableType,System.String)">
            <summary>
            Check for the existence of the given table
            </summary>
            <param name="tableType"></param>
            <param name="tableName"></param>
            <returns>True if the table exists, false if missing</returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.CheckHasVersionInfoTable">
            <summary>
            Returns true if the Version_Info table exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.ConvertBinToMz(System.Int32,System.Double,UIMFLibrary.FrameParameters)">
            <summary>
            Convert bin number to m/z value
            </summary>
            <param name="binNumber">
            </param>
            <param name="binWidth">Bin width (in ns)
            </param>
            <param name="frameParameters">
            </param>
            <returns>
            m/z<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.ConvertBinToMz(System.Int32,System.Double,UIMFLibrary.FrameParams)">
            <summary>
            Convert bin number to m/z value
            </summary>
            <param name="binNumber">
            </param>
            <param name="binWidth">Bin width (in ns)
            </param>
            <param name="frameParameters">
            </param>
            <returns>
            m/z<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetFrameParametersFields">
            <summary>
            Gets the field names for the legacy Frame_Parameters table
            </summary>
            <returns>
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetFrameParamKeysFields">
            <summary>
            Gets the field names for the Frame_Param_Keys table
            </summary>
            <returns>
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetFrameParamsFields">
            <summary>
            Gets the field names for the Frame_Params table
            </summary>
            <returns>
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </returns>
            <remarks>This table has a dual-column primary key, enforced using an index</remarks>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetFrameScansFields(System.String)">
            <summary>
            Gets the field names for the Frame_Scans table
            </summary>
            <param name="dataType">
            double, float, or int
            </param>
            <returns>
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetGlobalParametersFields">
            <summary>
            Gets the field names for the Global_Parameters table
            </summary>
            <returns>
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetGlobalParamsFields">
            <summary>
            Gets the field names for the Global_Params table
            </summary>
            <returns>
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetLegacyFrameParameterMapping">
            <summary>
            Gets the mapping between legacy frame_parameters strings and FrameParamKeyType enum type
            </summary>
            <returns>
            Dictionary mapping string text to enum
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetLegacyGlobalParameterMapping">
            <summary>
            Gets the mapping between legacy global_parameters strings and GlobalParamKeyType enum type
            </summary>
            <returns>
            Dictionary mapping string text to enum
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetVersionInfoFields">
            <summary>
            Gets the field names for the Version_Info table
            </summary>
            <returns>
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetLastVersionInfo">
            <summary>
            Get the last VersionInfo row stored in the Version_Info table
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.GetVersionInfo">
            <summary>
            Get version info from table.
            </summary>
            <returns>
            List of version info
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:UIMFLibrary.UIMFData.ReadUimfFormatVersion">
            <summary>
            Reads the UIMF format version from the database and stores it to <see cref="P:UIMFLibrary.UIMFData.UimfFormatVersion"/>
            </summary>
        </member>
        <member name="M:UIMFLibrary.UIMFData.ReportError(System.String,System.Exception)">
            <summary>
            Print an error message to the console, then throw an exception
            </summary>
            <param name="errorMessage"></param>
            <param name="ex"></param>
        </member>
        <member name="M:UIMFLibrary.UIMFData.UpdateTableCheckedStatus(UIMFLibrary.UIMFData.UIMFTableType,System.Boolean)">
            <summary>
            Update the stored status of the table
            </summary>
            <param name="tableType"></param>
            <param name="checkedForTable"></param>
        </member>
        <member name="M:UIMFLibrary.UIMFData.UsingLegacyGlobalParams">
            <summary>
            Returns true if the legacy global parameters table exists and the Global_Params table does not
            </summary>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFData.ValidateFrameScansExists(System.String)">
            <summary>
            Check for existence of the Frame_Scans table
            </summary>
            <param name="callingMethod"></param>
        </member>
        <member name="T:UIMFLibrary.DataReader">
            <summary>
            UIMF Data Reader Class
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.BPI">
            <summary>
            BPI text
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.DATA_SIZE">
            <summary>
            Data size
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.TIC">
            <summary>
            TIC text
            </summary>
        </member>
        <member name="E:UIMFLibrary.DataReader.ErrorEvent">
            <summary>
            Error event
            </summary>
        </member>
        <member name="E:UIMFLibrary.DataReader.MessageEvent">
            <summary>
            Message event
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mCachedFrameParameters">
            <summary>
            Frame parameters cache
            </summary>
            <remarks>Key is frame number, value is the frame parameters</remarks>
        </member>
        <member name="F:UIMFLibrary.DataReader.mCachedScanInfo">
            <summary>
            ScanInfo cache
            </summary>
            <remarks>Key is frame number, value is a List of ScanInfo objects</remarks>
        </member>
        <member name="F:UIMFLibrary.DataReader.mCalibrationTable">
            <summary>
            Calibration table
            </summary>
            <remarks>Lists the TOF arrival time bin minimum for each pixel</remarks>
        </member>
        <member name="F:UIMFLibrary.DataReader.mDoesContainBinCentricData">
            <summary>
            True if the file has bin-centric data
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mHasLegacyFrameParameters">
            <summary>
            True if the file has the Frame_Parameters table
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mUsingLegacyFrameParameters">
            <summary>
            True when the .UIMF file has table Frame_Parameters (note that the Frame_Params table takes precedence over an existing Frame_Parameters table)
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mLegacyFrameParametersMissingColumns">
            <summary>
            List of column names that are not present in the legacy Frame_Parameters table
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mFrameTypeInfo">
            <summary>
            Dictionary tracking the frames by frame type
            </summary>
            <remarks><see cref="T:UIMFLibrary.FrameSetContainer"/> maps frame number to frame index</remarks>
        </member>
        <member name="F:UIMFLibrary.DataReader.mFramesWarnedInvalidData">
            <summary>
            Tracks frame numbers for which we called ReportError() to warn the caller that there is invalid data
            </summary>
            <remarks>
            Key is a frame number (integer) or frame range (two integers separated by a dash)
            Value is a list of warning messages</remarks>
        </member>
        <member name="F:UIMFLibrary.DataReader.mFrameTypeMS1">
            <summary>
            Frame type with MS1 data
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetBinDataCommand">
            <summary>
            SQLite command for getting bin data
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetCountPerFrameCommand">
            <summary>
            SQLite command for getting data count per frame
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetFileBytesCommand">
            <summary>
            SQLite command for getting file bytes stored in a table
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetFrameParametersCommand">
            <summary>
            SQLite command for getting the legacy frame parameters
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetFrameParamsCommand">
            <summary>
            SQLite command for getting the parameters from Frame_Params
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetFrameScansCommand">
            <summary>
            SQLite command for getting a list of the scans for a given frame, along with the NonZeroCount, BPI, BPI_MZ, and TIC
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetFramesAndScanByDescendingIntensityCommand">
            <summary>
            SQLite command for getting frames and scans by descending intensity
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mGetSpectrumCommand">
            <summary>
            SQLite command for getting a spectrum
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.mSpectrumCacheList">
            <summary>
            Spectrum cache list
            </summary>
            <remarks>
            Holds the mass spectra for the 10 most recently accessed frames (or frame ranges if frames were summed)
            Can adjust the number of spectra to cache using SpectraToCache
            Spectra are removed from the cache if the memory usage exceeds MaxSpectrumCacheMemoryMB
            </remarks>
        </member>
        <member name="P:UIMFLibrary.DataReader.MaxSpectrumCacheMemoryMB">
            <summary>
            Maximum memory to allow the spectrum cache to utilize (defaults to 750 MB)
            </summary>
        </member>
        <member name="P:UIMFLibrary.DataReader.SpectraToCache">
            <summary>
            Number of spectra to cache (defaults to 10)
            </summary>
            <remarks>Set this to a smaller value if you are encountering OutOfMemory exceptions</remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.DataReader"/> class.
            </summary>
            <param name="filePath">
            Path to the UIMF file
            </param>
            <param name="useInMemoryDatabase">
            Whether to load database into memory
            </param>
            <exception cref="T:System.Exception">
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            </exception>
        </member>
        <member name="T:UIMFLibrary.DataReader.ToleranceType">
            <summary>
            Tolerance type.
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.ToleranceType.PPM">
            <summary>
            Parts per million
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataReader.ToleranceType.Thomson">
            <summary>
            Thomsons
            </summary>
        </member>
        <member name="P:UIMFLibrary.DataReader.DBConnection">
            <summary>
            The connection to the SQLite database
            </summary>
        </member>
        <member name="P:UIMFLibrary.DataReader.HasFrameParamsTable">
            <summary>
            Whether the database has a "FrameParams" table
            </summary>
        </member>
        <member name="P:UIMFLibrary.DataReader.HasLegacyFrameParameters">
            <summary>
            Whether the database is using a legacy frame parameter table
            </summary>
        </member>
        <member name="P:UIMFLibrary.DataReader.PressureIsMilliTorr">
            <summary>
            Gets or sets a value indicating whether pressure is millitorr.
            </summary>
        </member>
        <member name="P:UIMFLibrary.DataReader.TenthsOfNanoSecondsPerBin">
            <summary>
            Gets the tenths of nanoseconds per bin.
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataReader.ColumnExists(System.Data.SQLite.SQLiteConnection,System.String,System.String)">
            <summary>
            Looks for the given column on the given table in the SqLite database
            Note that table names are case sensitive
            </summary>
            <param name="uimfConnection">
            </param>
            <param name="tableName">
            </param>
            <param name="columnName">
            The column Name.
            </param>
            <returns>
            True if the column exists<see cref="T:System.Boolean"/>.
            </returns>
            <remarks>This function does not work with Views; use method TableHasColumn instead</remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetDeltaMz(System.Int32)">
            <summary>
            Compute the spacing between the two midpoint bins in a given frame
            </summary>
            <param name="frameNumber">Frame number</param>
            <returns>Spacing between bins (in Thomsons)</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetDeltaMz(System.Int32,System.Int32)">
            <summary>
            Compute the spacing between any two adjacent bins in a given frame
            </summary>
            <param name="frameNumber">Frame number</param>
            <param name="startBin">Starting bin number</param>
            <returns>Spacing between bins (in Thomsons)</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.AccumulateFrameData(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Retrieves a given frame (or frames) and sums them in order to be viewed on a heat map view or other 2D representation visually.
            </summary>
            <param name="startFrameNumber">
            </param>
            <param name="endFrameNumber">
            </param>
            <param name="flagTOF">
            </param>
            <param name="startScan">
            </param>
            <param name="endScan">
            </param>
            <param name="startBin">
            </param>
            <param name="endBin">
            </param>
            <param name="xCompression">
            </param>
            <param name="yCompression">
            </param>
            <returns>
            Frame data to be utilized in visualization as a multidimensional array
            </returns>
            <remarks>
            This function is used by the UIMF Viewer and by Atreyu
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.CloneUIMF(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{UIMFLibrary.UIMFData.FrameType})">
            <summary>
            Clones this database, but doesn't copy data in tables sTablesToSkipCopyingData.
            If a table is skipped, data will still copy for the frame types specified in eFrameScanFrameTypeDataToAlwaysCopy.
            </summary>
            <param name="targetDBPath">
            The desired path of the newly cloned UIMF file.
            </param>
            <param name="tablesToSkip">
            A list of table names (e.g. Frame_Scans) that should not be copied.
            </param>
            <param name="frameTypesToAlwaysCopy">
            A list of FrameTypes that should ALWAYS be copied.
            		e.g. If "Frame_Scans" is passed into tablesToSkip, data will still be inserted into "Frame_Scans" for these Frame Types.
            </param>
            <returns>
            True if success, false if a problem
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.Dispose(System.Boolean)">
            <summary>
            Dispose this class
            </summary>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.DoesContainBinCentricData">
            <summary>
            Runs a query to see if the bin centric data exists in this UIMF file
            </summary>
            <returns>true if the bin centric data exists, false otherwise</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.FrameTypeDescription(UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Get the frame type description.
            </summary>
            <param name="frameType">
            Frame type.
            </param>
            <returns>
            Frame type text<see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.InvalidCastException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetActualMinMaxFrameNumbersInFrameSet(UIMFLibrary.FrameSetContainer,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Examine the frame numbers in a FrameSet to determine the closest frame number to frameNumberMin and frameNumberMax
            Useful for FrameSets with non-contiguous frame numbers (e.g. MS2 frames)
            </summary>
            <param name="frameSet"></param>
            <param name="frameNumberMin"></param>
            <param name="frameNumberMax"></param>
            <param name="minFrameNumberInFrameSet">First frame number greater than or equal to frameNumberMin</param>
            <param name="maxFrameNumberInFrameSet">Last frame number less than or equal to frameNumberMax</param>
        </member>
        <member name="M:UIMFLibrary.DataReader.Get3DElutionProfile(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Double,System.Double,System.Int32[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Returns the x,y,z arrays needed for a surface plot for the elution of the species in both the LC and drift time dimensions
            </summary>
            <param name="startFrameNumber">
            </param>
            <param name="endFrameNumber">
            </param>
            <param name="frameType">
            </param>
            <param name="startScan">
            </param>
            <param name="endScan">
            </param>
            <param name="targetMZ">
            </param>
            <param name="toleranceInMZ">
            </param>
            <param name="frameValues">
            </param>
            <param name="scanValues">
            </param>
            <param name="intensities">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetBPI(UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts BPI from startFrame to endFrame and startScan to endScan and returns an array
            </summary>
            <param name="frameType">Frame type
            </param>
            <param name="startFrameNumber">Start frame number (if startFrameNumber and endFrameNumber are zero, then sum across all frames)
            </param>
            <param name="endFrameNumber">End frame number
            </param>
            <param name="startScan">Start scan number (if StartScan and EndScan are zero, then sum across all scans)
            </param>
            <param name="endScan">End scan number
            </param>
            <returns>
            Array of intensity values, one per frame
            </returns>
            <remarks>
            To obtain BPI values for all scans in a given Frame, use GetFrameScans
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetBPIByFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts BPI (base peak intensity, aka the largest intensity) from startFrame to endFrame and startScan to endScan and returns a dictionary for all frames
            </summary>
            <param name="startFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="endFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="startScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <param name="endScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <returns>
            Dictionary where keys are frame number and values are the BPI value
            </returns>
            <remarks>
            To obtain BPI values for all scans in a given Frame, use GetFrameScans
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetBPIByFrame(System.Int32,System.Int32,System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Extracts BPI from startFrame to endFrame and startScan to endScan and returns a dictionary of the specified frame type
            </summary>
            <param name="startFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="endFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="startScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <param name="endScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <param name="frameType">
            FrameType to return
            </param>
            <returns>
            Dictionary where keys are frame number and values are the BPI value
            </returns>
            <remarks>
            To obtain BPI values for all scans in a given Frame, use GetFrameScans
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetCalibrationTableNames">
            <summary>
            Get calibration table names.
            </summary>
            <returns>
            List of calibration table names
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetCountPerFrame(System.Int32)">
            <summary>
            Count the number of non zero data points in a frame
            </summary>
            <param name="frameNumber">
            The frame number.
            </param>
            <returns>
            Sum of NonZeroCount for the spectra in a frame<see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetDriftTime(System.Int32,System.Int32)">
            <summary>
            Returns the drift time for the given frame and IMS scan, as computed using driftTime = averageTOFLength * scanNum / 1e6
            The drift time is normalized using 'drift time * STANDARD_PRESSURE / framePressure' where STANDARD_PRESSURE = 4
            </summary>
            <param name="frameNum">
            Frame number (1-based)
            </param>
            <param name="scanNum">
            IMS scan number
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <returns>Drift time (milliseconds)</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetDriftTime(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the drift time for the given frame and IMS scan, as computed using driftTime = averageTOFLength * scanNum / 1e6
            </summary>
            <param name="frameNum">
            Frame number (1-based)
            </param>
            <param name="scanNum">
            IMS scan number
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="normalizeByPressure">
            If true, then this function will normalize the drift time using 'drift time * STANDARD_PRESSURE / framePressure' where STANDARD_PRESSURE = 4
            </param>
            <returns>Drift time (milliseconds)</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetDriftTimeProfile(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Double,System.Double,System.Int32[]@,System.Int32[]@)">
            <summary>
            Get drift time profile for the given range
            </summary>
            <param name="startFrameNumber">
            Start frame number.
            </param>
            <param name="endFrameNumber">
            End frame number.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <param name="startScan">
            Start scan.
            </param>
            <param name="endScan">
            End scan.
            </param>
            <param name="targetMZ">
            Target mz.
            </param>
            <param name="toleranceInMZ">
            Tolerance in mz.
            </param>
            <param name="imsScanValues">
            Output: IMS scan values
            </param>
            <param name="intensities">
            Output: intensities
            </param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFileBytesFromTable(System.String)">
            <summary>
            Method to provide the bytes from tables that store metadata files
            </summary>
            <param name="tableName">
            </param>
            <returns>
            Byte array
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFrameAndScanListByDescendingIntensity">
            <summary>
            Get frame and scan list by descending intensity.
            </summary>
            <returns>
            Stack of tuples (FrameNum, ScanNum, BPI)
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFrameNumbers(UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Returns the frame numbers for the specified frame_type
            </summary>
            <param name="frameType">
            The frame Type.
            </param>
            <returns>
            Array of frame numbers
            </returns>
            <remarks>Use GetMasterFrameList() to obtain all of the frame numbers, regardless of frameType</remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFrameParameters(System.Int32)">
            <summary>
            Get frame parameters for specified frame
            </summary>
            <param name="frameNumber">
            Frame number.
            </param>
            <returns>
            Frame Parameters for the given frame<see cref="T:UIMFLibrary.FrameParameters"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.PreCacheAllFrameParams">
            <summary>
            Reads and caches the all frame parameters in the UIMF file
            </summary>
            <remarks>Once the parameters are cached, calls to GetFrameParams will be instantaneous</remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFrameParams(System.Int32)">
            <summary>
            Get frame parameters
            </summary>
            <param name="frameNumber"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFrameStartTimeMinutesEstimated(System.Int32)">
            <summary>
            If 'StartTimeMinutes' is not specified in the FrameParams, this method will estimate it (but with no guarantees of accuracy)
            </summary>
            <param name="frameNumber"></param>
            <returns>Actual StartTimeMinutes (if set), otherwise the computed start time (which depends on other metadata being correct)</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFramePressureForCalculationOfDriftTime(System.Int32)">
            <summary>
            Returns the key frame pressure value that is used in the calculation of drift time
            </summary>
            <param name="frameNumber">
            </param>
            <returns>
            Frame pressure used in drift time calc
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFramePressureForCalculationOfDriftTime(UIMFLibrary.FrameParams)">
            <summary>
            Gets the frame pressure, which is used when computing normalized drift time
            </summary>
            <param name="frameParameters"></param>
            <returns>Frame pressure, in torr</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetScan(System.Int32,System.Int32)">
            <summary>
            Retrieve the ScanInfo for a single scan in a specified frame
            </summary>
            <param name="frameNumber">Frame Number</param>
            <param name="scan">Scan Number</param>
            <returns>ScanInfo object, listing BPI, BPI_MZ, TIC, DriftTime, and NonZeroCount</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFrameScans(System.Int32)">
            <summary>
            Gets information on the scans associated with a given frame
            </summary>
            <param name="frameNumber">Frame Number</param>
            <returns>
            List of ScanInfo objects, listing BPI, BPI_MZ, TIC, DriftTime, and NonZeroCount
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFrameTypeForFrame(System.Int32)">
            <summary>
            Utility method to return the Frame Type for a particular frame number
            </summary>
            <param name="frameNumber">
            </param>
            <returns>
            Frame type of the frame<see cref="T:UIMFLibrary.UIMFData.FrameType"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetFramesAndScanIntensitiesForAGivenMz(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Get frames and scan intensities for a given mz.
            </summary>
            <param name="startFrameNumber">
            Start frame number.
            </param>
            <param name="endFrameNumber">
            End frame number.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <param name="startScan">
            Start scan.
            </param>
            <param name="endScan">
            End scan.
            </param>
            <param name="targetMZ">
            Target mz.
            </param>
            <param name="toleranceInMZ">
            Tolerance in mz.
            </param>
            <returns>
            2D array of scan intensities by frame
            </returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetIntensityBlock(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the intensity block for a given data range
            </summary>
            <param name="startFrameNumber">
            Start frame number.
            </param>
            <param name="endFrameNumber">
            End frame number.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <param name="startScan">
            Start scan.
            </param>
            <param name="endScan">
            End scan.
            </param>
            <param name="startBin">
            Start bin.
            </param>
            <param name="endBin">
            End bin.
            </param>
            <returns>
            Array of intensities; dimensions are Frame, Scan, Bin
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetIntensityBlockForDemultiplexing(System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a set of intensity values that will be used for demultiplexing.
            Optionally limit the bin range using binStart and binEnd
            </summary>
            <param name="frameNumber">
            The frame where the intensity data should come from.
            </param>
            <param name="frameType">
            The type of frame the intensity data should come from.
            </param>
            <param name="segmentLength">
            The length of the demultiplexing segment.
            </param>
            <param name="scanToIndexMap">
            The map that defines the re-ordering process of demultiplexing. Can be empty or null if doReorder is false.
            </param>
            <param name="doReorder">
            Whether to re-order the data or not. This can be used to speed up the demultiplexing process.
            </param>
            <param name="pagingFilterStartBin">
            Start bin for filtering data; ignored if pagingFilterCount is 0
            </param>
            <param name="pagingFilterCount">
            Number of bins to return when using pagingFilterStartBin
            </param>
            <param name="numFramesToSum">
            Number of frames to sum. Must be an odd number greater than 0.
            e.g. numFramesToSum of 3 will be +- 1 around the given frameNumber.
            </param>
            <returns>
             Array of intensities for a given frame; dimensions are bin and scan
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetIntensityBlockOfFrame(System.Int32)">
            <summary>
            Get intensity values by bin for a frame
            </summary>
            <param name="frameNumber">
            Frame number.
            </param>
            <returns>
            Dictionary of intensity values by bin.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetLCProfile(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Double,System.Double,System.Int32[]@,System.Int32[]@)">
            <summary>
            Get the summed intensity values for a given data range
            </summary>
            <param name="startFrameNumber">
            Start frame number.
            </param>
            <param name="endFrameNumber">
            End frame number.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <param name="startScan">
            Start scan.
            </param>
            <param name="endScan">
            End scan.
            </param>
            <param name="targetMZ">
            Target mz.
            </param>
            <param name="toleranceInMZ">
            Tolerance in mz.
            </param>
            <param name="frameValues">
            Output: list of frame numbers
            </param>
            <param name="intensities">
            Output: list of summed intensity values
            </param>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetLogEntries(System.String,System.String)">
            <summary>
            TGet log entries.
            </summary>
            <param name="entryType">
            Entry type filter (ignored if blank)
            </param>
            <param name="postedBy">
            Posted by filter (ignored if blank)
            </param>
            <returns>
            List of log entries
            </returns>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetMasterFrameList">
            <summary>
            Constructs a dictionary that has the frame numbers as the key and the frame type as the value.
            </summary>
            <returns>Returns a dictionary object that has frame number as the key and frame type as the value.</returns>
            <remarks>The first frame should be Frame Number 1</remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetMzCalibrator(UIMFLibrary.FrameParams)">
            <summary>
            Get mz calibrator.
            </summary>
            <param name="frameParameters">
            Frame parameters.
            </param>
            <returns>
            MZ calibrator object<see cref="T:UIMFLibrary.MzCalibrator"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetNumberOfFrames(UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Get number of frames for given frame type
            </summary>
            <param name="frameType">
            </param>
            <returns>
            Number of frames<see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetPixelMZ(System.Int32)">
            <summary>
            Get the minimum TOF bin arrival time value for the given pixel bin
            </summary>
            <param name="bin">
            Bin number
            </param>
            <returns>
            TOF bin arrive time<see cref="T:System.Double"/>.
            </returns>
            <remarks>The function name is misleading; does not return an m/z</remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetBinForPixel(System.Int32)">
            <summary>
            Get the minimum TOF bin arrival time value for the given pixel bin
            </summary>
            <param name="pixel">
            Pixel bin
            </param>
            <returns>
            TOF bin arrive time<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSaturationLevel">
            <summary>
            Returns the saturation level (maximum intensity value) for a single unit of measurement
            </summary>
            <returns>saturation level</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSaturationLevel(System.Int32)">
            <summary>
            Returns the saturation level (maximum intensity value) for a single unit of measurement
            </summary>
            <param name="detectorBits">Number of bits used by the detector (usually 8 or 12)</param>
            <returns>saturation level</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrum(System.Int32,System.Int32,System.Double[]@,System.Int32[]@)">
            <summary>
            Extracts m/z values and intensities from given frame number and scan number.
            Each entry into mzArray will be the m/z value that contained a non-zero intensity value.
            The index of the m/z value in mzArray will match the index of the corresponding intensity value in intensityArray.
            </summary>
            <param name="frameNumber">
            The frame number of the desired spectrum; must be an MS1 frame
            </param>
            <param name="scanNumber">
            The scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="mzArray">
            The m/z values that contained non-zero intensity values.
            </param>
            <param name="intensityArray">
            The corresponding intensity values of the non-zero m/z value.
            </param>
            <returns>
            The number of non-zero m/z values found in the resulting spectrum.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrum(System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Double[]@,System.Int32[]@)">
            <summary>
            Extracts m/z values and intensities from given frame number and scan number.
            Each entry into mzArray will be the m/z value that contained a non-zero intensity value.
            The index of the m/z value in mzArray will match the index of the corresponding intensity value in intensityArray.
            </summary>
            <param name="frameNumber">
            The frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="scanNumber">
            The scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="mzArray">
            The m/z values that contained non-zero intensity values.
            </param>
            <param name="intensityArray">
            The corresponding intensity values of the non-zero m/z value.
            </param>
            <returns>
            The number of non-zero m/z values found in the resulting spectrum.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrum(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Double[]@,System.Int32[]@)">
            <summary>
            Extracts m/z values and intensities from given frame range and scan range.
            The intensity values of each m/z value are summed across the frame range. The result is a spectrum for a single frame.
            Each entry into mzArray will be the m/z value that contained a non-zero intensity value.
            The index of the m/z value in mzArray will match the index of the corresponding intensity value in intensityArray.
            </summary>
            <param name="startFrameNumber">
            The start frame number of the desired spectrum.
            </param>
            <param name="endFrameNumber">
            The end frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="startScanNumber">
            The start scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="endScanNumber">
            The end scan number of the desired spectrum.
            </param>
            <param name="mzArray">
            The m/z values that contained non-zero intensity values.
            </param>
            <param name="intensityArray">
            The corresponding intensity values of the non-zero m/z value.
            </param>
            <returns>
            The number of non-zero m/z values found in the resulting spectrum.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrum(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Double,System.Double,System.Double[]@,System.Int32[]@)">
            <summary>
            Extracts m/z values and intensities from given frame range and scan range and m/z range.
            The intensity values of each m/z value are summed across the frame range. The result is a spectrum for a single frame.
            Each entry into mzArray will be the m/z value that contained a non-zero intensity value.
            The index of the m/z value in mzArray will match the index of the corresponding intensity value in intensityArray.
            </summary>
            <param name="startFrameNumber">
            The start frame number of the desired spectrum.
            </param>
            <param name="endFrameNumber">
            The end frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider; only used if the file has Bin-centric tables
            </param>
            <param name="startScanNumber">
            The start scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="endScanNumber">
            The end scan number of the desired spectrum.
            </param>
            <param name="startMz">
            The start m/z value of the desired spectrum.
            </param>
            <param name="endMz">
            The end m/z value of the desired spectrum.
            </param>
            <param name="mzArray">
            The m/z values that contained non-zero intensity values.
            </param>
            <param name="intensityArray">
            The corresponding intensity values of the non-zero m/z value.
            </param>
            <returns>
            The number of non-zero m/z values found in the resulting spectrum.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrum(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[]@,System.Int32[]@)">
            <summary>
            Extracts m/z values and intensities from given frame range and scan range and bin range.
            The intensity values of each m/z value are summed across the frame range. The result is a spectrum for a single frame.
            Each entry into mzArray will be the m/z value that contained a non-zero intensity value.
            The index of the m/z value in mzArray will match the index of the corresponding intensity value in intensityArray.
            </summary>
            <param name="startFrameNumber">
            The start frame number of the desired spectrum.
            </param>
            <param name="endFrameNumber">
            The end frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="startScanNumber">
            The start scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="endScanNumber">
            The end scan number of the desired spectrum.
            </param>
            <param name="startBin">
            The start bin index of the desired spectrum.
            </param>
            <param name="endBin">
            The end bin index of the desired spectrum.
            </param>
            <param name="mzArray">
            The m/z values that contained non-zero intensity values.
            </param>
            <param name="intensityArray">
            The corresponding intensity values of the non-zero m/z value.
            </param>
            <returns>
            The number of non-zero m/z values found in the resulting spectrum.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrumAsBins(System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32)">
            <summary>
            Extracts intensities from given frame range and scan range.
            The intensity values of each bin are summed across the frame range. The result is a spectrum for a single frame.
            </summary>
            <param name="frameNumber">
            The frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="scanNumber">
            The scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <returns>
            An array containing an intensity value for each bin location, even if the intensity value is 0.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrumAsBins(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32)">
            <summary>
            Extracts intensities from given frame range and scan range.
            The intensity values of each bin are summed across the frame range. The result is a spectrum for a single frame.
            </summary>
            <param name="startFrameNumber">
            The start frame number of the desired spectrum.
            </param>
            <param name="endFrameNumber">
            The end frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="startScanNumber">
            The start scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="endScanNumber">
            The end scan number of the desired spectrum.
            </param>
            <returns>
            An array containing an intensity value for each bin location, even if the intensity value is 0.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrumAsBinsNz(System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32@)">
            <summary>
            Extracts intensities from given frame range and scan range.
            The intensity values of each bin are summed across the frame range. The result is a spectrum for a single frame.
            </summary>
            <param name="frameNumber">
            The frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="scanNumber">
            The scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="maxBin">The maximum bin value for the scan</param>
            <returns>
            List of Key-Value Pairs (Key=Bin, Value=Intensity) containing an intensity value for each non-zero bin location.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrumAsBinsNz(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Extracts intensities from given frame range and scan range.
            The intensity values of each bin are summed across the frame range. The result is a spectrum for a single frame.
            </summary>
            <param name="startFrameNumber">
            The start frame number of the desired spectrum.
            </param>
            <param name="endFrameNumber">
            The end frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="startScanNumber">
            The start scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="endScanNumber">
            The end scan number of the desired spectrum.
            </param>
            <param name="maxBin">The maximum bin value for the scan</param>
            <returns>
            List of Key-Value Pairs (Key=Bin, Value=Intensity) containing an intensity value for each non-zero bin location.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetSpectrumBinCentric(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[]@,System.Int32[]@)">
            <summary>
            Extracts m/z values and intensities from given frame range and scan range and bin range.
            The intensity values of each m/z value are summed across the frame range. The result is a spectrum for a single frame.
            Each entry into mzArray will be the m/z value that contained a non-zero intensity value.
            The index of the m/z value in mzArray will match the index of the corresponding intensity value in intensityArray.
            </summary>
            <param name="startFrameNumber">
            The start frame number of the desired spectrum.
            </param>
            <param name="endFrameNumber">
            The end frame number of the desired spectrum.
            </param>
            <param name="frameType">
            The frame type to consider.
            </param>
            <param name="startScanNumber">
            The start scan number of the desired spectrum.
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="endScanNumber">
            The end scan number of the desired spectrum.
            </param>
            <param name="startBin">
            The start bin index of the desired spectrum.
            </param>
            <param name="endBin">
            The end bin index of the desired spectrum.
            </param>
            <param name="mzArray">
            The m/z values that contained non-zero intensity values.
            </param>
            <param name="intensityArray">
            The corresponding intensity values of the non-zero m/z value.
            </param>
            <returns>
            The number of non-zero m/z values found in the resulting spectrum.
            </returns>
            <remarks>
            The UIMF file MUST have BinCentric tables when using this function; add them with method CreateBinCentricTables of the UIMFWriter class
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetTIC(UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts TIC from startFrame to endFrame and startScan to endScan and returns an array
            </summary>
            <param name="frameType">Frame type
            </param>
            <param name="startFrameNumber">Start frame number (if startFrameNumber and endFrameNumber are zero, then sum across all frames)
            </param>
            <param name="endFrameNumber">End frame number
            </param>
            <param name="startScan">Start scan (if StartScan and EndScan are zero, then sum across all scans)
            </param>
            <param name="endScan">End scan
            </param>
            <returns>
            Array of intensity values, one per frame
            </returns>
            <remarks>
            To obtain TIC values for all scans in a given Frame, use GetFrameScans
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetTIC(System.Int32,System.Int32)">
            <summary>
            Extracts TIC from frameNum and scanNum
            </summary>
            <param name="frameNumber">
            </param>
            <param name="scanNum">
            </param>
            <returns>
            TIC value for a single scan in a single frame.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetTICByFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts TIC from startFrame to endFrame and startScan to endScan and returns a dictionary for all frames
            </summary>
            <param name="startFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="endFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="startScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <param name="endScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <returns>
            Dictionary where keys are frame number and values are the TIC value
            </returns>
            <remarks>
            To obtain TIC values for all scans in a given Frame, use GetFrameScans
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetTICByFrame(System.Int32,System.Int32,System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Extracts TIC from startFrame to endFrame and startScan to endScan and returns a dictionary of the specified frame type
            </summary>
            <param name="startFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="endFrameNumber">
            If startFrameNumber and endFrameNumber are 0, then returns all frames
            </param>
            <param name="startScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <param name="endScan">
            If startScan and endScan are 0, then uses all scans
            </param>
            <param name="frameType">
            FrameType to return
            </param>
            <returns>
            Dictionary where keys are frame number and values are the TIC value
            </returns>
            <remarks>
            To obtain TIC values for all scans in a given Frame, use GetFrameScans
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetXic(System.Int32,UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Get the extracted ion chromatogram at the given bin for the specified frame type
            </summary>
            <param name="targetBin">
            Target bin number
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <returns>
            IntensityPoint list
            </returns>
            <remarks>
            The UIMF file MUST have BinCentric tables when using this function; add them with method CreateBinCentricTables of the UIMFWriter class
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetXic(System.Double,System.Double,UIMFLibrary.UIMFData.FrameType,UIMFLibrary.DataReader.ToleranceType)">
            <summary>
            Get the extracted ion chromatogram for a given m/z for the specified frame type
            </summary>
            <param name="targetMz">
            Target mz.
            </param>
            <param name="tolerance">
            Tolerance.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <param name="toleranceType">
            Tolerance type.
            </param>
            <returns>
            IntensityPoint list
            </returns>
            <remarks>
            The UIMF file MUST have BinCentric tables when using this function; add them with method CreateBinCentricTables of the UIMFWriter class
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetXic(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,UIMFLibrary.DataReader.ToleranceType)">
            <summary>
            Get the extracted ion chromatogram for a given m/z for the specified frame type, limiting by frame range and scan range
            </summary>
            <param name="targetMz">
            Target mz.
            </param>
            <param name="tolerance">
            Tolerance.
            </param>
            <param name="frameNumberMin"></param>
            <param name="frameNumberMax"></param>
            <param name="scanMin">
            Minimum scan number
            </param>
            <param name="scanMax">
            Maximum scan number
            </param>
            <param name="frameType">
            Frame type
            </param>
            <param name="toleranceType">
            Tolerance type
            </param>
            <returns>
            IntensityPoint list
            </returns>
            <remarks>
            The UIMF file MUST have BinCentric tables when using this function; add them with method CreateBinCentricTables of the UIMFWriter class
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetXicAsArray(System.Double,System.Double,UIMFLibrary.UIMFData.FrameType,UIMFLibrary.DataReader.ToleranceType)">
            <summary>
            Get the extracted ion chromatogram for a given m/z for the specified frame type
            </summary>
            <param name="targetMz">
            Target mz.
            </param>
            <param name="tolerance">
            Tolerance.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <param name="toleranceType">
            Tolerance type.
            </param>
            <returns>
            2D array of XIC values; dimensions are frame, scan
            </returns>
            <remarks>
            The UIMF file MUST have BinCentric tables when using this function; add them with method CreateBinCentricTables of the UIMFWriter class
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetXicAsArray(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType,UIMFLibrary.DataReader.ToleranceType)">
            <summary>
            Get the extracted ion chromatogram for a given m/z for the specified frame type, limiting by frame range and scan range
            </summary>
            <param name="targetMz">
            Target mz.
            </param>
            <param name="tolerance">
            Tolerance.
            </param>
            <param name="frameNumberMin">
            Frame index min.
            </param>
            <param name="frameNumberMax">
            Frame index max.
            </param>
            <param name="scanMin">
            Scan min.
            </param>
            <param name="scanMax">
            Scan max.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <param name="toleranceType">
            Tolerance type.
            </param>
            <returns>
            2D array of XIC values; dimensions are frame, scan
            </returns>
            <remarks>
            The UIMF file MUST have BinCentric tables when using this function; add them with method CreateBinCentricTables of the UIMFWriter class
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetXicAsArray(System.Int32,UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Get the extracted ion chromatogram for a given bin for the specified frame type
            </summary>
            <param name="targetBin">
            Target bin.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <returns>
            2D array of XIC values; dimensions are frame, scan
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.HasMSMSData">
            <summary>
            Method to check if this dataset has any MS/MS data
            </summary>
            <returns>True if MS/MS frames are present</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.IsCalibrated">
            <summary>
            Returns True if all frames with frame types 0 through 3 have CalibrationDone greater than 0 in frame_parameters
            </summary>
            <returns>
            True if all frames in the UIMF file have been calibrated<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.IsCalibrated(UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Returns True if all frames with frame types 0 through iMaxFrameTypeToExamine have CalibrationDone greater than 0 in frame_parameters
            </summary>
            <param name="iMaxFrameTypeToExamine">Maximum frame type to consider</param>
            <returns>
            True if all frames of the specified FrameType (or lower) have been calibrated<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.IsCalibratedLegacy(UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Returns True if all frames with frame types 0 through iMaxFrameTypeToExamine have CalibrationDone greater than 0 in frame_parameters
            </summary>
            <param name="iMaxFrameTypeToExamine">Maximum frame type to consider</param>
            <returns>
            True if all frames in the UIMF file have been calibrated<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.PostLogEntry(System.String,System.String,System.String)">
            <summary>
            Post a new log entry to table Log_Entries
            </summary>
            <param name="entryType">
            Log entry type (typically Normal, Error, or Warning)
            </param>
            <param name="message">
            Log message
            </param>
            <param name="postedBy">
            Process or application posting the log message
            </param>
            <remarks>
            The Log_Entries table will be created if it doesn't exist
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.UpdateAllCalibrationCoefficients(System.Double,System.Double,System.Boolean)">
            <summary>
            Update the calibration coefficients for all frames
            </summary>
            <param name="slope">
            The slope value for the calibration.
            </param>
            <param name="intercept">
            The intercept for the calibration.
            </param>
            <param name="isAutoCalibrating">
            Optional argument that should be set to true if calibration is automatic. Defaults to false.
            </param>
        </member>
        <member name="M:UIMFLibrary.DataReader.UpdateCalibrationCoefficients(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Update the calibration coefficients for a single frame
            </summary>
            <param name="frameNumber">
            The frame number to update.
            </param>
            <param name="slope">
            The slope value for the calibration.
            </param>
            <param name="intercept">
            The intercept for the calibration.
            </param>
            <param name="isAutoCalibrating">
            Optional argument that should be set to true if calibration is automatic. Defaults to false.
            </param>
        </member>
        <member name="M:UIMFLibrary.DataReader.DeterminePressureUnits(System.Int32)">
            <summary>
            Examines the pressure columns to determine whether they are in torr or mTorr
            </summary>
            <param name="firstFrameNumber">Frame number of the first frame</param>
        </member>
        <member name="M:UIMFLibrary.DataReader.ColumnIsMilliTorr(System.Data.IDbCommand,System.String,System.String)">
            <summary>
            Check whether a pressure column in the legacy Frame_Parameters table contains millitorr values
            </summary>
            <param name="cmd">
            SQLiteCommand object
            </param>
            <param name="tableName">
            Table name.
            </param>
            <param name="columnName">
            Column name.
            </param>
            <returns>
            True if the pressure column in the given table is in millitorr<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.ColumnIsMilliTorr(System.Data.IDbCommand,UIMFLibrary.FrameParamKeyType)">
            <summary>
            Check whether a pressure param contains millitorr values
            </summary>
            <param name="cmd">
            SQLiteCommand object
            </param>
            <param name="paramType">
            Param key to query
            </param>
            <returns>
            True if the pressure column in the given table is in millitorr<see cref="T:System.Boolean"/>.
            </returns>
            <remarks>
            This is an empirical check where we compute the average of the first 25 non-zero pressure values
            If the average is greater than 100, then we assume the values are milliTorr
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataReader.StripZerosFromArrays``1(System.Int32,``0[]@,System.Int32[]@)">
            <summary>
            Remove zero-intensity entries from parallel arrays
            </summary>
            <param name="nonZeroCount">
            Non zero count.
            </param>
            <param name="xDataArray">
            x data array.
            </param>
            <param name="yDataArray">
            y data array.
            </param>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetLegacyFrameParamOrDefault(System.Data.IDataRecord,System.String,System.Double)">
            <summary>
            Get the value for a specified frame parameter
            </summary>
            <param name="reader">
            Reader object
            </param>
            <param name="columnName">
            Column name.
            </param>
            <param name="defaultValue">
            Default value.
            </param>
            <returns>
            The frame parameter if found, otherwise defaultValue<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetLegacyFrameParamOrDefault(System.Data.IDataRecord,System.String,System.Double,System.Boolean@)">
            <summary>
            Get the value for a specified frame parameter
            </summary>
            <param name="reader">
            Reader object
            </param>
            <param name="columnName">
            Column name.
            </param>
            <param name="defaultValue">
            Default value.
            </param>
            <param name="columnMissing">
            Output: true if the column is missing
            </param>
            <returns>
            The frame parameter if found, otherwise defaultValue<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetLegacyFrameParamOrDefaultInt32(System.Data.IDataRecord,System.String,System.Int32)">
            <summary>
            Get the integer value for a specified frame parameter
            </summary>
            <param name="reader">
            Reader object
            </param>
            <param name="columnName">
            Column name.
            </param>
            <param name="defaultValue">
            Default value.
            </param>
            <returns>
            The frame parameter if found, otherwise defaultValue<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetLegacyFrameParamOrDefaultInt32(System.Data.IDataRecord,System.String,System.Int32,System.Boolean@)">
            <summary>
            Get the integer value for a specified frame parameter
            </summary>
            <param name="reader">
            Reader object
            </param>
            <param name="columnName">
            Column name.
            </param>
            <param name="defaultValue">
            Default value.
            </param>
            <param name="columnMissing">
            Output: true if the column is missing
            </param>
            <returns>
            The frame parameter if found, otherwise defaultValue<see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.CalculateFrameAndScanForEncodedIndex(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates the LC and IMS scans of an encoded index.
            </summary>
            <param name="encodedIndex">
            The encoded index.
            </param>
            <param name="numImsScansInFrame">
            The number of IMS scans.
            </param>
            <param name="scanLc">
            The resulting LC Scan number (aka frame number).
            </param>
            <param name="scanIms">
            The resulting IMS Scan number.
            </param>
        </member>
        <member name="M:UIMFLibrary.DataReader.CloneUIMFGetObjects(System.String)">
            <summary>
            Lookup the names of the given objects in a UIMF library
            </summary>
            <param name="sObjectType">
            Object type to find, either table or index
            </param>
            <returns>
            Dictionary with object name as the key and Sql creation code as the value
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.ConvertPressureToTorr(System.Double,UIMFLibrary.PressureUnits)">
            <summary>
            Converts the specified pressure value to Torr
            </summary>
            <param name="pressure">Pressure value, in Torr or milliTorr</param>
            <param name="pressureUnits">Current units for pressure</param>
            <returns>Pressure value, in Torr</returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.DetermineFrameTypes">
            <summary>
            Determines if the MS1 Frames of this file are labeled as 0 or 1.
            Note that MS1 frames should recorded as '1'. But we need to
            support legacy UIMF files which have values of '0' for MS1.
            The determined value is stored in a class-wide variable for later use.
            Exception is thrown if both 0 and 1 are found.
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataReader.FillOutFrameInfo">
            <summary>
            This will fill out information about each frame type
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetOrCreateSpectrumCache(System.Int32,System.Int32,UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Get the spectrum cache (create it if missing)
            </summary>
            <param name="startFrameNumber">
            Start frame number.
            </param>
            <param name="endFrameNumber">
            End frame number.
            </param>
            <param name="frameType">
            Frame type.
            </param>
            <returns>
            SpectrumCache object<see cref="T:UIMFLibrary.SpectrumCache"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetTicOrBpi(UIMFLibrary.UIMFData.FrameType,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Get TIC or BPI for scans of given frame type in given frame range
            Optionally filter on scan range
            </summary>
            <param name="frameType">Frame type
            </param>
            <param name="startFrameNumber">Start frame number (if startFrameNumber and endFrameNumber are zero, then sum across all frames)
            </param>
            <param name="endFrameNumber">End frame number
            </param>
            <param name="startScan">Start scan (if StartScan and EndScan are zero, then sum across all scans)
            </param>
            <param name="endScan">End scan
            </param>
            <param name="fieldName">Field name to retrieve (BPI or TIC)
            </param>
            <returns>
            Array of intensity values, one per frame
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetTicOrBpiByFrame(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,UIMFLibrary.UIMFData.FrameType)">
            <summary>
            Get TIC or BPI for scans of given frame type in given frame range
            Optionally filter on scan range
            </summary>
            <param name="startFrameNumber">Start frame number (if startFrameNumber and endFrameNumber are zero, then sum across all frames)
            </param>
            <param name="endFrameNumber">End frame number
            </param>
            <param name="startScan">Start scan (if StartScan and EndScan are zero, then sum across all scans)
            </param>
            <param name="endScan">End scan
            </param>
            <param name="fieldName">Field name to retrieve (BPI or TIC)
            </param>
            <param name="filterByFrameType">Whether or not to filter by Frame Type
            </param>
            <param name="frameType">Frame type to filter on
            </param>
            <returns>
            Dictionary where keys are frame number and values are the TIC or BPI value
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetUpperLowerBinsFromMz(System.Int32,System.Double,System.Double)">
            <summary>
            Get the two bins closest to the specified m/z
            </summary>
            <param name="frameNumber">
            Frame to search
            </param>
            <param name="targetMZ">
            mz to find
            </param>
            <param name="toleranceInMZ">
            mz tolerance
            </param>
            <returns>
            Two element array of the closet bins
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataReader.LoadPrepStatements">
            <summary>
            Load prep statements
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataReader.GetLegacyFrameParameters(System.Data.IDataRecord)">
            <summary>
            Populate frame parameters
            </summary>
            <param name="reader">
            Reader object
            </param>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:UIMFLibrary.DataReader.ReadFrameParamValue(System.Data.IDataRecord,System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{UIMFLibrary.FrameParamKeyType,UIMFLibrary.FrameParamDef},UIMFLibrary.FrameParams)">
            <summary>
            Reads the frame parameter ID and value of the given row in the reader, then stores in frameParameters
            </summary>
            <param name="reader">Reader object</param>
            <param name="idColIndex">Index of the column with the ParamID</param>
            <param name="valueColIndex">Index of the column with the ParamValue</param>
            <param name="frameParamKeys">Frame parameter lookup dictionary</param>
            <param name="frameParameters">FrameParams object</param>
        </member>
        <member name="M:UIMFLibrary.DataReader.UnloadPrepStatements">
            <summary>
            Unload the prep statements
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataReader.OnErrorMessage(UIMFLibrary.MessageEventArgs)">
            <summary>
            Raise the error event
            </summary>
            <param name="e">
            Message event args
            </param>
        </member>
        <member name="M:UIMFLibrary.DataReader.OnMessage(UIMFLibrary.MessageEventArgs)">
            <summary>
            Raise the message event
            </summary>
            <param name="e">
            Message event args
            </param>
        </member>
        <member name="T:UIMFLibrary.UIMFDataUtilities">
            <summary>
            The uimf data utilities.
            </summary>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.DoubleToString(System.Double)">
            <summary>
            Convert a double to a string, forcing invariant culture
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.FloatToString(System.Double)">
            <summary>
            Convert a float to a string, forcing invariant culture
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.FloatToString(System.Single)">
            <summary>
            Convert a double to a string, forcing invariant culture
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.IntToString(System.Double)">
            <summary>
            Convert an int to a string, forcing invariant culture
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.IntToString(System.Int32)">
            <summary>
            Convert a int to a string, forcing invariant culture
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.ParseOutZeroValues(System.Double[]@,System.Int32[]@)">
            <summary>
            Filters xData and yData to only contain data with mass between 1 and 100000 m/z, and with intensity > 0
            </summary>
            <param name="xData">
            The x values.
            </param>
            <param name="yData">
            The y values.
            </param>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.ParseOutZeroValues(System.Double[]@,System.Int32[]@,System.Double,System.Double)">
            <summary>
            Filters xData and yData to only contain data with mass between minMZ and maxMZ, and with intensity > 0
            </summary>
            <param name="xData">
            The x values.
            </param>
            <param name="yData">
            The y values.
            </param>
            <param name="minMZ">
            The min mz.
            </param>
            <param name="maxMZ">
            The max mz.
            </param>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.StandardizeDate(System.String)">
            <summary>
            Force date string output to an invariant culture format
            </summary>
            <param name="dateString"></param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.UIMFDataUtilities.StandardizeDate(System.DateTime)">
            <summary>
            Force date string output to an invariant culture format
            </summary>
            <param name="dateValue"></param>
            <returns></returns>
        </member>
        <member name="T:UIMFLibrary.DataWriter">
            <summary>
            UIMF Data Writer class
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.MINIMUM_FLUSH_INTERVAL_SECONDS">
            <summary>
            Minimum interval between flushing (commit transaction / create new transaction)
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mDbCommandInsertFrameParamKey">
            <summary>
            Command to insert a frame parameter key
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mDbCommandInsertFrameParamValue">
            <summary>
            Command to insert a frame parameter value
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mDbCommandUpdateFrameParamValue">
            <summary>
            Command to update a frame parameter value
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mDbCommandInsertLegacyFrameParameterRow">
            <summary>
            Command to insert a row in the legacy FrameParameters table
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mDbCommandInsertGlobalParamValue">
            <summary>
            Command to insert a global parameter value
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mDbCommandUpdateGlobalParamValue">
            <summary>
            Command to update a global parameter value
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mDbCommandInsertScan">
            <summary>
            Command to insert a scan
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mCreateLegacyParametersTables">
            <summary>
            Whether or not to create the legacy Global_Parameters and Frame_Parameters tables
            </summary>
        </member>
        <member name="F:UIMFLibrary.DataWriter.mFrameNumsInLegacyFrameParametersTable">
            <summary>
            This list tracks the frame numbers that are present in the Frame_Parameters table
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.DataWriter"/> class.
            Constructor for UIMF DataWriter that takes the filename and begins the transaction.
            </summary>
            <param name="filePath">Full path to the data file</param>
            <param name="entryAssembly">Entry assembly, used when adding a line to the Version_Info table</param>
            <remarks>When creating a brand new .UIMF file, you must call CreateTables() after instantiating the writer</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.#ctor(System.String,System.Boolean,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:UIMFLibrary.DataWriter"/> class.
            Constructor for UIMF DataWriter that takes the filename and begins the transaction.
            </summary>
            <param name="filePath">Full path to the data file</param>
            <param name="createLegacyParametersTables">When true, create and populate legacy tables Global_Parameters and Frame_Parameters</param>
            <param name="entryAssembly">Entry assembly, used when adding a line to the Version_Info table</param>
            <remarks>When creating a brand new .UIMF file, you must call CreateTables() after instantiating the writer</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.ConvertLegacyGlobalParameters">
            <summary>
            Create and populate table Global_Params using legacy table Global_Parameters
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PostLogEntry(System.String,System.String,System.String)">
            <summary>
            Post a new log entry to table Log_Entries
            </summary>
            <param name="entryType">
            Log entry type (typically Normal, Error, or Warning)
            </param>
            <param name="message">
            Log message
            </param>
            <param name="postedBy">
            Process or application posting the log message
            </param>
            <remarks>
            The Log_Entries table will be created if it doesn't exist
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PostLogEntry(System.Data.SQLite.SQLiteConnection,System.String,System.String,System.String)">
            <summary>
            Post a new log entry to table Log_Entries
            </summary>
            <param name="oConnection">
            Database connection object
            </param>
            <param name="entryType">
            Log entry type (typically Normal, Error, or Warning)
            </param>
            <param name="message">
            Log message
            </param>
            <param name="postedBy">
            Process or application posting the log message
            </param>
            <remarks>
            The Log_Entries table will be created if it doesn't exist
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddLegacyParameterTablesUsingExistingParamTables">
            <summary>
            Creates the Global_Parameters and Frame_Parameters tables using existing data in tables Global_Params and Frame_Params
            </summary>
            <remarks>Does not add any values if the legacy tables already exist</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddUpdateFrameParameter(System.Int32,UIMFLibrary.FrameParamKeyType,System.String)">
            <summary>
            Add or update a frame parameter entry in the Frame_Params table
            </summary>
            <param name="frameNum">Frame number</param>
            <param name="paramKeyType">Parameter type</param>
            <param name="paramValue">Parameter value</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddUpdateGlobalParameter(UIMFLibrary.GlobalParamKeyType,System.Int32)">
            <summary>
            Add or update a global parameter
            </summary>
            <param name="paramKeyType">Parameter type</param>
            <param name="value">Parameter value (integer)</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddUpdateGlobalParameter(UIMFLibrary.GlobalParamKeyType,System.Double)">
            <summary>
            Add or update a global parameter
            </summary>
            <param name="paramKeyType">Parameter type</param>
            <param name="value">Parameter value (double)</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddUpdateGlobalParameter(UIMFLibrary.GlobalParamKeyType,System.DateTime)">
            <summary>
            Add or update a global parameter
            </summary>
            <param name="paramKeyType">Parameter type</param>
            <param name="value">Parameter value (date)</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddUpdateGlobalParameter(UIMFLibrary.GlobalParamKeyType,System.String)">
            <summary>
            Add or update a global parameter
            </summary>
            <param name="paramKeyType">Parameter type</param>
            <param name="value">Parameter value (string)</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddVersionInfo(System.String,System.Version)">
            <summary>
            Add version information to the version table
            </summary>
            <param name="softwareName">Name of the data acquisition software</param>
            <param name="softwareVersion">Version of the data acquisition software</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AssureAllFramesHaveFrameParam(UIMFLibrary.FrameParamKeyType,System.String)">
            <summary>
            Makes sure that all entries in the Frame_Params table have the given frame parameter defined
            </summary>
            <param name="paramKeyType"></param>
            <param name="paramValue"></param>
            <returns>The number of rows added (i.e. the number of frames that did not have the parameter)</returns>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AssureAllFramesHaveFrameParam(System.Data.IDbCommand,UIMFLibrary.FrameParamKeyType,System.String,System.Int32,System.Int32)">
            <summary>
            Makes sure that all entries in the Frame_Params table have the given frame parameter defined
            </summary>
            <param name="dbCommand"></param>
            <param name="paramKeyType"></param>
            <param name="paramValue"></param>
            <param name="frameNumStart">Optional: Starting frame number; ignored if frameNumEnd is 0 or negative</param>
            <param name="frameNumEnd">Optional: Ending frame number; ignored if frameNumEnd is 0 or negative</param>
            <returns>The number of rows added (i.e. the number of frames that did not have the parameter)</returns>
        </member>
        <member name="M:UIMFLibrary.DataWriter.CheckExceptionForIntermittentError(System.Exception,System.String)">
            <summary>
            This function prints out a message to the console if we get a "disk image is malformed" exception
            </summary>
            <param name="ex"></param>
            <param name="callingFunction"></param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.CreateBinCentricTables">
            <summary>
            This function will create tables that are bin centric (as opposed to scan centric) to allow querying of the data in 2 different ways.
            Bin centric data is important for data access speed in informed workflows.
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.CreateBinCentricTables(System.String)">
            <summary>
            This function will create tables that are bin centric (as opposed to scan centric) to allow querying of the data in 2 different ways.
            Bin centric data is important for data access speed in informed quantitation workflows.
            </summary>
            <param name="workingDirectory">
            Path to the working directory in which a temporary SqLite database file should be created
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.RemoveBinCentricTables">
            <summary>
            Remove the bin centric table and the related indices. Some UIMF write/update operations
            breaks the bin intensities table. Call this method after these operations to retain
            data integrity.
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.RenumberFrames">
            <summary>
            Renumber frames so that the first frame is frame 1 and to assure that there are no gaps in frame numbers
            </summary>
            <remarks>This method is used by the UIMFDemultiplexer when the first frame to process is not frame 1</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.CreateFrameParamsTables(System.Data.IDbCommand)">
            <summary>
            Create the Frame_Param_Keys and Frame_Params tables
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.CreateGlobalParamsTable(System.Data.IDbCommand)">
            <summary>
            Create the Global_Params table
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.CreateLegacyParameterTables(System.Data.IDbCommand)">
            <summary>
            Create legacy parameter tables (Global_Parameters and Frame_Parameters)
            </summary>
            <param name="dbCommand"></param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.CreateTables(System.String,System.Reflection.Assembly)">
            <summary>
            Create the table structure within a UIMF file
            </summary>
            <param name="dataType">Data type of intensity in the Frame_Scans table: double, float, short, or int </param>
            <param name="entryAssembly">Entry assembly, used when adding a line to the Version_Info table</param>
            <remarks>
            This must be called after opening a new file to create the default tables that are required for IMS data.
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.DeleteAllFrameScans(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Deletes the scans for all frames in the file.  In addition, updates the Scans column to 0 in Frame_Params for all frames.
            </summary>
            <param name="frameType">
            </param>
            <param name="updateScanCountInFrameParams">
            If true, then will update the Scans column to be 0 for the deleted frames
            </param>
            <param name="bShrinkDatabaseAfterDelete">
            </param>
            <remarks>
            As an alternative to using this function, use CloneUIMF() in the DataReader class
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.DeleteFrame(System.Int32,System.Boolean)">
            <summary>
            Deletes the frame from the Frame_Params table and from the Frame_Scans table
            </summary>
            <param name="frameNum">
            </param>
            <param name="updateGlobalParameters">
            If true, then decrements the NumFrames value in the Global_Params table
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.DeleteFrameScans(System.Int32,System.Boolean)">
            <summary>
            Deletes all of the scans for the specified frame
            </summary>
            <param name="frameNum">
            The frame number to delete
            </param>
            <param name="updateScanCountInFrameParams">
            If true, then will update the Scans column to be 0 for the deleted frames
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.DeleteFrames(System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Delete the given frames from the UIMF file.
            </summary>
            <param name="frameNums">
            </param>
            <param name="updateGlobalParameters">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.Dispose(System.Boolean)">
            <summary>
            Dispose of any system resources
            </summary>
            <param name="disposing">
            True when disposing
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.FlushUimf">
            <summary>
            Commits the currently open transaction, then starts a new one
            </summary>
            <remarks>
            Note that a transaction is started when the UIMF file is opened, then committed when the class is disposed
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.FlushUimf(System.Boolean)">
            <summary>
            Commits the currently open transaction, then starts a new one
            </summary>
            <param name="forceFlush">True to force a flush; otherwise, will only flush if the last one was 5 or more seconds ago</param>
            <remarks>
            Note that a transaction is started when the UIMF file is opened, then committed when the class is disposed
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertFrame(UIMFLibrary.FrameParameters)">
            <summary>
            Method to insert details related to each IMS frame
            </summary>
            <param name="frameParameters">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertFrame(System.Int32,UIMFLibrary.FrameParams)">
            <summary>
            Method to insert details related to each IMS frame
            </summary>
            <param name="frameNum">Frame number</param>
            <param name="frameParameters">FrameParams object</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertFrame(System.Int32,System.Collections.Generic.Dictionary{UIMFLibrary.FrameParamKeyType,System.Object})">
            <summary>
            Method to insert details related to each IMS frame
            </summary>
            <param name="frameNum">Frame number</param>
            <param name="frameParameters">Frame parameters dictionary</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertGlobal(UIMFLibrary.GlobalParameters)">
            <summary>
            Method to enter the details of the global parameters for the experiment
            </summary>
            <param name="globalParameters">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertGlobal(UIMFLibrary.GlobalParams)">
            <summary>
            Method to enter the details of the global parameters for the experiment
            </summary>
            <param name="globalParameters">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InitializeFrameParametersRow(UIMFLibrary.FrameParameters)">
            <summary>
            Insert a row into the legacy Frame_Parameters table
            </summary>
            <param name="frameParameters">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InitializeGlobalParametersRow(UIMFLibrary.GlobalParameters)">
            <summary>
            Insert a row into the legacy Global_Parameters table
            </summary>
            <param name="globalParameters">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertScanStoreBytes(UIMFLibrary.FrameParameters,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.Int64,System.Byte[])">
            <summary>
            Write out the compressed intensity data to the UIMF file
            </summary>
            <param name="frameParameters">Legacy frame parameters</param>
            <param name="scanNum">scan number</param>
            <param name="binWidth">Bin width (in ns)</param>
            <param name="indexOfMaxIntensity">index of maximum intensity (for determining the base peak m/z)</param>
            <param name="nonZeroCount">Count of non-zero values</param>
            <param name="bpi">Base peak intensity (intensity of bin indexOfMaxIntensity)</param>
            <param name="tic">Total ion intensity</param>
            <param name="spectra">Mass spectra intensities</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertScanStoreBytes(System.Int32,UIMFLibrary.FrameParams,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Int64,System.Byte[])">
            <summary>
            Write out the compressed intensity data to the UIMF file
            </summary>
            <param name="frameNumber">Frame number</param>
            <param name="frameParameters">FrameParams</param>
            <param name="scanNum">
            Scan number
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="binWidth">Bin width (in ns)</param>
            <param name="indexOfMaxIntensity">index of maximum intensity (for determining the base peak m/z)</param>
            <param name="nonZeroCount">Count of non-zero values</param>
            <param name="bpi">Base peak intensity (intensity of bin indexOfMaxIntensity)</param>
            <param name="tic">Total ion intensity</param>
            <param name="spectra">Mass spectra intensities</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertScan(System.Int32,UIMFLibrary.FrameParams,System.Int32,System.Collections.Generic.IList{System.Int32},System.Double)">
            <summary>Insert a new scan using an array of intensities (as integers) along with binWidth</summary>
            <param name="frameNumber">Frame Number</param>
            <param name="frameParameters">Frame parameters</param>
            <param name="scanNum">
            Scan number
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="binWidth">Bin width (in nanoseconds, used to compute m/z value of the BPI data point)</param>
            <returns>Number of non-zero data points</returns>
            <remarks>The intensities array should contain an intensity for every bin, including all of the zeroes</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertScan(System.Int32,UIMFLibrary.FrameParams,System.Int32,System.Collections.Generic.IList{System.Int32},System.Double,System.Int32@)">
            <summary>Insert a new scan using an array of intensities (as integers) along with binWidth</summary>
            <param name="frameNumber">Frame Number</param>
            <param name="frameParameters">Frame parameters</param>
            <param name="scanNum">
            Scan number
            Traditionally the first scan in a frame has been scan 0, but we switched to start with Scan 1 in 2015.
            </param>
            <param name="intensities">Array of intensities, including all zeros</param>
            <param name="binWidth">Bin width (in nanoseconds, used to compute m/z value of the BPI data point)</param>
            <param name="nonZeroCount">Number of non-zero data points (output)</param>
            <remarks>The intensities array should contain an intensity for every bin, including all of the zeroes</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertScan(System.Int32,UIMFLibrary.FrameParams,System.Int32,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Double,System.Int32)">
            <summary>
            This method takes in a list of intensity information by bin and converts the data to a run length encoded array
            which is later compressed at the byte level for reduced size
            </summary>
            <param name="frameNumber">Frame number</param>
            <param name="frameParameters">FrameParams</param>
            <param name="scanNum">Scan number</param>
            <param name="binToIntensityMap">Keys are bin numbers and values are intensity values; intensity values are assumed to all be non-zero</param>
            <param name="binWidth">Bin width (in ns)</param>
            <param name="timeOffset">Time offset</param>
            <returns>Non-zero data count<see cref="T:System.Int32"/></returns>
            <remarks>Assumes that all data in binToIntensityMap has positive (non-zero) intensities</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertScan(System.Int32,UIMFLibrary.FrameParams,System.Int32,System.Collections.Generic.IList{System.Tuple{System.Int32,System.Int32}},System.Double,System.Int32)">
            <summary>
            This method takes in a list of intensity information by bin and converts the data to a run length encoded array
            which is later compressed at the byte level for reduced size
            </summary>
            <param name="frameNumber">Frame number</param>
            <param name="frameParameters">FrameParams</param>
            <param name="scanNum">Scan number</param>
            <param name="binToIntensityMap">Keys are bin numbers and values are intensity values; intensity values are assumed to all be non-zero</param>
            <param name="binWidth">Bin width (in ns)</param>
            <param name="timeOffset">Time offset</param>
            <returns>Non-zero data count<see cref="T:System.Int32"/></returns>
            <remarks>Assumes that all data in binToIntensityMap has positive (non-zero) intensities</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateAllCalibrationCoefficients(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Update the slope and intercept for all frames
            </summary>
            <param name="slope">
            The slope value for the calibration.
            </param>
            <param name="intercept">
            The intercept for the calibration.
            </param>
            <param name="isAutoCalibrating">
            Optional argument that should be set to true if calibration is automatic. Defaults to false.
            When true, sets CalibrationDone to 1
            </param>
            <param name="manuallyCalibrating">
            Optional argument that should be set to true if manually defining the calibration slope and intercept. Defaults to false.
            When true, sets CalibrationDone to -1
            </param>
            <remarks>This function is called by the AutoCalibrateUIMF DLL</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateAllCalibrationCoefficients(System.Data.SQLite.SQLiteConnection,System.Double,System.Double,System.Boolean)">
            <summary>
            Update the slope and intercept for all frames
            </summary>
            <param name="dBConnection"></param>
            <param name="slope">
            The slope value for the calibration.
            </param>
            <param name="intercept">
            The intercept for the calibration.
            </param>
            <param name="isAutoCalibrating">
            Optional argument that should be set to true if calibration is automatic. Defaults to false.
            </param>
            <remarks>This function is called by the AutoCalibrateUIMF DLL</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateCalibrationCoefficients(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Update the slope and intercept for the given frame
            </summary>
            <param name="frameNumber">
            The frame number to update.
            </param>
            <param name="slope">
            The slope value for the calibration.
            </param>
            <param name="intercept">
            The intercept for the calibration.
            </param>
            <param name="isAutoCalibrating">
            Optional argument that should be set to true if calibration is automatic. Defaults to false.
            </param>
            <remarks>This function is called by the AutoCalibrateUIMF DLL</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateCalibrationCoefficients(System.Data.SQLite.SQLiteConnection,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Update the slope and intercept for the given frame
            </summary>
            <param name="dBConnection"></param>
            <param name="frameNumber">
            The frame number to update.
            </param>
            <param name="slope">
            The slope value for the calibration.
            </param>
            <param name="intercept">
            The intercept for the calibration.
            </param>
            <param name="isAutoCalibrating">
            Optional argument that should be set to true if calibration is automatic. Defaults to false.
            </param>
            <remarks>This function is called by the AutoCalibrateUIMF DLL</remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateFrameParameter(System.Int32,System.String,System.String)">
            <summary>
            Add or update a the value of a given parameter in a frame
            </summary>
            <param name="frameNumber">
            </param>
            <param name="parameterName">
            </param>
            <param name="parameterValue">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateFrameParameters(System.Int32,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
            <param name="frameNumber">
            </param>
            <param name="parameters">
            </param>
            <param name="values">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateFrameScanCount(System.Int32,System.Int32)">
            <summary>
            Updates the scan count for the given frame
            </summary>
            <param name="frameNum">
            The frame number to update
            </param>
            <param name="NumScans">
            The new scan count
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateFrameType(System.Int32,System.Int32)">
            <summary>
            This function updates the frame type to 1, 2, 2, 2, 1, 2, 2, 2, etc. for the specified frame range
            It is used in the NUnit tests
            </summary>
            <param name="startFrameNum">
            The start Frame Num.
            </param>
            <param name="endFrameNum">
            The end Frame Num.
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateGlobalFrameCount">
            <summary>
            Assures that NumFrames in the Global_Params table matches the number of frames in the Frame_Params table
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateGlobalStats">
            <summary>
            Assures that NumFrames in the Global_Params table matches the number of frames in the Frame_Params table
            Also assures that PrescanTOFPulses lists the maximum scan number in any frame
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.WriteFileToTable(System.String,System.Byte[])">
            <summary>
            </summary>
            <param name="tableName">
            </param>
            <param name="fileBytesAsBuffer">
            </param>
            <returns>
            Always returns true<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddFrameParameter(System.String,System.String)">
            <summary>
            Add a column to the legacy Frame_Parameters table
            </summary>
            <param name="parameterName">
            </param>
            <param name="parameterType">
            </param>
            <remarks>
            The new column will have Null values for all existing rows
            </remarks>
        </member>
        <member name="M:UIMFLibrary.DataWriter.AddFrameParameter(System.String,System.String,System.Int32)">
            <summary>
            Add a column to the legacy Frame_Parameters table
            </summary>
            <param name="parameterName">
            Parameter name (aka column name in the database)
            </param>
            <param name="parameterType">
            Parameter type
            </param>
            <param name="defaultValue">
            Value to assign to all rows
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.GetCreateTableSql(System.String,System.Collections.Generic.IList{System.Tuple{System.String,System.String,System.String}})">
            <summary>
            Creates the table creation DDL using the table name and field info
            </summary>
            <param name="tableName">
            Table name
            </param>
            <param name="lstFields">
            List of Tuples where Item1 is FieldName, Item2 is Sql data type, and Item3 is .NET data type
            </param>
            <returns></returns>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertLegacyFrameParams(System.Int32,UIMFLibrary.FrameParams)">
            <summary>
            Add entries to the legacy Frame_Parameters table
            </summary>
            <param name="frameNum"></param>
            <param name="frameParameters"></param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertLegacyFrameParams(System.Int32,System.Collections.Generic.Dictionary{UIMFLibrary.FrameParamKeyType,System.Object})">
            <summary>
            Add entries to the legacy Frame_Parameters table
            </summary>
            <param name="frameNum"></param>
            <param name="frameParamsByType"></param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertLegacyGlobalParameter(System.Data.IDbCommand,UIMFLibrary.GlobalParamKeyType,System.String)">
            <summary>
            Add a parameter to the legacy Global_Parameters table
            </summary>
            <param name="dbCommand"></param>
            <param name="paramKey"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.InsertScanAddParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int64,System.Collections.IEnumerable)">
            <summary>
            </summary>
            <param name="frameNumber">
            </param>
            <param name="scanNum">
            </param>
            <param name="nonZeroCount">
            </param>
            <param name="bpi">
            </param>
            <param name="bpiMz">
            </param>
            <param name="tic">
            </param>
            <param name="spectraRecord">
            </param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PrepareInsertFrameParamKey">
            <summary>
            Create command for inserting frames
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PrepareInsertFrameParamValue">
            <summary>
            Create command for inserting frame parameters
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PrepareUpdateFrameParamValue">
            <summary>
            Create command for updating frame parameters
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PrepareInsertLegacyFrameParamValue">
            <summary>
            Create command for inserting legacy frame parameters
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PrepareInsertGlobalParamValue">
            <summary>
            Create command for inserting global parameters
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PrepareUpdateGlobalParamValue">
            <summary>
            Create command for updating global parameters
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.PrepareInsertScan">
            <summary>
            Create command for inserting scans
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.TransactionBegin">
            <summary>
            Begin a transaction
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.TransactionCommit">
            <summary>
            Commit a transaction
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.UpdateLegacyFrameParameter(System.Int32,UIMFLibrary.FrameParamKeyType,System.String,System.Data.IDbCommand)">
            <summary>
            Update a parameter in the legacy Frame_Parameters table
            </summary>
            <param name="frameNum">Frame number to update</param>
            <param name="paramKeyType">Key type</param>
            <param name="paramValue">Value</param>
            <param name="dbCommand">database command object</param>
        </member>
        <member name="M:UIMFLibrary.DataWriter.ValidateFrameParameterKey(UIMFLibrary.FrameParamKeyType)">
            <summary>
            Assures that the Frame_Params_Keys table contains an entry for paramKeyType
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.ValidateFrameParameterKeys(System.Collections.Generic.List{UIMFLibrary.FrameParamKeyType})">
            <summary>
            Assures that the Frame_Params_Keys table contains each of the keys in paramKeys
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.ValidateLegacyDecodedColumnExists">
            <summary>
            Assures column Decoded exists in the legacy Frame_Parameters table
            </summary>
        </member>
        <member name="M:UIMFLibrary.DataWriter.ValidateLegacyHPFColumnsExist">
            <summary>
            Assures that several columns exist in the legacy Frame_Parameters table
            </summary>
            <remarks>
            This method is used when writing data to legacy tables
            in a UIMF file that was cloned from an old file format
            </remarks>
        </member>
        <member name="T:UIMFLibrary.PressureUnits">
            <summary>
            Units of Pressure
            </summary>
        </member>
        <member name="F:UIMFLibrary.PressureUnits.Torr">
            <summary>
            Torr
            </summary>
        </member>
        <member name="F:UIMFLibrary.PressureUnits.MilliTorr">
            <summary>
            MilliTorr
            </summary>
        </member>
        <member name="T:UIMFLibrary.TemperatureUnits">
            <summary>
            Units of Temperature
            </summary>
            <remarks>FrameParams AmbientTemperature and DriftTubeTemperature are assumed to be in Celsius</remarks>
        </member>
        <member name="F:UIMFLibrary.TemperatureUnits.Celsius">
            <summary>
            Celsius
            </summary>
        </member>
        <member name="F:UIMFLibrary.TemperatureUnits.Kelvin">
            <summary>
            Kelvin
            </summary>
        </member>
        <member name="T:UIMFLibrary.VersionInfo">
            <summary>
            Information about the UIMF file - format and creating software
            </summary>
        </member>
        <member name="P:UIMFLibrary.VersionInfo.VersionId">
            <summary>
            Version row id
            </summary>
        </member>
        <member name="P:UIMFLibrary.VersionInfo.UimfVersion">
            <summary>
            UIMF file schema version
            </summary>
        </member>
        <member name="P:UIMFLibrary.VersionInfo.SoftwareName">
            <summary>
            Creating software name
            </summary>
        </member>
        <member name="P:UIMFLibrary.VersionInfo.SoftwareVersion">
            <summary>
            Creating software version
            </summary>
        </member>
        <member name="P:UIMFLibrary.VersionInfo.DateEntered">
            <summary>
            Date the row was entered
            </summary>
        </member>
        <member name="M:UIMFLibrary.VersionInfo.ToString">
            <summary>
            Report the UimfVersion
            </summary>
            <returns></returns>
        </member>
        <member name="T:CLZF2">
            <summary>
            Improved C# LZF Compressor, a very small data compression library. The compression algorithm is extremely fast.
            </summary>
        </member>
        <member name="F:CLZF2.BUFFER_SIZE_ESTIMATE">
            <summary>
            Multiple of input size used to estimate work/output buffer size.
            Larger values increase initial memory usage but potentially reduces number of allocations.
            </summary>
        </member>
        <member name="F:CLZF2.HLOG">
            <summary>
            Size of hashtable is 2^HLOG bytes. 
            Decompression is independent of the hash table size.
            The difference between 15 and 14 is very small
            for small blocks (and 14 is usually a bit faster).
            For a low-memory/faster configuration, use HLOG == 13;
            For best compression, use 15 or 16 (or more, up to 22).
            </summary>
        </member>
        <member name="F:CLZF2.HashTable">
            <summary>
            Hashtable, that can be allocated only once.
            </summary>
        </member>
        <member name="F:CLZF2.locker">
            <summary>
            Lock object for access to hashtable so that we can keep things thread safe.
            Still up to the caller to make sure any shared outputBuffer use is thread safe.
            </summary>
        </member>
        <member name="M:CLZF2.Compress(System.Byte[])">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <returns>Compressed bytes.</returns>
        </member>
        <member name="M:CLZF2.Compress(System.Byte[],System.Int32)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="inputLength">Length of data in inputBytes to decompress.</param>
            <returns>Compressed bytes.</returns>
        </member>
        <member name="M:CLZF2.Compress(System.Byte[],System.Byte[]@)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:CLZF2.Compress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Compress input bytes.
            </summary>
            <param name="inputBytes">Bytes to compress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <param name="inputLength">Length of data in inputBytes.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:CLZF2.Decompress(System.Byte[])">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <returns>Decompressed bytes.</returns>
        </member>
        <member name="M:CLZF2.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="inputLength">Length of data in inputBytes to decompress.</param>
            <returns>Decompressed bytes.</returns>
        </member>
        <member name="M:CLZF2.Decompress(System.Byte[],System.Byte[]@)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:CLZF2.Decompress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Decompress input bytes.
            </summary>
            <param name="inputBytes">Bytes to decompress.</param>
            <param name="outputBuffer">Output/work buffer. Upon completion, will contain the output.</param>
            <param name="inputLength">Length of data in inputBytes.</param>
            <returns>Length of output.</returns>
        </member>
        <member name="M:CLZF2.lzf_compress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Compresses the data using LibLZF algorithm.
            </summary>
            <param name="input">Reference to the data to compress.</param>
            <param name="output">Reference to a buffer which will contain the compressed data.</param>
            <param name="inputLength">Length of input bytes to process.</param>
            <returns>The size of the compressed archive in the output buffer.</returns>
        </member>
        <member name="M:CLZF2.lzf_decompress(System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Decompresses the data using LibLZF algorithm.
            </summary>
            <param name="input">Reference to the data to decompress.</param>
            <param name="output">Reference to a buffer which will contain the decompressed data.</param>
            <param name="inputLength">Length of input bytes to process.</param>
            <returns>The size of the decompressed archive in the output buffer.</returns>
        </member>
    </members>
</doc>
