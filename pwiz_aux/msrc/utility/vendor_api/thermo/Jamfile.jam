#
# $Id$
#
#
# Original author: Darren Kessner <darren@proteowizard.org>
#
# Copyright 2008 Spielberg Family Center for Applied Proteomics
#   Cedars-Sinai Medical Center, Los Angeles, California  90048
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import modules ;
import path ;
import regex ;

path-constant API_PATH : . ;


if [ modules.peek : NT ]
{

local rule read_version ( file ) 
{
    local nativePath = [ path.native $(file) ] ;
    MATCH "FileVersion:     ([0-9\\.]+)" : [ SHELL "ShowVer.exe \"$(nativePath)\"" ] ;
}

if ! --i-agree-to-the-vendor-licenses in [ modules.peek : ARGV ]
{
    # ignore vendor DLLs even if they're available
    local destination = [ path.native $(API_PATH) ] ;
    SHELL "mkdir \"$(destination)\\$(PLATFORM)\" >nul 2>&1" ;
    SHELL "copy /Y \"$(API_PATH)\\MSFileReader.XRawfile2.SxS.manifest.dummy\" \"$(API_PATH)\\$(PLATFORM)\\MSFileReader.XRawfile2.SxS.manifest\"" ;
    RESCAN ;
}
else if "x86" in $(PLATFORM)
{
    if [ path.exists $(API_PATH)\\$(PLATFORM)\\MSFileReader.XRawfile2.dll ] && [ path.exists $(API_PATH)\\$(PLATFORM)\\MSFileReader.XRawfile2.SxS.manifest ]
    {
        .hasDLLs = true ;
    }

    if ! $(.hasDLLs) && [ path.exists $(MSFILEREADER_INSTALL_DIR)\\XRawfile2$(MSFILEREADER_SUFFIX).dll ]
    {
        .hasDLLs = true ;
        local destination = [ path.native $(API_PATH) ] ;
        SHELL "mkdir \"$(destination)\\$(PLATFORM)\" >nul 2>&1" ;

        local version = [ read_version "$(MSFILEREADER_INSTALL_DIR)\\XRawfile2$(MSFILEREADER_SUFFIX).dll" ] ;
        local manifestLines = [ SHELL "type \"$(API_PATH)\\MSFileReader.XRawfile2$(MSFILEREADER_SUFFIX).SxS.manifest.real\"" ] ;
        manifestLines = [ regex.replace-list $(manifestLines) : "{VERSION}" : $(version) ] ;
        
        local outfile = $(API_PATH)/$(PLATFORM)/MSFileReader.XRawfile2.SxS.manifest ;
        local fileContent = $(manifestLines:J="\r\n") ;

        echo "Copying MSFileReader manifest version $(version) to \"$(API_PATH)\\$(PLATFORM)\\MSFileReader.XRawfile2.SxS.manifest\"" ;
        # Write new manifest file to outfile using Generated File Expansion syntax @(file:E=filecontent)
        outfile = @($(outfile):E=$(fileContent)) ;

        # HACK: MSFileReader DLLs have embedded manifests referencing an old version of the VC9 CRT (21022),
        # and the side-by-side loader is apparently incapable of redirecting to the newer VC9 DLLs we bundle (37029.6161)
        echo "Copying MSFileReader DLLs from \"$(MSFILEREADER_INSTALL_DIR)\" to \"$(destination)\\$(PLATFORM)\" and updating embedded manifests." ;
        echo [ SHELL "copy \"$(MSFILEREADER_INSTALL_DIR)\\XRawfile2$(MSFILEREADER_SUFFIX).dll\" \"$(destination)\\$(PLATFORM)\\MSFileReader.XRawfile2.dll\" & $(MSVC_CURRENT_SETUP_SCRIPT) & mt.exe -nologo -manifest $(API_PATH)\\$(PLATFORM)\\MSFileReader.XRawfile2.SxS.manifest -outputresource:$(destination)\\$(PLATFORM)\\MSFileReader.XRawfile2.dll;#2" ] ;
        echo [ SHELL "copy \"$(MSFILEREADER_INSTALL_DIR)\\fileio$(MSFILEREADER_SUFFIX).dll\" \"$(destination)\\$(PLATFORM)\"" ] ;
        echo [ SHELL "copy \"$(MSFILEREADER_INSTALL_DIR)\\fregistry$(MSFILEREADER_SUFFIX).dll\" \"$(destination)\\$(PLATFORM)\"" ] ;
        RESCAN ;
    }
}
else
{
    if [ path.exists $(API_PATH)\\ThermoFisher.CommonCore.Data.dll ]
    {
        .hasDLLs = true ;
    }
}

rule vendor-api-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) && $(.hasDLLs)
    {
        result += <source>RawFile.cpp ;
        if ! <address-model>64 in $(properties)
        {
            result += <source>RawFileValues.cpp ;
            result += <source>ScanFilter.cpp ;
        }
    }
    return $(result) [ vendor-api-usage-requirements $(properties) ] ;
}

#lib shlwapi : : <name>shlwapi ; # for PathIsNetworkPath

rule vendor-api-usage-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties)
    {
        if $(.hasDLLs)
        {
            result += <define>PWIZ_READER_THERMO ;
            if ! <address-model>64 in $(properties)
            {
                result += <manifest-dependency>$(API_PATH)/$(PLATFORM)/MSFileReader.XRawfile2.dll ;
                result += <assembly-dependency>$(API_PATH)/$(PLATFORM)/MSFileReader.XRawfile2.dll ;
                result += <assembly-dependency>$(API_PATH)/$(PLATFORM)/MSFileReader.XRawfile2.SxS.manifest ;
                result += <assembly-dependency>$(API_PATH)/$(PLATFORM)/fregistry$(MSFILEREADER_SUFFIX).dll ;
                result += <assembly-dependency>$(API_PATH)/$(PLATFORM)/fileio$(MSFILEREADER_SUFFIX).dll ;
                result += <assembly-dependency>$(API_PATH)/EULA.MSFileReader ;
                result += <library>/ext/boost//regex ;
                #result += <library>shlwapi ;
            }
            else
            {
                result += <assembly>$(API_PATH)/ThermoFisher.CommonCore.Data.dll ;
                result += <assembly>$(API_PATH)/ThermoFisher.CommonCore.RawFileReader.dll ;
                #result += <assembly>$(API_PATH)/ThermoFisher.CommonCore.MassPrecisionEstimator.dll ;
                #result += <assembly>$(API_PATH)/ThermoFisher.CommonCore.BackgroundSubtraction.dll ;
                result += <assembly-dependency>$(API_PATH)/EULA.RawFileReader ;
                result += <cxxflags>/wd4564 ; # warning C4564: method 'x' defines unsupported default parameter 'y'
            }
        }
    }
    return $(result) ;
}

lib pwiz_vendor_api_thermo
    : # sources
    : # requirements
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
        <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc
        <conditional>@vendor-api-requirements
        <conditional>@msvc-requirement
        <toolset>msvc:<using-clr>true # requires hacked msvc.jam
        <link>static # <using-clr>true and <link>shared don't mix
    : # default-build
    : # usage-requirements
        <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc
        <conditional>@vendor-api-usage-requirements
    ;
    
if $(.hasDLLs)
{
    unit-test-if-exists ScanFilterTest
        : ScanFilterTest.cpp
          pwiz_vendor_api_thermo
        : <conditional>@msvc-requirement
        ;
}

# a test utility, not a unit test
exe RawFileTest
    : RawFileTest.cpp
      pwiz_vendor_api_thermo
    ;

explicit RawFileTest ;


if $(.hasDLLs)
{
    if x86 in $(PLATFORM)
    {
        install install_pwiz_vendor_api_thermo
           : $(API_PATH)/$(PLATFORM)/MSFileReader.XRawfile2.dll
             $(API_PATH)/$(PLATFORM)/fregistry$(MSFILEREADER_SUFFIX).dll
             $(API_PATH)/$(PLATFORM)/fileio$(MSFILEREADER_SUFFIX).dll
             $(API_PATH)/$(PLATFORM)/MSFileReader.XRawfile2.SxS.manifest
             $(API_PATH)/EULA.MSFileReader
           ;
    }
    else
    {
        install install_pwiz_vendor_api_thermo
           : $(API_PATH)/ThermoFisher.CommonCore.Data.dll
             $(API_PATH)/ThermoFisher.CommonCore.RawFileReader.dll
             #$(API_PATH)/ThermoFisher.CommonCore.MassPrecisionEstimator.dll
             #$(API_PATH)/ThermoFisher.CommonCore.BackgroundSubtraction.dll
             $(API_PATH)/EULA.RawFileReader
           ;
    }
}
else
{
install install_pwiz_vendor_api_thermo ;
}

explicit install_pwiz_vendor_api_thermo ;

if x64 in $(PLATFORM)
{
    install install_pwiz_vendor_api_thermo_eula
       : $(API_PATH)/EULA.RawFileReader
       ;
}
else
{
    install install_pwiz_vendor_api_thermo_eula
       : $(API_PATH)/EULA.MSFileReader
       ;
}

explicit install_pwiz_vendor_api_thermo_eula ;

}
