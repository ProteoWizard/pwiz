#
# $Id: Jamfile.jam 10095 2016-10-12 22:01:58Z chambm $
#
#
# Original author: Matt Chambers <matt.chambers42 .@. gmail.com>
#
# Copyright 2017 University of Washington - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 


import modules ;
import path ;


path-constant API_PATH : . ;

if [ modules.peek : NT ]
{

rule vendor-api-requirements ( properties * )
{
    local result ;
    local dll_location = [ unifi-dll-location $(API_PATH) : $(properties) ] ;
    if <toolset>msvc in $(properties) &&
       $(dll_location)
    {
        # HACK: <link>shared isn't being passed in properties like I'd expect, so I also check the command-line
        if <link>shared in $(properties) || "link=shared" in [ modules.peek : ARGV ]
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc/<link>shared ;
        }
        else
        {
            result += <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc ;
        }
        result += <assembly>$(dll_location)/unifi-protobuf-net.dll ;
        result += <assembly>$(PWIZ_ROOT_PATH)/pwiz_tools/Shared/Lib/Newtonsoft.Json.dll ;
        result += <assembly>$(PWIZ_ROOT_PATH)/pwiz_tools/Shared/Lib/IdentityModel.dll ;
        result += <assembly>$(dll_location)/System.Runtime.Caching.Generic.dll ;
        result += <assembly>$(dll_location)/ParallelExtensionsExtras.dll ;
        result += <include>$(dll_location) ;
        result += <define>PWIZ_READER_UNIFI ;
    }
    else
    {
        result += <build>no ;
    }
    return $(result) ;
}

lib pwiz_vendor_api_unifi
    : # sources
        UnifiData.cpp
    : # requirements

        # - when boost::thread is link=static, the exe header is tweaked to call
        #   thread-local storage initialization routines (before main())
        # - when a /clr object is link=static, the exe header is similarly tweaked
        #   to initialize the CLR
        # - these two tweaks are incompatible: either boost::thread must be link=shared,
        #   or the CLR object must be
        # HACK: not needed when using hacked tss_pe.cpp
        #<link>shared

        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
        <conditional>@vendor-api-requirements
        <toolset>msvc:<using-clr>true # requires hacked msvc.jam
        <link>static # <using-clr>true and <link>shared don't mix
    : # default-build
    : # usage-requirements
        <conditional>@vendor-api-requirements
    ;


# a test utility, not a unit test
exe UnifiDataTest
    : UnifiDataTest.cpp
      pwiz_vendor_api_unifi
    ;

explicit UnifiDataTest ;

rule install-requirements ( properties * )
{
    local result ;
    local dll_location = [ unifi-dll-location $(API_PATH) : $(properties) ] ;
    if $(dll_location)
    {
        result += <source>$(dll_location)/unifi-protobuf-net.dll ;
        result += <source>$(PWIZ_ROOT_PATH)/pwiz_tools/Shared/Lib/Newtonsoft.Json.dll ;
        result += <source>$(PWIZ_ROOT_PATH)/pwiz_tools/Shared/Lib/IdentityModel.dll ;
        result += <source>$(dll_location)/System.Runtime.Caching.Generic.dll ;
        result += <source>$(dll_location)/ParallelExtensionsExtras.dll ;
    }
    return $(result) ;
}

install install_pwiz_vendor_api_unifi
    : : <conditional>@install-requirements
    ;
explicit install_pwiz_vendor_api_unifi ;
}
