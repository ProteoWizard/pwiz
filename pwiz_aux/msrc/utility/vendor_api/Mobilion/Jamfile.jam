#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2021 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 


import modules ;
import path ;


path-constant API_PATH : $(PWIZ_ROOT_PATH)/pwiz_aux/msrc/utility/vendor_api/Mobilion ;

if [ modules.peek : NT ]
{

.dll-location = [ mbi-dll-location $(API_PATH) ] ;
if $(.dll-location)
{
    .hasDLLs = true ;
}

constant dll-files :
    hdf5.dll
    hdf5_cpp.dll
    MBICore.dll
    python37.dll
    ;

searched-lib MBICore
    : # sources
    : # requirements
        <link>shared:<define>PWIZ_DYN_LINK
        <name>MBICore
        <address-model>64
        <search>$(.dll-location)
    : # default-build
    : # usage-requirements
        <include>$(.dll-location)
    ;

rule vendor-api-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) && $(.hasDLLs) && ! [ without-binary-msdata ]
    {
        #result += <source>UIMFReader.cpp ;
    }
    return $(result) [ vendor-api-usage-requirements $(properties) ] ;
}

rule vendor-api-usage-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) && $(.hasDLLs) && ! [ without-binary-msdata ]
    {
        for local file in $(dll-files)
        {
            result += <assembly-dependency>$(.dll-location)/$(file) ;
        }
        result += <include>$(.dll_location) ;
        result += <include>$(PWIZ_LIBRARIES_PATH)/hdf5-1.12.0/c++/src ;
        result += <include>$(PWIZ_LIBRARIES_PATH)/hdf5-1.12.0/src ;
        result += <library>MBICore ;
    }
    return $(result) ;
}

lib pwiz_vendor_api_mbi
    : # sources
    : # requirements      
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
        <conditional>@vendor-api-requirements
        <address-model>32:<build>no
    : # default-build
    : # usage-requirements
        <conditional>@vendor-api-usage-requirements
    ;

rule install-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) && $(.hasDLLs) && ! [ without-binary-msdata ]
    {
        for local file in $(dll-files)
        {
            result += <source>$(.dll-location)/$(file) ;
        }
    }
    return $(result) ;
}

install install_pwiz_vendor_api_mbi
    : : <conditional>@install-requirements
    ;

explicit install_pwiz_vendor_api_mbi ;

}
