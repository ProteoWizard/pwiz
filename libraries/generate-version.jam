#
# $Id$
#

import svnrev ;
import sequence ;
import common ;
import path ;
import string ;
import os ;
import numbers ;
import modules ;

if [ os.name ] = NT
{
    rule mkdir ( dir )
    {
        SHELL "if not exist \"$(dir)\\\" mkdir \"$(dir)\"" ;
    }
}
else
{
    rule mkdir ( dir )
    {
       SHELL "mkdir -p \"$(dir)\"" ;
    }
}


# rule for generating a Version.cpp file
rule cpp ( filepath ? : namespaces * : major : minor : timestamp : last-commit-hash : branch )
{
if ! --incremental in [ modules.peek : ARGV ] || --force-generate-version in [ modules.peek : ARGV ]
{
    # default filepath is "Version.cpp" in the current directory
    filepath ?= Version.cpp ;
    filepath = [ path.native $(filepath) ] ;
    local namespace-header = "" ;
    local namespace-footer = "" ;
    if $(namespaces)
    {
        for local namespace in $(namespaces)
        {
            namespace-header += "namespace $(namespace) {\n" ;
            namespace-footer += "\n} // namespace $(namespace)" ;
        }

        namespace-header = [ string.join $(namespace-header) ] ;
        namespace-footer = [ string.join [ sequence.reverse $(namespace-footer) ] ] ;
    }

    if [ path.exists $(filepath) ]
    {
        local rm = [ common.rm-command ] ;
        rm = $(rm:J=" ") ;
        SHELL "$(rm) $(filepath)" ;
    }

    local date = [ MATCH "([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])" : [ modules.peek : JAMDATE ] ] ;

    local header-text =
"// This file was automatically generated.
// You should not modify it manually, as it may be re-generated.
//
// Licensed under the Apache License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions and 
// limitations under the License.
//


\#include \"$(filepath:D=:S=.hpp)\"
\#include <sstream>

\#ifdef PWIZ_USER_VERSION_INFO_H // in case you need to add any info version of your own
\#include PWIZ_USER_VERSION_INFO_H  // must define PWIZ_USER_VERSION_INFO_H_STR for use below
\#endif

$(namespace-header)

int Version::Major()                {return $(major);}
int Version::Minor()                {return $(minor);}
int Version::Revision()             {return $(timestamp);}
std::string Version::LastModified()   {return \"$(last-commit-hash)\";}
std::string Version::Branch()   {return \"$(branch)\";}
std::string Version::str()
{
	std::ostringstream v;
	v << Major() << '.' << Minor() << '.' << Revision();
\#ifdef PWIZ_USER_VERSION_INFO_H
	v << \" (\" << PWIZ_USER_VERSION_INFO_H_STR << \")\";
\#endif
	return v.str();
}

$(namespace-footer)
" ;

    header-text = @($(filepath):E=$(header-text)) ;
    echo Generated $(filepath) ;
    RESCAN ;
    return $(major) $(minor) $(timestamp) $(last-commit-hash) ;
}
}


# rule for generating a C++/CLI or C# AssemblyInfo file
rule generate-AssemblyInfo ( filepath ? : cpp-cli ? : major : minor : timestamp : last-commit-hash : AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
if ! --incremental in [ modules.peek : ARGV ] || --force-generate-version in [ modules.peek : ARGV ]
{
    local extension = "cs" ;
    local using-namespace = "using" ;
    local namespace-delimiter = "." ;
    local attribute-suffix = "" ;
    local attribute-line-terminator = "" ;
    if $(cpp-cli)
    {
        extension = "cpp" ;
        using-namespace = "using namespace" ;
        namespace-delimiter = "::" ;
        attribute-suffix = "Attribute" ;
        attribute-line-terminator = ";" ;
    }

    # default filepath is "Properties/AssemblyInfo" in the current directory
    filepath ?= Properties/AssemblyInfo.$(extension) ;
    filepath = [ path.native $(filepath) ] ;

    if [ path.exists $(filepath) ]
    {
        local rm = [ common.rm-command ] ;
        rm = $(rm:J=" ") ;
        SHELL "$(rm) \"$(filepath)\"" ;
    }
    else # make sure directory exists
        mkdir $(filepath:P) ;

    local year = [ MATCH "([0-9][0-9][0-9][0-9])" : [ modules.peek : JAMDATE ] ] ;
    local AssemblyCopyright = "Copyright © $(AssemblyCompany) $(year)" ;

    if --automated in [ modules.peek : ARGV ]
    {
        last-commit-hash = "$(last-commit-hash) (automated build)" ;
    }
    else if ! --official in [ modules.peek : ARGV ]
    {
        last-commit-hash = "$(last-commit-hash) (developer build)" ;
    }

    local header-text =
"$(using-namespace) System$(namespace-delimiter)Reflection;
$(using-namespace) System$(namespace-delimiter)Runtime$(namespace-delimiter)InteropServices;

[assembly: AssemblyTitle$(attribute-suffix)(\"$(AssemblyTitle)\")]$(attribute-line-terminator)
[assembly: AssemblyDescription$(attribute-suffix)(\"$(AssemblyDescription)\")]$(attribute-line-terminator)
[assembly: AssemblyCompany$(attribute-suffix)(\"$(AssemblyCompany)\")]$(attribute-line-terminator)
[assembly: AssemblyProduct$(attribute-suffix)(\"$(AssemblyProduct)\")]$(attribute-line-terminator)
[assembly: AssemblyCopyright$(attribute-suffix)(\"$(AssemblyCopyright)\")]$(attribute-line-terminator)
[assembly: AssemblyVersion$(attribute-suffix)(\"$(major).$(minor).$(timestamp)\")]$(attribute-line-terminator)
[assembly: AssemblyFileVersion$(attribute-suffix)(\"$(major).$(minor).$(timestamp)\")]$(attribute-line-terminator)
[assembly: AssemblyInformationalVersion$(attribute-suffix)(\"$(major).$(minor).$(timestamp)-$(last-commit-hash)\")]$(attribute-line-terminator)
[assembly: ComVisible$(attribute-suffix)(false)]$(attribute-line-terminator)
" ;

    # $(using-namespace) System$(namespace-delimiter)Runtime$(namespace-delimiter)CompilerServices;
    # [assembly: System.Runtime.CompilerServices.InternalsVisibleTo$(attribute-suffix)(\"Tests\")]$(attribute-line-terminator)

    header-text = @($(filepath):E=$(header-text)) ;
    echo Generated $(filepath) ;
    RESCAN ;
    return $(major) $(minor) $(timestamp) $(last-commit-hash) ;
}
}

# rule for generating a C# AssemblyInfo file
rule AssemblyInfo.cs ( filepath ? : major : minor : timestamp : last-commit-hash : AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    generate-AssemblyInfo $(filepath) : : $(major) : $(minor) : $(timestamp) : $(last-commit-hash) : "$(AssemblyTitle)" "$(AssemblyDescription)" "$(AssemblyCompany)" "$(AssemblyProduct)" ;
}

# rule for generating a C++/CLI AssemblyInfo file
rule AssemblyInfo.cpp ( filepath ? : major : minor : timestamp : last-commit-hash : AssemblyTitle AssemblyDescription AssemblyCompany AssemblyProduct )
{
    generate-AssemblyInfo $(filepath) : cpp-cli : $(major) : $(minor) : $(timestamp) : $(last-commit-hash) : "$(AssemblyTitle)" "$(AssemblyDescription)" "$(AssemblyCompany)" "$(AssemblyProduct)" ;
}

# rule for generating a native rc file with version info and optional icons
rule rc ( filepath ? : major : minor : timestamp : last-commit-hash : Title Description Company Product : Icons * )
{
if ! --incremental in [ modules.peek : ARGV ] || --force-generate-version in [ modules.peek : ARGV ]
{
    # default filepath is "Properties/Resources.rc" in the current directory
    filepath ?= Properties/Resources.rc ;

    if [ path.exists $(filepath) ]
    {
        local rm = [ common.rm-command ] ;
        rm = $(rm:J=" ") ;
        SHELL "$(rm) \"$(filepath)\"" ;
    }

    local year = [ MATCH "([0-9][0-9][0-9][0-9])" : [ modules.peek : JAMDATE ] ] ;
    local copyright = "Copyright © $(Company) $(year)" ;

    local icons-text = "" ;
    local resourceId = 101 ;
    for icon in $(Icons)
    {
        icons-text += "$(resourceId) ICON \"$(icon)\"\n" ;
        resourceId = [ numbers.increment $(resourceId) ] ;
    }
    icons-text = [ string.join $(icons-text) ] ;

    local header-text =
"#include <windows.h>

//1 RT_MANIFEST \"App.manifest\"

$(icons-text)

VS_VERSION_INFO VERSIONINFO
FILEVERSION     $(major),$(minor),$(timestamp),0
PRODUCTVERSION  $(major),$(minor),$(timestamp),0
FILEFLAGSMASK   VS_FFI_FILEFLAGSMASK
FILEFLAGS       0
FILEOS          VOS__WINDOWS32
FILETYPE        VFT_APP
FILESUBTYPE     VFT2_UNKNOWN
BEGIN
    BLOCK \"StringFileInfo\"
    BEGIN
        BLOCK \"040904E4\" // en-US/cp-1252
        BEGIN
            VALUE \"CompanyName\",      \"$(Company)\"
            VALUE \"ProductName\",      \"$(Product)\"
            VALUE \"ProductVersion\",   \"$(major).$(minor).$(timestamp)\"
            VALUE \"FileVersion\",      \"$(major).$(minor).$(timestamp)\"
            VALUE \"FileDescription\",  \"$(Description)\"
            VALUE \"LegalCopyright\",   \"$(copyright)\"
        END
    END
        BLOCK \"VarFileInfo\"
        BEGIN
            VALUE \"Translation\", 0x409, 1252 // en-US in ANSI (cp-1252)
        END
    END
END
" ;

    header-text = @($(filepath):E=$(header-text)) ;
    echo Generated $(filepath) ;
    RESCAN ;
    return $(major) $(minor) $(timestamp) $(last-commit-hash) ;
}
}
