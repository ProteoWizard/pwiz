//
// Original author: Matt Chambers <matt.chambers42 .@. gmail.com>
//
// Copyright 2020 Matt Chambers
//
// Licensed under the Apache License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions and 
// limitations under the License.
//

#define PWIZ_SOURCE

#include "SpectrumList_DiaUmpire.hpp"

using namespace pwiz::msdata;

namespace pwiz {
namespace analysis {

PWIZ_API_DECL SpectrumList_DiaUmpire::SpectrumList_DiaUmpire(const MSData& msd, const SpectrumListPtr& inner, const DiaUmpire::Config& config, const util::IterationListenerRegistry* ilr)
    : msdata::SpectrumListWrapper(inner), diaumpire_(msd, inner, config, ilr)
{
    sl_ = diaumpire_.outputSpectrumList();

    // add processing methods to the copy of the inner SpectrumList's data processing
    ProcessingMethod method;
    method.order = dp_->processingMethods.size();
    method.userParams.emplace_back(UserParam("Pseudo-spectra generated by DIA-Umpire demultiplexing"));

    if (!dp_->processingMethods.empty())
        method.softwarePtr = dp_->processingMethods[0].softwarePtr;

    dp_->processingMethods.emplace_back(method);
}

PWIZ_API_DECL SpectrumList_DiaUmpire::~SpectrumList_DiaUmpire() {}
PWIZ_API_DECL SpectrumPtr SpectrumList_DiaUmpire::spectrum(size_t index, bool getBinaryData) const { return sl_->spectrum(index, getBinaryData); }
PWIZ_API_DECL SpectrumPtr SpectrumList_DiaUmpire::spectrum(size_t index, DetailLevel detailLevel) const { return sl_->spectrum(index, detailLevel); }
PWIZ_API_DECL size_t SpectrumList_DiaUmpire::size() const { return sl_->size(); }
PWIZ_API_DECL const msdata::SpectrumIdentity& SpectrumList_DiaUmpire::spectrumIdentity(size_t index) const { return sl_->spectrumIdentity(index); }

} // namespace analysis
} // namespace pwiz
