#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2009 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import modules ;

if [ modules.peek : NT ] {

project
    : requirements
        <toolset>msvc:<using-clr>true # requires hacked msvc.jam
        <conditional>@msvc-requirement
        <define>UNICODE
        <define>_UNICODE
    : usage-requirements
        <define>UNICODE
        <define>_UNICODE
    : default-build
        release
    ;


import path ;
path-constant PRMSCHEDULER_CLI_ROOT : . ;
path-constant DOC_PATH : $(PWIZ_BUILD_PATH)/pwiz/utility/bindings/CLI/timstof_prm_scheduler/doc ;
path.makedirs [ path.make $(DOC_PATH) ] ;


obj PrmScheduler       : PrmScheduler.cpp        : $(clr-requirement) <cxxflags>"/doc$(DOC_PATH)/PrmScheduler.xdc" ;


rule prmscheduler-requirements ( properties * )
{
    if <address-model>64 in $(properties)
    {
        return <search>x64 ;
    }
    else
    {
        return <search>x86 ;
    }
}

rule prmscheduler-usage-requirements ( properties * )
{
    if <address-model>64 in $(properties)
    {
        return <assembly-dependency>$(PRMSCHEDULER_CLI_ROOT)/x64/prmscheduler.dll ;
    }
    else
    {
        return <assembly-dependency>$(PRMSCHEDULER_CLI_ROOT)/x86/prmscheduler.dll ;
    }
}

searched-lib prmscheduler : : <conditional>@prmscheduler-requirements : : <conditional>@prmscheduler-usage-requirements ;

lib PrmPasefScheduler
    : # sources
        PrmScheduler
    : # requirements
        <library>prmscheduler
        <link>shared
        <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc/<link>static/<using-clr>false
        <linkflags>"/MACHINE:$(PLATFORM) /FIXED:No"
        <cxxflags>/permissive
        $(clr-requirement)
    : # default-build
    : # usage-requirements
        <library>prmscheduler
        <library>$(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_misc/<link>static/<using-clr>false
    ;
    

# build XDC documentation from source files

rule merge_xdc_data_files ( targets + : sources * : properties * )
{
    local target-path = [ path.make [ on $(targets[1]) return $(LOCATE) ] ] ;
    OUTPUT_PATH on $(targets[1]) = [ path.native [ path.relative-to [ path.make [ path.pwd ] ] $(target-path) ] ] ;
}
    
if ( ! --incremental in [ modules.peek : ARGV ] )
{
    actions merge_xdc_data_files
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        xdcmake.exe /nologo "$(DOC_PATH)/*.xdc" "/out:$(OUTPUT_PATH)\$(<[1]:D=)"
    }
}
else
{
    actions merge_xdc_data_files { }
}

make PrmPasefScheduler.xml
    : # sources
        PrmPasefScheduler
    : # action
        @merge_xdc_data_files
    : # requirements
    ;

rule unit-test-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties)
    {
        result += <using-clr>true <dependency>PrmPasefScheduler <assembly>PrmPasefScheduler ;
    }
    else
    {
        result += <build>no ;
    }
    return $(result) ;
}

unit-test-if-exists PrmSchedulerTest : PrmSchedulerTest.cpp : <conditional>@unit-test-requirements ;

}
