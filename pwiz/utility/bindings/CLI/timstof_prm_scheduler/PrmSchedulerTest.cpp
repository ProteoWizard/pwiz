//
// Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
//
// Copyright 2020 Matt Chambers
//
// Licensed under the Apache License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions and 
// limitations under the License.
//


#include "../common/unit.hpp"
#include "pwiz/utility/misc/cpp_cli_utilities.hpp"
#include "pwiz/utility/misc/Std.hpp"
#include "pwiz/utility/misc/Filesystem.hpp"
#include "prmscheduler.h"

#ifdef __INTELLISENSE__
#include "PrmScheduler.hpp"
#endif


using namespace pwiz::CLI::util;
using namespace System::Collections::Generic;
using System::String;
using System::Console;


ostream* os_ = 0;

struct TestTarget
{
    int id;
    double minRT, maxRT;
    double isolationMz;
    double minInverseK0, maxInverseK0;
    int charge;
    double ce;
};

const TestTarget testTargets[] =
{
    { 1, -53.2000, 146.8000, 784.8662, 1.0216, 1.0497, 2, -1 },
    { 2, -15.4000, 184.6000, 523.7778, 0.8433, 0.8716, 2, -1 },
    { 3, 5.0000, 205.0000, 576.2796, 0.8592, 0.8874, 2, -1 },
    { 4, 10.4000, 210.4000, 569.2863, 0.9010, 0.9292, 2, -1 },
    { 5, 27.8000, 227.8000, 506.2826, 0.8218, 0.8501, 2, -1 },
    { 6, 52.4000, 252.4000, 516.7964, 0.8625, 0.8908, 2, -1 },
    { 7, 324.2000, 524.2000, 624.8007, 0.9304, 0.9586, 2, -1 },
    { 8, 377.6000, 577.6000, 543.7419, 0.8648, 0.8931, 2, -1 },
    { 9, 430.4000, 630.4000, 546.7847, 0.8637, 0.8920, 2, -1 },
    { 10, 440.0000, 640.0000, 562.2582, 0.8399, 0.8682, 3, -1 },
    { 11, 444.2000, 644.2000, 403.7084, 0.7490, 0.7775, 2, -1 },
    { 12, 454.4000, 654.4000, 552.7078, 0.8671, 0.8954, 2, -1 },
    { 13, 470.0000, 670.0000, 507.7625, 0.8229, 0.8512, 2, -1 },
    { 14, 497.0000, 697.0000, 632.8273, 0.9349, 0.9631, 2, -1 },
    { 15, 519.2000, 719.2000, 846.3635, 1.0541, 1.0822, 2, -1 },
    { 16, 532.4000, 732.4000, 497.2509, 0.8422, 0.8705, 2, -1 },
    { 17, 537.8000, 737.8000, 506.2352, 0.8195, 0.8478, 3, -1 },
    { 18, 551.0000, 751.0000, 551.2719, 0.8603, 0.8886, 2, -1 },
    { 19, 566.0000, 766.0000, 424.7079, 0.7570, 0.7854, 2, -1 },
    { 20, 573.2000, 773.2000, 656.2852, 0.9247, 0.9529, 2, -1 },
    { 21, 578.0000, 778.0000, 628.6362, 0.9428, 0.9710, 3, -1 },
    { 22, 599.6000, 799.6000, 446.2139, 0.7991, 0.8274, 2, -1 },
    { 23, 601.4000, 801.4000, 450.9626, 0.7866, 0.8149, 4, -1 },
    { 24, 608.6000, 808.6000, 733.3406, 1.0137, 1.0418, 2, -1 },
    { 25, 616.4000, 816.4000, 630.2897, 0.9033, 0.9315, 2, -1 },
    { 26, 618.2000, 818.2000, 612.8113, 0.9247, 0.9529, 2, -1 },
    { 27, 623.6000, 823.6000, 541.2774, 0.8603, 0.8886, 2, -1 },
    { 28, 626.0000, 826.0000, 918.9001, 1.1213, 1.1493, 2, -1 },
    { 29, 632.6000, 832.6000, 532.7829, 0.9010, 0.9292, 2, -1 },
    { 30, 649.4000, 849.4000, 645.3029, 0.9507, 0.9788, 2, -1 },
    { 31, 658.4000, 858.4000, 595.7817, 0.9462, 0.9743, 2, -1 },
    { 32, 660.8000, 860.8000, 572.3076, 0.7763, 0.8047, 2, -1 },
    { 33, 662.0000, 862.0000, 611.7973, 0.9089, 0.9371, 2, -1 },
    { 34, 681.8000, 881.8000, 568.8375, 0.9360, 0.9642, 2, -1 },
    { 35, 686.0000, 886.0000, 634.3214, 0.9495, 0.9777, 2, -1 },
    { 36, 695.6000, 895.6000, 559.2877, 0.8829, 0.9112, 2, -1 },
    { 37, 698.6000, 898.6000, 523.7668, 0.8852, 0.9134, 2, -1 },
    { 38, 737.6000, 937.6000, 559.7789, 0.7763, 0.8047, 2, -1 },
    { 39, 738.8000, 938.8000, 425.7623, 0.8274, 0.8558, 2, -1 },
    { 40, 746.0000, 946.0000, 511.2840, 0.8444, 0.8727, 2, -1 },
    { 41, 759.2000, 959.2000, 582.8019, 0.9157, 0.9439, 2, -1 },
    { 42, 761.0000, 961.0000, 567.2759, 0.8886, 0.9168, 2, -1 },
    { 43, 776.0000, 976.0000, 436.8953, 0.7422, 0.7706, 3, -1 },
    { 44, 826.4000, 1026.4000, 625.3088, 0.9360, 0.9642, 2, -1 },
    { 45, 840.2000, 1040.2000, 718.3262, 0.9856, 1.0137, 2, -1 },
    { 46, 845.6000, 1045.6000, 844.9134, 1.1336, 1.1616, 2, -1 },
    { 47, 849.8000, 1049.8000, 598.7850, 0.8546, 0.8829, 2, -1 },
    { 48, 850.4000, 1050.4000, 566.7635, 0.8863, 0.9146, 2, -1 },
    { 49, 893.0000, 1093.0000, 510.5775, 0.8286, 0.8569, 3, -1 },
    { 50, 907.4000, 1107.4000, 661.8174, 0.9383, 0.9665, 2, -1 },
    { 51, 932.0000, 1132.0000, 547.2603, 0.8659, 0.8942, 2, -1 },
    { 52, 937.4000, 1137.4000, 497.2480, 0.8331, 0.8614, 2, -1 },
    { 53, 960.2000, 1160.2000, 554.2818, 0.9146, 0.9428, 2, -1 },
    { 54, 971.6000, 1171.6000, 416.5597, 0.7342, 0.7627, 3, -1 },
    { 55, 983.6000, 1183.6000, 585.2758, 0.9078, 0.9360, 2, -1 },
    { 56, 1011.2000, 1211.2000, 597.8005, 0.9134, 0.9417, 2, -1 },
    { 57, 1030.4000, 1230.4000, 709.8488, 0.9586, 0.9867, 2, -1 },
    { 58, 1035.2000, 1235.2000, 812.4302, 1.0339, 1.0620, 2, -1 },
    { 59, 1037.0000, 1237.0000, 540.2689, 0.8976, 0.9259, 2, -1 },
    { 60, 1037.0000, 1237.0000, 552.7919, 0.8739, 0.9021, 2, -1 },
    { 61, 1047.8000, 1247.8000, 702.3322, 0.9484, 0.9766, 2, -1 },
    { 62, 1062.8000, 1262.8000, 508.2897, 0.8433, 0.8716, 2, -1 },
    { 63, 1081.4000, 1281.4000, 504.2500, 0.8773, 0.9055, 2, -1 },
    { 64, 1095.2000, 1295.2000, 608.3073, 0.9067, 0.9349, 2, -1 },
    { 65, 1116.2000, 1316.2000, 558.2849, 0.8807, 0.9089, 2, -1 },
    { 66, 1118.0000, 1318.0000, 663.8350, 0.9292, 0.9574, 2, -1 },
    { 67, 1130.6000, 1330.6000, 411.5495, 0.7559, 0.7843, 3, -1 },
    { 68, 1136.0000, 1336.0000, 665.8304, 0.9811, 1.0092, 2, -1 },
    { 69, 1167.8000, 1367.8000, 784.8865, 1.0227, 1.0508, 2, -1 },
    { 70, 1177.4000, 1377.4000, 563.7825, 0.8897, 0.9180, 2, -1 },
    { 71, 1178.0000, 1378.0000, 601.3045, 0.9202, 0.9484, 2, -1 },
    { 72, 1201.4000, 1401.4000, 689.3143, 0.9462, 0.9743, 2, -1 },
    { 73, 1212.8000, 1412.8000, 664.8245, 0.9619, 0.9901, 2, -1 },
    { 74, 1230.2000, 1430.2000, 602.3242, 0.8908, 0.9191, 2, -1 },
    { 75, 1236.2000, 1436.2000, 522.2866, 0.8614, 0.8897, 2, -1 },
    { 76, 1241.6000, 1441.6000, 626.8223, 0.9439, 0.9721, 2, -1 },
    { 77, 1259.6000, 1459.6000, 583.7274, 0.9134, 0.9417, 2, -1 },
    { 78, 1275.8000, 1475.8000, 608.3088, 0.8365, 0.8648, 3, -1 },
    { 79, 1299.2000, 1499.2000, 876.9327, 1.1515, 1.1794, 2, -1 },
    { 80, 1342.4000, 1542.4000, 690.3640, 0.9619, 0.9901, 2, -1 },
    { 81, 1349.0000, 1549.0000, 533.2799, 0.8773, 0.9055, 2, -1 },
    { 82, 1357.4000, 1557.4000, 867.8643, 1.0990, 1.1269, 2, -1 },
    { 83, 1391.6000, 1591.6000, 861.3508, 1.0721, 1.1001, 2, -1 },
    { 84, 1392.8000, 1592.8000, 505.9179, 0.8535, 0.8818, 3, -1 },
    { 85, 1394.0000, 1594.0000, 569.2892, 0.8965, 0.9247, 2, -1 },
    { 86, 1397.6000, 1597.6000, 499.2657, 0.8478, 0.8761, 3, -1 },
    { 87, 1399.4000, 1599.4000, 660.3359, 0.9743, 1.0025, 2, -1 },
    { 88, 1421.6000, 1621.6000, 464.2482, 0.8320, 0.8603, 2, -1 },
    { 89, 1423.4000, 1623.4000, 580.7875, 0.8999, 0.9281, 2, -1 },
    { 90, 1436.0000, 1636.0000, 587.3204, 0.9112, 0.9394, 2, -1 },
    { 91, 1437.2000, 1637.2000, 723.8474, 0.9878, 1.0160, 2, -1 },
    { 92, 1447.4000, 1647.4000, 893.4597, 1.1538, 1.1816, 2, -1 },
    { 93, 1449.2000, 1649.2000, 760.8802, 1.0463, 1.0743, 2, -1 },
    { 94, 1454.6000, 1654.6000, 758.8840, 1.0799, 1.1079, 2, -1 },
    { 95, 1460.0000, 1660.0000, 566.8092, 0.9304, 0.9586, 2, -1 },
    { 96, 1460.6000, 1660.6000, 601.3046, 0.9495, 0.9777, 2, -1 },
    { 97, 1464.8000, 1664.8000, 704.3431, 1.0137, 1.0418, 2, -1 },
    { 98, 1473.2000, 1673.2000, 621.8176, 0.9089, 0.9371, 2, -1 },
    { 99, 1506.8000, 1706.8000, 760.8781, 1.0485, 1.0766, 2, -1 },
    { 100, 1514.0000, 1714.0000, 544.3140, 0.9168, 0.9450, 2, -1 }
};

const std::vector<PrmTimeSegments> testTimeSegments =
{
    { -53.2, -15.4 },
    { -15.4, 5.0 },
    { 5.0, 10.4 },
    { 10.4, 27.8 },
    { 27.8, 52.4 },
    { 52.4, 146.8 },
    { 146.8, 184.6 },
    { 184.6, 205.0 },
    { 205.0, 210.4 },
    { 210.4, 227.8 },
    { 227.8, 252.4 },
    { 252.4, 324.2 },
    { 324.2, 377.6 },
    { 377.6, 430.4 },
    { 430.4, 440.0 },
    { 440.0, 444.2 },
    { 444.2, 454.4 },
    { 454.4, 470.0 },
    { 470.0, 497.0 },
    { 497.0, 519.2 },
    { 519.2, 524.2 },
    { 524.2, 532.4 },
    { 532.4, 537.8 },
    { 537.8, 551.0 },
    { 551.0, 566.0 },
    { 566.0, 573.2 },
    { 573.2, 577.6 },
    { 577.6, 578.0 },
    { 578.0, 599.6 },
    { 599.6, 601.4 },
    { 601.4, 608.6 },
    { 608.6, 616.4 },
    { 616.4, 618.2 },
    { 618.2, 623.6 },
    { 623.6, 626.0 },
    { 626.0, 630.4 },
    { 630.4, 632.6 },
    { 632.6, 640.0 },
    { 640.0, 644.2 },
    { 644.2, 649.4 },
    { 649.4, 654.4 },
    { 654.4, 658.4 },
    { 658.4, 660.8 },
    { 660.8, 662.0 },
    { 662.0, 670.0 },
    { 670.0, 681.8 },
    { 681.8, 686.0 },
    { 686.0, 695.6 },
    { 695.6, 697.0 },
    { 697.0, 698.6 },
    { 698.6, 719.2 },
    { 719.2, 732.4 },
    { 732.4, 737.6 },
    { 737.6, 737.8 },
    { 737.8, 738.8 },
    { 738.8, 746.0 },
    { 746.0, 751.0 },
    { 751.0, 759.2 },
    { 759.2, 761.0 },
    { 761.0, 766.0 },
    { 766.0, 773.2 },
    { 773.2, 776.0 },
    { 776.0, 778.0 },
    { 778.0, 799.6 },
    { 799.6, 801.4 },
    { 801.4, 808.6 },
    { 808.6, 816.4 },
    { 816.4, 818.2 },
    { 818.2, 823.6 },
    { 823.6, 826.0 },
    { 826.0, 826.4 },
    { 826.4, 832.6 },
    { 832.6, 840.2 },
    { 840.2, 845.6 },
    { 845.6, 849.4 },
    { 849.4, 849.8 },
    { 849.8, 850.4 },
    { 850.4, 858.4 },
    { 858.4, 860.8 },
    { 860.8, 862.0 },
    { 862.0, 881.8 },
    { 881.8, 886.0 },
    { 886.0, 893.0 },
    { 893.0, 895.6 },
    { 895.6, 898.6 },
    { 898.6, 907.4 },
    { 907.4, 932.0 },
    { 932.0, 937.4 },
    { 937.4, 937.6 },
    { 937.6, 938.8 },
    { 938.8, 946.0 },
    { 946.0, 959.2 },
    { 959.2, 960.2 },
    { 960.2, 961.0 },
    { 961.0, 971.6 },
    { 971.6, 976.0 },
    { 976.0, 983.6 },
    { 983.6, 1011.2 },
    { 1011.2, 1026.4 },
    { 1026.4, 1030.4 },
    { 1030.4, 1035.2 },
    { 1035.2, 1037.0 },
    { 1037.0, 1040.2 },
    { 1040.2, 1045.6 },
    { 1045.6, 1047.8 },
    { 1047.8, 1049.8 },
    { 1049.8, 1050.4 },
    { 1050.4, 1062.8 },
    { 1062.8, 1081.4 },
    { 1081.4, 1093.0 },
    { 1093.0, 1095.2 },
    { 1095.2, 1107.4 },
    { 1107.4, 1116.2 },
    { 1116.2, 1118.0 },
    { 1118.0, 1130.6 },
    { 1130.6, 1132.0 },
    { 1132.0, 1136.0 },
    { 1136.0, 1137.4 },
    { 1137.4, 1160.2 },
    { 1160.2, 1167.8 },
    { 1167.8, 1171.6 },
    { 1171.6, 1177.4 },
    { 1177.4, 1178.0 },
    { 1178.0, 1183.6 },
    { 1183.6, 1201.4 },
    { 1201.4, 1211.2 },
    { 1211.2, 1212.8 },
    { 1212.8, 1230.2 },
    { 1230.2, 1230.4 },
    { 1230.4, 1235.2 },
    { 1235.2, 1236.2 },
    { 1236.2, 1237.0 },
    { 1237.0, 1241.6 },
    { 1241.6, 1247.8 },
    { 1247.8, 1259.6 },
    { 1259.6, 1262.8 },
    { 1262.8, 1275.8 },
    { 1275.8, 1281.4 },
    { 1281.4, 1295.2 },
    { 1295.2, 1299.2 },
    { 1299.2, 1316.2 },
    { 1316.2, 1318.0 },
    { 1318.0, 1330.6 },
    { 1330.6, 1336.0 },
    { 1336.0, 1342.4 },
    { 1342.4, 1349.0 },
    { 1349.0, 1357.4 },
    { 1357.4, 1367.8 },
    { 1367.8, 1377.4 },
    { 1377.4, 1378.0 },
    { 1378.0, 1391.6 },
    { 1391.6, 1392.8 },
    { 1392.8, 1394.0 },
    { 1394.0, 1397.6 },
    { 1397.6, 1399.4 },
    { 1399.4, 1401.4 },
    { 1401.4, 1412.8 },
    { 1412.8, 1421.6 },
    { 1421.6, 1423.4 },
    { 1423.4, 1430.2 },
    { 1430.2, 1436.0 },
    { 1436.0, 1436.2 },
    { 1436.2, 1437.2 },
    { 1437.2, 1441.6 },
    { 1441.6, 1447.4 },
    { 1447.4, 1449.2 },
    { 1449.2, 1454.6 },
    { 1454.6, 1459.6 },
    { 1459.6, 1460.0 },
    { 1460.0, 1460.6 },
    { 1460.6, 1464.8 },
    { 1464.8, 1473.2 },
    { 1473.2, 1475.8 },
    { 1475.8, 1499.2 },
    { 1499.2, 1506.8 },
    { 1506.8, 1514.0 },
    { 1514.0, 1542.4 },
    { 1542.4, 1549.0 },
    { 1549.0, 1557.4 },
    { 1557.4, 1591.6 },
    { 1591.6, 1592.8 },
    { 1592.8, 1594.0 },
    { 1594.0, 1597.6 },
    { 1597.6, 1599.4 },
    { 1599.4, 1621.6 },
    { 1621.6, 1623.4 },
    { 1623.4, 1636.0 },
    { 1636.0, 1637.2 },
    { 1637.2, 1647.4 },
    { 1647.4, 1649.2 },
    { 1649.2, 1654.6 },
    { 1654.6, 1660.0 },
    { 1660.0, 1660.6 },
    { 1660.6, 1664.8 },
    { 1664.8, 1673.2 },
    { 1673.2, 1706.8 },
    { 1706.8, 1714.0 },
    //{ 1714.0, 0x1.fffffffffffffp+1023 },
};

const std::vector<PrmPasefSchedulingEntry> testSchedulingEntries =
{
    { 0, 0, 0 },
    { 0, 0, 1 },
    { 0, 1, 1 },
    { 0, 0, 2 },
    { 0, 1, 2 },
    { 1, 0, 2 },
    { 1, 2, 2 },
    { 0, 0, 3 },
    { 0, 1, 3 },
    { 0, 3, 3 },
    { 1, 0, 3 },
    { 1, 2, 3 },
    { 1, 3, 3 },
    { 0, 0, 4 },
    { 0, 1, 4 },
    { 0, 3, 4 },
    { 1, 0, 4 },
    { 1, 2, 4 },
    { 1, 3, 4 },
    { 1, 4, 4 },
    { 0, 0, 5 },
    { 0, 1, 5 },
    { 0, 3, 5 },
    { 1, 0, 5 },
    { 1, 2, 5 },
    { 1, 3, 5 },
    { 1, 4, 5 },
    { 2, 0, 5 },
    { 2, 3, 5 },
    { 2, 4, 5 },
    { 2, 5, 5 },
    { 0, 1, 6 },
    { 0, 3, 6 },
    { 1, 2, 6 },
    { 1, 3, 6 },
    { 1, 4, 6 },
    { 2, 3, 6 },
    { 2, 4, 6 },
    { 2, 5, 6 },
    { 0, 2, 7 },
    { 0, 3, 7 },
    { 0, 4, 7 },
    { 1, 3, 7 },
    { 1, 4, 7 },
    { 1, 5, 7 },
    { 0, 3, 8 },
    { 0, 4, 8 },
    { 0, 5, 8 },
    { 0, 4, 9 },
    { 0, 5, 9 },
    { 0, 5, 10 },
    { 0, 6, 12 },
    { 0, 6, 13 },
    { 0, 7, 13 },
    { 0, 6, 14 },
    { 0, 7, 14 },
    { 1, 6, 14 },
    { 1, 8, 14 },
    { 0, 6, 15 },
    { 0, 7, 15 },
    { 1, 6, 15 },
    { 1, 8, 15 },
    { 2, 6, 15 },
    { 2, 9, 15 },
    { 0, 6, 16 },
    { 0, 7, 16 },
    { 0, 10, 16 },
    { 1, 6, 16 },
    { 1, 8, 16 },
    { 1, 10, 16 },
    { 2, 6, 16 },
    { 2, 9, 16 },
    { 2, 10, 16 },
    { 0, 6, 17 },
    { 0, 7, 17 },
    { 0, 10, 17 },
    { 1, 6, 17 },
    { 1, 8, 17 },
    { 1, 10, 17 },
    { 2, 6, 17 },
    { 2, 9, 17 },
    { 2, 10, 17 },
    { 3, 6, 17 },
    { 3, 10, 17 },
    { 3, 11, 17 },
    { 0, 6, 18 },
    { 0, 7, 18 },
    { 0, 10, 18 },
    { 0, 12, 18 },
    { 1, 6, 18 },
    { 1, 8, 18 },
    { 1, 10, 18 },
    { 1, 12, 18 },
    { 2, 6, 18 },
    { 2, 9, 18 },
    { 2, 10, 18 },
    { 3, 6, 18 },
    { 3, 10, 18 },
    { 3, 11, 18 },
    { 3, 12, 18 },
    { 0, 6, 19 },
    { 0, 7, 19 },
    { 0, 10, 19 },
    { 0, 12, 19 },
    { 1, 8, 19 },
    { 1, 10, 19 },
    { 1, 12, 19 },
    { 1, 13, 19 },
    { 2, 9, 19 },
    { 2, 10, 19 },
    { 2, 13, 19 },
    { 3, 10, 19 },
    { 3, 11, 19 },
    { 3, 12, 19 },
    { 3, 13, 19 },
    { 0, 6, 20 },
    { 0, 7, 20 },
    { 0, 10, 20 },
    { 0, 12, 20 },
    { 0, 14, 20 },
    { 1, 8, 20 },
    { 1, 10, 20 },
    { 1, 12, 20 },
    { 1, 13, 20 },
    { 1, 14, 20 },
    { 2, 9, 20 },
    { 2, 10, 20 },
    { 2, 13, 20 },
    { 2, 14, 20 },
    { 3, 10, 20 },
    { 3, 11, 20 },
    { 3, 12, 20 },
    { 3, 13, 20 },
    { 3, 14, 20 },
};

const std::vector<::PrmVisualizationDataPoint> testConcurrentFrames =
{
    { -53.2, 1 },
    { -15.4, 1 },
    { -15.4, 1 },
    { 5, 1 },
    { 5, 2 },
    { 10.4, 2 },
    { 10.4, 2 },
    { 27.8, 2 },
    { 27.8, 2 },
    { 52.4, 2 },
    { 52.4, 3 },
    { 146.8, 3 },
    { 146.8, 3 },
    { 184.6, 3 },
    { 184.6, 2 },
    { 205, 2 },
    { 205, 1 },
    { 210.4, 1 },
    { 210.4, 1 },
    { 227.8, 1 },
    { 227.8, 1 },
    { 252.4, 1 },
    { 252.4, 1 },
    { 324.2, 1 },
    { 324.2, 1 },
    { 377.6, 1 },
    { 377.6, 1 },
    { 430.4, 1 },
    { 430.4, 2 },
    { 440, 2 },
    { 440, 3 },
    { 444.2, 3 },
    { 444.2, 3 },
    { 454.4, 3 },
    { 454.4, 4 },
    { 470, 4 },
    { 470, 4 },
    { 497, 4 },
    { 497, 4 },
    { 519.2, 4 },
    { 519.2, 4 },
    { 524.2, 4 },
    { 524.2, 4 },
    { 532.4, 4 },
    { 532.4, 5 },
    { 537.8, 5 },
    { 537.8, 5 }
};

bool ShowProgressNoCancel(double progressPercentage)
{
    Console::WriteLine("{0:0.0}%", progressPercentage);
    return false;
}

static bool canceled = false;
bool ShowProgressCancelAt50(double progressPercentage)
{
    if (canceled)
        throw runtime_error("progress callback called after cancel");
    Console::WriteLine("{0:0.0}%", progressPercentage);
    if (progressPercentage > 50)
    {
        canceled = true;
        return true;
    }
    return false;
}

void test()
{
    using namespace pwiz::CLI::Bruker::PrmScheduling;

    /*auto measurementMode = gcnew MeasurementMode();
    measurementMode->external_id = "1";
    measurementMode->accumulation_time = 100;
    auto measurementModes = gcnew MeasurementModeList();
    measurementModes->Add(measurementMode);*/

    auto parameters = gcnew AdditionalMeasurementParameters();
    parameters->ms1_repetition_time = 10;

    //bfs::create_directory("test_scheduling_dir");
    string templateFilepath = pwiz::util::env::get("PWIZ_ROOT") + "/pwiz/utility/bindings/CLI/timstof_prm_scheduler/timstof_prm_scheduler.prmsqlite";
    bfs::copy_file(templateFilepath, "timstof_prm_scheduler.prmsqlite", bfs::copy_option::overwrite_if_exists);
    auto s = gcnew Scheduler(ToSystemString("timstof_prm_scheduler.prmsqlite"));
    s->SetAdditionalMeasurementParameters(parameters);

    for (const auto& testTarget : testTargets)
    {
        auto target = gcnew InputTarget();
        target->time_in_seconds_begin = testTarget.minRT;
        target->time_in_seconds_end = testTarget.maxRT;
        target->isolation_mz = testTarget.isolationMz;
        target->monoisotopic_mz = testTarget.isolationMz;
        target->one_over_k0_lower_limit = testTarget.minInverseK0;
        target->one_over_k0_upper_limit = testTarget.maxInverseK0;
        target->charge = testTarget.charge;
        target->collision_energy = testTarget.ce;
        target->isolation_width = 3;
        target->one_over_k0 = (testTarget.maxInverseK0 + testTarget.minInverseK0) / 2;
        target->time_in_seconds = (testTarget.maxRT + testTarget.minRT) / 2;
        s->AddInputTarget(target, testTarget.id.ToString(), String::Empty);
    }

    auto methodInfoList = s->GetPrmMethodInfo();
    for each (auto methodInfo in methodInfoList)
    {
        if (os_)
            Console::WriteLine(String::Format("{0}-{1}: {2} {3}", methodInfo->one_over_k0_lower_limit, methodInfo->one_over_k0_upper_limit, methodInfo->mobility_gap, methodInfo->frame_rate));
    }

    auto timeSegments = gcnew TimeSegmentList();
    auto schedulingEntries = gcnew SchedulingEntryList();
    s->GetScheduling(timeSegments, schedulingEntries, gcnew ProgressUpdate(ShowProgressNoCancel));

    if (os_)
        for each (const auto& entry in schedulingEntries)
            Console::WriteLine(String::Format("{0} {1} [{2}-{3}]", entry->frame_id, entry->target_id,
                                              timeSegments[entry->time_segment_id]->time_in_seconds_begin,
                                              timeSegments[entry->time_segment_id]->time_in_seconds_end));

    //unit_assert_operator_equal(testSchedulingEntries.size(), schedulingEntries->Count);
    unit_assert(testSchedulingEntries.size() <= schedulingEntries->Count);
    for (size_t i=0; i < testSchedulingEntries.size(); ++i)
    {
        auto testEntry = testSchedulingEntries[i];
        auto entry = schedulingEntries[i];

        unit_assert_operator_equal(testEntry.time_segment_id, entry->time_segment_id);
        unit_assert_operator_equal(testEntry.frame_id, entry->frame_id);
        unit_assert_operator_equal(testEntry.target_id, entry->target_id);
    }

    unit_assert(testTimeSegments.size() <= timeSegments->Count);
    for (size_t i = 0; i < testTimeSegments.size(); ++i)
    {
        auto testTimeSegment = testTimeSegments[i];
        auto timeSegment = timeSegments[i];

        unit_assert_equal(testTimeSegment.time_in_seconds_begin, timeSegment->time_in_seconds_begin, 0);
        unit_assert_equal(testTimeSegment.time_in_seconds_end, timeSegment->time_in_seconds_end, 0);
    }

    // test visualizations
    auto concurrentFrames = s->GetSchedulingMetrics(SchedulingMetrics::CONCURRENT_FRAMES);
    if (os_)
        for each (const auto& xyPair in concurrentFrames)
            Console::WriteLine(String::Format("{0} {1}", xyPair->x, xyPair->y));

    unit_assert(testConcurrentFrames.size() <= concurrentFrames->Count);
    for (size_t i = 0; i < testConcurrentFrames.size(); ++i)
    {
        auto testFrame = testConcurrentFrames[i];
        auto xyPair = concurrentFrames[i];

        unit_assert_equal(testFrame.x, xyPair->x, 1e-8);
        unit_assert_equal(testFrame.y, xyPair->y, 1e-8);
    }

    s->WriteScheduling();

    // test cancelling during scheduling
    timeSegments->Clear();
    schedulingEntries->Clear();
    s->GetScheduling(timeSegments, schedulingEntries, gcnew ProgressUpdate(ShowProgressCancelAt50));
}

int main(int argc, char* argv[])
{
    TEST_PROLOG_EX(argc, argv, "_CLI")

    try
    {
        if (argc>1 && !strcmp(argv[1],"-v")) os_ = &cout;
        if (os_) *os_ << "PrmSchedulerTest\n";

        test();
    }
    catch (exception& e)
    {
        TEST_FAILED("std::exception: " + string(e.what()))
    }
    catch (System::Exception^ e)
    {
        TEST_FAILED("System.Exception: " + ToStdString(e->Message))
    }
    catch (...)
    {
        TEST_FAILED("Caught unknown exception.")
    }

    TEST_EPILOG
}

