#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2015 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
#


import modules ;
if [ modules.peek : NT ]
{
    import path feature svnrev sequence ;
    path-constant THIS_PATH : $(PWIZ_ROOT_PATH)/pwiz/utility/bindings/CLI/example ;

    rule do_example_build ( targets + : sources * : properties * )
    {
        if <variant>debug in $(properties) ||
           <debug-symbols>on in $(properties)
        {
            CONFIGURATION on $(<[1]) = "Debug" ;
        }
        else
        {
            CONFIGURATION on $(<[1]) = "Release" ;
        }

        local location = [ path.make [ feature.get-values location : $(properties) ] ] ;
        OUTPUT_PATH on $(<[1]) = [ path.native $(location)/ ] ; # OutDir requires trailing slash
        INTERMEDIATE_PATH on $(<[1]) = "BaseIntermediateOutputPath=$(PWIZ_BUILD_PATH)/obj/" ;
        JAM_SEMAPHORE on $(targets) = "dotNetSemaphore" ;
    }

    actions do_example_build
    {
        $(MSVC_CURRENT_SETUP_SCRIPT)
        echo Building example project in $(CONFIGURATION:L) configuration...
        msbuild $(THIS_PATH)/pwizCLI.sln /p:Configuration=$(CONFIGURATION);Platform=$(PLATFORM);$(INTERMEDIATE_PATH);OutDir=$(OUTPUT_PATH) /nologo /verbosity:minimal
    }

    rule requirements ( properties * )
    {
        local variants = [ feature.get-values <variant> : $(properties) ] ;
        local location = [ path.make $(THIS_PATH)/binaries ] ;
        if <address-model>64 in $(properties) { location = $(location)/x64 ; }
        else { location = $(location)/x86 ; }

        properties = $(properties) <location>$(location) ;
        return <location>$(location)
               [ install-identdata-dependencies $(properties) ]
               [ install-vendor-api-dependencies $(properties) ]
               <assembly>$(PWIZ_ROOT_PATH)/pwiz/utility/bindings/CLI//pwiz_bindings_cli
               <dependency>$(PWIZ_ROOT_PATH)/pwiz/utility/bindings/CLI//pwiz_bindings_cli/<location>$(location)
               <dependency>$(PWIZ_ROOT_PATH)/pwiz/utility/bindings/CLI//pwiz_bindings_cli.xml/<location>$(location) ;
    }

    make README : : @make_README : <conditional>@requirements ;
    actions make_README
    {
@($(STDOUT):E=
This example project is bundled with the vendor DLLs in order to show you how to use them in a C# project,
but use of these DLLs in your derived works is subject to license agreements. In particular, the Thermo license
requires each developer to download MSFileReader separately and agree to the license on their site. Then you can
distribute the MSFileReader DLLs in your non-commercial binary distributions. The other licenses do not require
developers to download the DLLs separately, but you must agree to each vendor's license agreement and have your
end users agree to them as well.
) > "$(<)"
    }

    make pwizCLI.exe
        : # sources
        : # actions
            @do_example_build
        : # requirements
            <location>$(PWIZ_BUILD_PATH)/pwizCLI
            <variant>debug:<build>no
            <dependency>README
        ;


    import common ;
    import property-set ;
    import sequence ;
    import option ;
    import property ;
    import tar ;

    rule binary-tarball-requirements ( properties * )
    {
        local toolsets = [ feature.get-values <toolset> : $(properties) ] ;
        local variants = [ feature.get-values <variant> : $(properties) ] ;
        local location = [ feature.get-values <location> : $(properties) ] ;
        local sources = $(THIS_PATH)/pwizCLI.sln $(THIS_PATH)/pwizCLI.csproj $(THIS_PATH)/Program.cs $(THIS_PATH)/binaries ;

        local result = "<tar-source>path-anchor:$(THIS_PATH)&&$(sources)" ;
        result += <dependency>pwizCLI.exe <location>$(PWIZ_BUILD_PATH) ;
        return $(result) ;
    }

    tar.create pwiz-CLI-example-project.tar.bz2
      : # sources handled by conditional

      : # requirements
        <conditional>@binary-tarball-requirements
      ;
}
