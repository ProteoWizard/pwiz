#
# $Id$
#
#
# Original author: Matt Chambers <matt.chambers .@. vanderbilt.edu>
#
# Copyright 2009 Vanderbilt University - Nashville, TN 37232
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.
# 


# Waters support status:
# - DLLs are native, MSVC only
# - can redistribute DLLs
#   * if MSVC:
#       * if DLLs are present: PWIZ_READER_WATERS is defined for all dependents
#       * else: PWIZ_READER_WATERS is never defined
#   * else: PWIZ_READER_WATERS is never defined

import path ;

project
    : requirements 
        <toolset>gcc:<cxxflags>-fno-strict-aliasing
        <toolset>msvc,<link>shared:<define>PWIZ_DYN_LINK
    ;


path-constant READER_PATH : . ;
path-constant API_PATH : $(PWIZ_ROOT_PATH)/pwiz_aux/msrc/utility/vendor_api/Waters ;
path-constant TEST_DATA_PATH : ./Reader_Waters_Test.data ;
constant READER_PATH : "pwiz/data/vendor_readers/Waters" ;
constant READER_NAME : "Reader_Waters" ;


rule vendor-api-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ project-exists $(API_PATH) ] &&
       [ masslynxraw-dll-location $(API_PATH) : $(properties) ] &&
	   ! [ without-binary-msdata $(properties) ] &&
       ! <vendor-api-support>off in $(properties)
    {
        result += <source>Reader_Waters_Detail.cpp ;
    }
    return $(result) [ vendor-api-usage-requirements $(properties) ] ;
}

rule vendor-api-usage-requirements ( properties * )
{
    local result ;
    if <toolset>msvc in $(properties) &&
       [ project-exists $(API_PATH) ] &&
       [ masslynxraw-dll-location $(API_PATH) : $(properties) ]  &&
	   ! [ without-binary-msdata $(properties) ] &&
       ! <vendor-api-support>off in $(properties)
    {
        result += <library>$(API_PATH)//pwiz_vendor_api_waters ;
        result += <define>PWIZ_READER_WATERS ;
    }
    else if ! $(.warn-once)
    {
        .warn-once = true ;
        if [ without-binary-msdata $(properties) ] 
		{
            echo "[$(READER_PATH)] without-binary-msdata build: $(READER_NAME) can only identify files, not read them." ;
		}
        else if ! <toolset>msvc in $(properties)
        {
            echo "[$(READER_PATH)] Non-MSVC build: $(READER_NAME) can only identify files, not read them." ;
        }
        else if ! [ project-exists $(API_PATH) ]
        {
            echo "[$(READER_PATH)] Missing API: $(READER_NAME) can only identify files, not read them." ;
        }
        else if ! [ masslynxraw-dll-location $(API_PATH) : $(properties) ]
        {
            echo "[$(READER_PATH)] Missing DLL: $(READER_NAME) can only identify files, not read them." ;
        }
    }
    return $(result) ;
}

lib pwiz_reader_waters
    : # sources
        Reader_Waters.cpp
        SpectrumList_Waters.cpp
        ChromatogramList_Waters.cpp
    : # requirements
        <library>$(PWIZ_ROOT_PATH)/pwiz/data/msdata//pwiz_data_msdata
        <conditional>@vendor-api-requirements
    : # default-build
    : # usage-requirements
        <library>$(PWIZ_ROOT_PATH)/pwiz/data/msdata//pwiz_data_msdata
        <conditional>@vendor-api-usage-requirements
    ;


rule warn-once ( message )
{
    if ! $(.warn-once-test)
    {
        .warn-once-test = true ;
        echo $(message) ;
    }
}


rule test-requirements ( properties * )
{
    # decompress test data if available (on any platform)

    local result ;

    if ! [ path.exists $(TEST_DATA_PATH) ]
    {
        warn-once "[$(READER_PATH)] Missing test data." ;
        result += <build>no ;
    }
    else if [ without-binary-msdata $(properties) ] 
	{
        warn-once "[$(READER_PATH)] without-binary-msdata build: $(READER_NAME)_Test is only testing that it can identify files, not read them." ;
	}
    else if ! <toolset>msvc in $(properties)
    {
        warn-once "[$(READER_PATH)] Non-MSVC build: $(READER_NAME)_Test is only testing that it can identify files, not read them." ;
    }
    else if ! [ project-exists $(API_PATH) ]
    {
        warn-once "[$(READER_PATH)] Missing API: $(READER_NAME)_Test is only testing that it can identify files, not read them." ;
    }
    else if ! [ masslynxraw-dll-location $(API_PATH) : $(properties) ]
    {
        warn-once "[$(READER_PATH)] Missing DLL: $(READER_NAME)_Test is only testing that it can identify files, not read them." ;
    }

    return $(result) ;
}

local generate-mzML = [ MATCH (--generate-mzML) : [ modules.peek : ARGV ] ] ;

# special run target for Reader_Waters_Test, which needs external data 
# use --preserve-test-targets to prevent bjam from deleting the executable
run-if-exists Reader_Waters_Test.cpp $(PWIZ_ROOT_PATH)/pwiz/utility/misc//pwiz_utility_vendor_reader_test_harness
    : # args
        \"$(TEST_DATA_PATH)\" $(generate-mzML)
    : # input-files
    : # requirements
        <library>pwiz_reader_waters
        <conditional>@test-requirements
    : # target name
        Reader_Waters_Test
    : # default-build
    ;
